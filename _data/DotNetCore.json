{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core April 2019 Updates – 2.1.10 and 2.2.4","PublishedOn":"2019-04-09T20:35:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included fixes.\n\n.NET Core 2.2.4 and .NET...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2019-updates-2-1-10-and-2-2-4/","RawContent":null},{"Title":"Announcing ML.NET 1.0 RC – Machine Learning for .NET","PublishedOn":"2019-04-05T23:36:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0-rc-machine-learning-for-net/","RawContent":null},{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2019-04-02T10:40:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,019 years. In the Japanese calendar, however, a new era begins...","Href":"https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":"Announcing F# 4.6","PublishedOn":"2019-03-29T21:40:28+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re excited to announce general availability of F# 4.6 and the F# tools for Visual Studio 2019! In this post, I&#8217;ll show you how to get started, explain the F# 4.6 feature set, give you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-6/","RawContent":null},{"Title":"Migrating Delegate.BeginInvoke Calls for .NET Core","PublishedOn":"2019-03-28T21:29:50+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"I recently worked with a couple customers migrating applications to .NET Core that had to make code changes to workaround BeginInvoke and EndInvoke methods on delegates not being supported on .NET...","Href":"https://devblogs.microsoft.com/dotnet/migrating-delegate-begininvoke-calls-for-net-core/","RawContent":null},{"Title":".NET Framework March 2019 Update","PublishedOn":"2019-03-20T00:40:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in which the Framework throws an...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/","RawContent":null},{"Title":".NET Core Container Images now Published to Microsoft Container Registry","PublishedOn":"2019-03-15T14:12:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are now publishing .NET Core container images to Microsoft Container Registry (MCR). We have also made other changes to the images we publish, described in this post.\nImportant: You will need to...","Href":"https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/","RawContent":null},{"Title":".NET Core March 2019 Updates – 1.0.15, 1.1.12, 2.1.9 and 2.2.3","PublishedOn":"2019-03-12T22:59:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core March 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-march-2019/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9337677839","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:15:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Merged pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335742237","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:21:55","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Opened pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335605309","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:00:02","Actor":"scottaddie","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Opened pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9266562420","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:04:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Merged pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "},{"Id":"9228689700","Type":"IssuesEvent","CreatedAt":"2019-03-12T17:35:17","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Opened issue \"March 2019 .NET Updates\" (#103) at dotnet/announcements","RelatedBody":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0))\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9450128550","Type":"PullRequestEvent","CreatedAt":"2019-04-16T05:14:49","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24013","RelatedDescription":"Merged pull request \"Use NewArrayHolder for array types in src/debug\" (#24013) at dotnet/coreclr","RelatedBody":"Using a `NewHolder` with array types means that when the holder is ready to release the  memory, it ends up invoking `delete` (instead of `delete[]`) on that array. This is an undefined behaviour.\r\n\r\nUse NewArrayHolder instead to fix this."},{"Id":"9450121372","Type":"PullRequestEvent","CreatedAt":"2019-04-16T05:12:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24017","RelatedDescription":"Merged pull request \"Use NewArrayHolder for array types\" (#24017) at dotnet/coreclr","RelatedBody":"This touches all the code outside of src/debug/.\r\n\r\nUsing a `NewHolder` with array types means that when the holder is ready to release the memory, it ends up invoking `delete` (instead of `delete[]`) on that array. This is an undefined behaviour.\r\n\r\nUse `NewArrayHolder` instead to fix this."},{"Id":"9449921681","Type":"IssuesEvent","CreatedAt":"2019-04-16T04:09:27","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23963","RelatedDescription":"Closed issue \"Registration Free Com Interop\" (#23963) at dotnet/coreclr","RelatedBody":"Hi All,\r\nI apologize in advance if this is not the right place to ask this kind of question.\r\n\r\nI am using the Microsoft Office COM interop (Microsoft.Office.Interop.Word and Microsoft.Office.Interop.Outlook)\r\n\r\nOften times customers have COM registry settings that aren't quite correct and it causes type mismatches when working with instances of the classes.\r\n\r\nAccording to this article:\r\nhttps://docs.microsoft.com/en-us/dotnet/framework/interop/registration-free-com-interop\r\n\r\nIt appears as though it is possible to tell my application not to use the registry to lookup COM information/types but I can't figure out how to do that with the assemblies above.  Does anyone have any examples they can post? \r\n"},{"Id":"9449920962","Type":"IssuesEvent","CreatedAt":"2019-04-16T04:09:13","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24024","RelatedDescription":"Closed issue \"[arm64] Test failed: System.Tests.RangeTests.GetOffsetAndLengthTest\" (#24024) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstress2_tst/29/\r\n\r\n**Failed tests:**\r\nSystem.Tests.RangeTests.GetOffsetAndLengthTest\r\n\r\n**Log:**\r\n```\r\nSystem.Tests.RangeTests.GetOffsetAndLengthTest [FAIL]\r\n      System.TypeLoadException : Could not load type 'OffsetAndLength' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n      Stack Trace:\r\n           at System.Tests.RangeTests.GetOffsetAndLengthTest()\r\n```"},{"Id":"9449915770","Type":"PullRequestEvent","CreatedAt":"2019-04-16T04:07:37","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24011","RelatedDescription":"Merged pull request \"Fix issue #23943\" (#24011) at dotnet/coreclr","RelatedBody":"The issue https://github.com/dotnet/coreclr/issues/23943 is due to literal `0xFFFFFFFFFFFFF000LL` being **long long unsigned int** and using as if it were **long long int**.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/77a5f9cef77c34db739bb3c13bfd091c693a12d4/src/jit/emitarm64.cpp#L8425-L8427\r\n\r\nAll the following expressions\r\n* `0xFFFFFFFFFFFFF000LL`\r\n* `((ssize_t)dstAddr & 0xFFFFFFFFFFFFF000LL)`\r\n* `((ssize_t)srcAddr & 0xFFFFFFFFFFFFF000LL)` \r\n* `(((ssize_t)dstAddr & 0xFFFFFFFFFFFFF000LL) - ((ssize_t)srcAddr & 0xFFFFFFFFFFFFF000LL))` \r\n\r\nhave **long long unsigned int** type (see https://godbolt.org/z/Z443bf).\r\n\r\nConsequently, C++ compiler uses **lsr** instruction instead of **asr** instruction for shifting 12 bits to the right.\r\n\r\nThis can be seen from the generated assembly for the expression computing `relPageAddr`\r\n\r\n```asm\r\n  244978:       9274ce88        and     x8, x20, #0xfffffffffffff000\r\n  24497c:       9274cec9        and     x9, x22, #0xfffffffffffff000\r\n  244980:       cb090108        sub     x8, x8, x9\r\n  244984:       d34cfd04        lsr     x4, x8, #12\r\n```\r\n\r\nWith this changes (introducing and using `computeRelPageAddr` function) the corresponding expression for `relPageAddr` will be\r\n```asm\r\n  244978:       d34cfe88        lsr     x8, x20, #12\r\n  24497c:       cb563104        sub     x4, x8, x22, lsr #12\r\n```\r\n\r\n\r\nFixes issue #23943 "},{"Id":"9449595138","Type":"PullRequestEvent","CreatedAt":"2019-04-16T02:36:45","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24016","RelatedDescription":"Merged pull request \"Update clr-configuration-knobs and cleanups\" (#24016) at dotnet/coreclr","RelatedBody":"* Remove obsolete comment from `tests/src/GC/Scenarios/Samples/gc.cs` (based on https://github.com/dotnet/coreclr/pull/23595)\r\n* In the C# script `clr-configuration-knobs.csx`, update the usage to use `dotnet-script` tool as `dotnet-csi` and other repl commands were removed. The new bring up might happen by the Roslyn team: https://github.com/dotnet/roslyn/issues/17666. Meanwhile, `dotnet-script` can be installed using: `dotnet tool install --global dotnet-script`.\r\n* Remove extra spaces from end of markdown table rows.\r\n\r\n/cc @jkotas"},{"Id":"9449572047","Type":"PullRequestEvent","CreatedAt":"2019-04-16T02:30:49","Actor":"omajid","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24027","RelatedDescription":"Opened pull request \"Use delete [] on array types\" (#24027) at dotnet/coreclr","RelatedBody":"Calling delete on types allocated with new[] leads to undefined behaviour."},{"Id":"9449536339","Type":"PullRequestEvent","CreatedAt":"2019-04-16T02:21:14","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24012","RelatedDescription":"Merged pull request \"[release/3.0] Opt COM methods out of the new Windows instance-method handling\" (#24012) at dotnet/coreclr","RelatedBody":"Some of our users (such as WPF), use a struct to wrap their HRESULT return types on COM members when they use PreserveSig. When we updated CoreCLR to correctly handle the Windows calling convention, we broke this behavior. Additonally, since #23816 didn't make it into release/3.0, this PR also fixes bugs related to enum returns on COM methods, which WPF also found.\r\n\r\nRemove calls to tests that were verifying that COM follows the new behavior. (The tests are removed in the PR to master)\r\n\r\nThe release/3.0 side of #23974 "},{"Id":"9449415988","Type":"IssuesEvent","CreatedAt":"2019-04-16T01:48:32","Actor":"AriNuer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24026","RelatedDescription":"Opened issue \"[arm64/windows]Test failure:System.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion\" (#24026) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs3_tst/28/\r\n\r\n**Failed test:**\r\nSystem.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion\r\n\r\n**Failed log:**\r\n```\r\nystem.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion [FAIL]\r\n      Assert.Equal() Failure\r\n                   ? (pos 3)\r\n      Expected: ???\r\n      Actual:   ????\r\n                   ? (pos 3)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---94cb1dee\\_\\fx\\src\\System.Reflection.Metadata\\tests\\Metadata\\Ecma335\\MetadataRootBuilderTests.cs(384,0): at System.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion()\r\n    System.Reflection.Metadata.Ecma335.Tests.MetadataBuilderTests.GetOrAddDocumentName2 [FAIL]\r\n      Assert.Equal() Failure\r\n                  ? (pos 2)\r\n      Expected: ??\r\n      Actual:   ???\r\n                  ? (pos 2)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---94cb1dee\\_\\fx\\src\\System.Reflection.Metadata\\tests\\Metadata\\Ecma335\\MetadataBuilderTests.cs(486,0): at System.Reflection.Metadata.Ecma335.Tests.MetadataBuilderTests.GetOrAddDocumentName2()\r\n  Finished:    System.Reflection.Metadata.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Reflection.Metadata.Tests  Total: 556, Errors: 0, Failed: 2, Skipped: 0, Time: 9.952s\r\n----- end 16:28:28.60 ----- exit code 1 ----------------------------------------------------------\r\n```"},{"Id":"9449394377","Type":"IssuesEvent","CreatedAt":"2019-04-16T01:42:32","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24025","RelatedDescription":"Opened issue \"[arm64] System.Security.Cryptography.Xml.Tests.Reference_ArbitraryElements.Transforms_ExtraData_XmlProcessingInstruction\" (#24025) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs0x10_tst/28/\r\n\r\n**Failed tests:**\r\nSystem.Security.Cryptography.Xml.Tests.Reference_ArbitraryElements.Transforms_ExtraData_XmlProcessingInstruction\r\n\r\n**Log:**\r\n```\r\nSystem.Security.Cryptography.Xml.Tests.Reference_ArbitraryElements.Transforms_ExtraData_XmlProcessingInstruction [FAIL]\r\n      System.NullReferenceException : Object reference not set to an instance of an object.\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(1116,0): at System.Security.Cryptography.Xml.SignedXml.IsKeyTheCorrectAlgorithm(AsymmetricAlgorithm key, Type expectedType)\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(1020,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignedInfo(AsymmetricAlgorithm key)\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(290,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignature(AsymmetricAlgorithm key)\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(272,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(AsymmetricAlgorithm& signingKey)\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\tests\\SignedXml_Helpers.cs(28,0): at System.Security.Cryptography.Xml.Tests.Helpers.VerifyCryptoExceptionOnLoad(String xml, Boolean loadXmlThrows)\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\tests\\Reference_ArbitraryElements.cs(68,0): at System.Security.Cryptography.Xml.Tests.Reference_ArbitraryElements.Transforms_ExtraData_XmlProcessingInstruction()\r\n```"},{"Id":"9449377493","Type":"IssuesEvent","CreatedAt":"2019-04-16T01:37:53","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24024","RelatedDescription":"Opened issue \"[arm64] Test failed: System.Tests.RangeTests.GetOffsetAndLengthTest\" (#24024) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstress2_tst/29/\r\n\r\n**Failed tests:**\r\nSystem.Tests.RangeTests.GetOffsetAndLengthTest\r\n\r\n**Log:**\r\n```\r\nSystem.Tests.RangeTests.GetOffsetAndLengthTest [FAIL]\r\n      System.TypeLoadException : Could not load type 'OffsetAndLength' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n      Stack Trace:\r\n           at System.Tests.RangeTests.GetOffsetAndLengthTest()\r\n```"},{"Id":"9449344725","Type":"PullRequestEvent","CreatedAt":"2019-04-16T01:28:41","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24015","RelatedDescription":"Merged pull request \"Fix incorrect bit match pattern in UTF-16 validation\" (#24015) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/36870.\r\n\r\nIn this code, `mask` has the bit pattern `aa_bb_cc_...`, where each pair of bits is \"11\" if the corresponding char in the input vector is a UTF-16 surrogate code point (`U+D800..U+DFFF`), \"00\" otherwise.\r\n\r\n`mask2` has the bit pattern `xx_yy_zz_...`, where each pair of bits is \"00\", \"01\", or (undefined) as specified in the comment starting on line 170. ANDing these two masks together should result in \"01\" if the corresponding char was a low surrogate char, \"00\" otherwise. This is stored in the local `lowSurrogatesMask`.\r\n\r\nThe local `highSurrogatesMask` is intended to be similar, but where \"01\" represents that the corresponding char was a high surrogate char, \"00\" otherwise. This value was being incorrectly generated because the operands to the XOR and the AND operation were swapped. The actual behavior of this code (which has been made clearer in comments and which has been fixed of this PR) is that it should first flip every odd bit in `mask2` (so that \"00\" means low surrogate, \"01\" means high surrogate, and garbage stays garbage), then when it's ANDed with `mask` it'll be properly normalized to \"01\" or \"00\"."},{"Id":"9449326253","Type":"IssuesEvent","CreatedAt":"2019-04-16T01:23:26","Actor":"AriNuer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24023","RelatedDescription":"Opened issue \"[arm64/windows] Test \"Loader_ContextualReflection._ContextualReflection_ContextualReflection\" failed with TestLibrary.AssertTestException: Assert.IsNotNull\" (#24023) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_r2r_gcstress15_tst/47/\r\n\r\n**Failed test:**\r\nLoader_ContextualReflection._ContextualReflection_ContextualReflection_.Loader\\\\ContextualReflection\\\\ContextualReflection\\\\ContextualReflection.cmd\r\n\r\n**Failed log:**\r\n```\r\nLoader\\ContextualReflection\\ContextualReflection\\ContextualReflection.cmd [FAIL]\r\n        \r\n  Unhandled Exception: TestLibrary.AssertTestException: Assert.IsNotNull: \r\n           at TestLibrary.Assert.HandleFail(String assertionName, String message) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Common\\CoreCLRTestLibrary\\Assertion.cs:line 725\r\n           at ContextualReflectionTest.Program.TestTypeGetType(Boolean isolated, Func`2 typeGetType) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Loader\\ContextualReflection\\ContextualReflection.cs:line 410\r\n           at ContextualReflectionTest.Program.TestTypeGetType(Boolean isolated) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Loader\\ContextualReflection\\ContextualReflection.cs:line 359\r\n           at ContextualReflectionTest.Program.RunTests(Boolean isolated) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Loader\\ContextualReflection\\ContextualReflection.cs:line 735\r\n           at ContextualReflectionTest.Program.RunTests() in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Loader\\ContextualReflection\\ContextualReflection.cs:line 728\r\n           at ContextualReflectionTest.Program.Main() in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Loader\\ContextualReflection\\ContextualReflection.cs:line 32\r\n  \r\n  \r\n  Return code:      1\r\n  Raw output file:      C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Reports\\Loader.ContextualReflection\\ContextualReflection\\ContextualReflection.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection>set COMPLUS_NOGUIONASSERT=1 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection>set COMPLUS_CONTINUEONASSERT=0 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection>set COMPLUS_GCSTRESS=0xF \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection>set COMPLUS_TIEREDCOMPILATION=0 \r\n                1 file(s) copied.\r\n        \" C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\crossgen.exe\"  /Platform_Assemblies_Paths C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root;C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection\\IL;C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection /in ContextualReflection.org /out ContextualReflection.exe\r\n        Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n        Copyright (c) Microsoft Corporation.  All rights reserved.\r\n        \r\n        Native image ContextualReflection.exe generated successfully.\r\n         \"C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\corerun.exe\" ContextualReflection.exe \r\n        Expected: 100\r\n        Actual: -532462766\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\r\n  > C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection\\ContextualReflection.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\arm64_cross_c---0aaef436\\bin\\tests\\Windows_NT.arm64.Checked\\TestWrappers\\Loader.ContextualReflection\\Loader.ContextualReflection.XUnitWrapper.cs(112,0): at Loader_ContextualReflection._ContextualReflection_ContextualReflection_._ContextualReflection_ContextualReflection_cmd()\r\n```"},{"Id":"9449314526","Type":"IssuesEvent","CreatedAt":"2019-04-16T01:20:06","Actor":"nattress","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/9007","RelatedDescription":"Closed issue \"Allow custom runner for CoreCLR test unix scripts\" (#9007) at dotnet/coreclr","RelatedBody":"Each CoreCLR test has a Windows `test.cmd` and Unix `test.sh` script that runs the test. The Windows scripts allow a custom test runner so that CoreRun can be switched out (ie, with CoreRT). The Unix scripts need the same feature.\r\n\r\nOn Windows:\r\n```\r\nIF NOT \"%CLRCustomTestLauncher%\"==\"\" (\r\n  set LAUNCHER=call %CLRCustomTestLauncher% %~dp0\r\n) ELSE (\r\n  set LAUNCHER=%_DebuggerFullPath% \"%CORE_ROOT%\\corerun.exe\"\r\n)\r\n      \r\nECHO %LAUNCHER% class01.exe %CLRTestExecutionArguments%\r\n```\r\n\r\nWhat Unix currently has:\r\n```\r\n$_DebuggerFullPath \"$CORE_ROOT/corerun\" class01.exe $CLRTestExecutionArguments \r\n```"},{"Id":"9449292891","Type":"IssuesEvent","CreatedAt":"2019-04-16T01:13:42","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24022","RelatedDescription":"Opened issue \"[x86] error NU3004 in x86_checked_windows_nt_jitnox86hwintrinsic\" (#24022) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_jitnox86hwintrinsic/423/\r\n\r\n**Log:**\r\n```\r\nD:\\j\\workspace\\x86_checked_w---9ba7550c\\packages\\microsoft.dotnet.buildtools\\3.0.0-preview4-03913-01\\lib\\tool-runtime\\project.csproj : error NU3004: Package 'Newtonsoft.Json 10.0.3' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\n```"},{"Id":"9449283242","Type":"PullRequestEvent","CreatedAt":"2019-04-16T01:11:01","Actor":"jkoritzinsky","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23998","RelatedDescription":"Closed pull request \"Use CMake's built-in toolchain detection\" (#23998) at dotnet/coreclr","RelatedBody":"Try removing manual resolution of toolchain for non-cross builds and let CMake resolve the toolchain itself."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9449814571","Type":"IssuesEvent","CreatedAt":"2019-04-16T03:37:40","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10440","RelatedDescription":"Closed issue \"Switching to using PackageDownload to acquire targeting and runtime packs\" (#10440) at dotnet/cli","RelatedBody":"Depends on https://github.com/NuGet/Home/issues/7339"},{"Id":"9448534891","Type":"IssuesEvent","CreatedAt":"2019-04-15T21:57:37","Actor":"joshfree","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11162","RelatedDescription":"Opened issue \"Feature Request: \"Did you mean ...?\" prompting for command typos such as 'consle'\" (#11162) at dotnet/cli","RelatedBody":"**_Moved from original issue by @jamesBrosnahan at  https://github.com/dotnet/core/issues/2587_**  :\r\n\r\n\r\n\r\nProblem encountered on https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/create\r\nOperating System: Linux Ubuntu 18.04 - x64\r\n\r\nProvide details about the problem you are experiencing. Include your operating system version, exact error message, code sample, and anything else that is relevant.\r\n\r\nTypo using command outputs excessive information:\r\ndotnet new consle -o myApp\r\n\r\n```\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\nGetting ready...\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n\r\n\r\nNo templates matched the input template name: consle.\r\n\r\nTemplates                                         Short Name         Language          Tags                                 \r\n----------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console            [C#], F#, VB      Common/Console                       \r\nClass library                                     classlib           [C#], F#, VB      Common/Library                       \r\nUnit Test Project                                 mstest             [C#], F#, VB      Test/MSTest                          \r\nNUnit 3 Test Project                              nunit              [C#], F#, VB      Test/NUnit                           \r\nNUnit 3 Test Item                                 nunit-test         [C#], F#, VB      Test/NUnit                           \r\nxUnit Test Project                                xunit              [C#], F#, VB      Test/xUnit                           \r\nRazor Page                                        page               [C#]              Web/ASP.NET                          \r\nMVC ViewImports                                   viewimports        [C#]              Web/ASP.NET                          \r\nMVC ViewStart                                     viewstart          [C#]              Web/ASP.NET                          \r\nASP.NET Core Empty                                web                [C#], F#          Web/Empty                            \r\nASP.NET Core Web App (Model-View-Controller)      mvc                [C#], F#          Web/MVC                              \r\nASP.NET Core Web App                              webapp             [C#]              Web/MVC/Razor Pages                  \r\nASP.NET Core with Angular                         angular            [C#]              Web/MVC/SPA                          \r\nASP.NET Core with React.js                        react              [C#]              Web/MVC/SPA                          \r\nASP.NET Core with React.js and Redux              reactredux         [C#]              Web/MVC/SPA                          \r\nRazor Class Library                               razorclasslib      [C#]              Web/Razor/Library/Razor Class Library\r\nASP.NET Core Web API                              webapi             [C#], F#          Web/WebAPI                           \r\nglobal.json file                                  globaljson                           Config                               \r\nNuGet Config                                      nugetconfig                          Config                               \r\nWeb Config                                        webconfig                            Config                               \r\nSolution File                                     sln                                  Solution                             \r\n\r\nExamples:\r\n    dotnet new mvc --auth Individual\r\n    dotnet new mstest \r\n    dotnet new --help\r\n```\r\nThe dotnet command should do error checking prior to outputting a welcome message and then use a 'Did you mean' algorithm to determine if the template in the command is a typo or has not been installed; then prompt the user with a group of candidate templates or offer to download templates from the .NET Foundation if available."},{"Id":"9448476084","Type":"PullRequestEvent","CreatedAt":"2019-04-15T21:46:17","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11161","RelatedDescription":"Opened pull request \"dotnet/sdk 2.2.300-preview-64015-01\" (#11161) at dotnet/cli","RelatedBody":"Insert dotnet/sdk latest release/2.2.3xx, with nuget version matching latest in dotnet/cli release/2.2.3xx\r\n"},{"Id":"9448447363","Type":"PullRequestEvent","CreatedAt":"2019-04-15T21:40:46","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/11141","RelatedDescription":null,"RelatedBody":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9448447163","Type":"PullRequestEvent","CreatedAt":"2019-04-15T21:40:43","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/11141","RelatedDescription":"Closed pull request \"Merge release/2.1.6xx to release/2.2.2xx\" (#11141) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9448445276","Type":"PullRequestEvent","CreatedAt":"2019-04-15T21:40:20","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/11140","RelatedDescription":null,"RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9449160181","Type":"IssuesEvent","CreatedAt":"2019-04-16T00:34:16","Actor":"rashadrivera","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1147","RelatedDescription":"Opened issue \"Please Make AsnReader And AnsWriter Public\" (#1147) at dotnet/standard","RelatedBody":"All,\r\n\r\nI have a real need for the internl classes that are being used in .NET Core 2.x.  I need a Asn reader and writer and I've recently discovered the [AsnReader and AsnWriter](https://github.com/dotnet/corefx/tree/master/src/Common/src/System/Security/Cryptography/Asn1Reader) as internal classes.  **Can these classes become public within .NET Standard?**  My products are built upon .NET Standard exclusively and not .NET Core or .NET.\r\n\r\nIn my case, I need them to create certificate revocation lists (CRL) and translate online certificate status protocol (OCSP) requests and responses.  I've used BouncyCastle as part of my solution, but I feel it is a poor implementation because of its cryptic design and the fact that I **must** give it unadulterated access to my private keys (which is a serious FIPS security concern).  \r\n\r\nMy goal is to use out-of-process signing like Azure.  But in order to do that, I need a solution that allows me to generate Asn data without third party tools like BouncyCastle.  "},{"Id":"9444483250","Type":"PullRequestEvent","CreatedAt":"2019-04-15T12:13:52","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1146) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n"},{"Id":"9444420057","Type":"PullRequestEvent","CreatedAt":"2019-04-15T12:03:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1146) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n"},{"Id":"9439646611","Type":"PullRequestEvent","CreatedAt":"2019-04-14T12:13:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1145","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1145) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19213.2\r\n\r\n"},{"Id":"9439624239","Type":"PullRequestEvent","CreatedAt":"2019-04-14T12:03:28","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1145","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1145) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19213.2\r\n\r\n"},{"Id":"9437971366","Type":"IssuesEvent","CreatedAt":"2019-04-13T19:21:09","Actor":"JamesNK","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1144","RelatedDescription":"Opened issue \"Add HttpResponseMessage.TrailingHeaders to netstandard\" (#1144) at dotnet/standard","RelatedBody":"https://github.com/dotnet/corefx/blob/4fa6319fb590b046ba4c962088b960a31749f245/src/System.Net.Http/src/System/Net/Http/HttpResponseMessage.cs#L119-L130\r\n\r\nDiscussion: https://github.com/dotnet/corefx/issues/34912#issuecomment-482777355"},{"Id":"9437038190","Type":"PullRequestEvent","CreatedAt":"2019-04-13T12:08:32","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1143","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1143) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19212.2\r\n\r\n"},{"Id":"9437028715","Type":"PullRequestEvent","CreatedAt":"2019-04-13T12:03:29","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1143","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1143) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19212.2\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9450136991","Type":"PullRequestEvent","CreatedAt":"2019-04-16T05:17:19","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36729","RelatedDescription":"Merged pull request \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#36729) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190313.3\r\n- **Date Produced**: 3/13/2019 8:10 PM\r\n- **Commit**: 4f9d0ecf2b8151859fd2bd0734af32ea59258a3d\r\n- **Branch**: master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190313.3\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190313.3\r\n- **Date Produced**: 3/13/2019 8:10 PM\r\n- **Commit**: 4f9d0ecf2b8151859fd2bd0734af32ea59258a3d\r\n- **Branch**: master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190313.3\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190313.3\r\n- **Date Produced**: 3/13/2019 8:10 PM\r\n- **Commit**: 4f9d0ecf2b8151859fd2bd0734af32ea59258a3d\r\n- **Branch**: master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190313.3\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190313.3\r\n- **Date Produced**: 3/13/2019 8:10 PM\r\n- **Commit**: 4f9d0ecf2b8151859fd2bd0734af32ea59258a3d\r\n- **Branch**: master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190313.3\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190313.3\r\n- **Date Produced**: 3/13/2019 8:10 PM\r\n- **Commit**: 4f9d0ecf2b8151859fd2bd0734af32ea59258a3d\r\n- **Branch**: master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190313.3\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190313.3\r\n- **Date Produced**: 3/13/2019 8:10 PM\r\n- **Commit**: 4f9d0ecf2b8151859fd2bd0734af32ea59258a3d\r\n- **Branch**: master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190313.3\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190313.3\r\n- **Date Produced**: 3/13/2019 8:10 PM\r\n- **Commit**: 4f9d0ecf2b8151859fd2bd0734af32ea59258a3d\r\n- **Branch**: master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190313.3\r\n\r\n"},{"Id":"9449979577","Type":"IssuesEvent","CreatedAt":"2019-04-16T04:28:17","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36910","RelatedDescription":"Closed issue \"Test failure: System.Security.Tests.SecureStringTests/ThreadSafe_Stress(executionTimeSeconds: 5)\" (#36910) at dotnet/corefx","RelatedBody":"Opened on behalf of @wfurt\n\nThe test `System.Security.Tests.SecureStringTests/ThreadSafe_Stress(executionTimeSeconds: 5)` has failed.\n\nFailure Message:\n```\nSystem.AggregateException : One or more errors occurred. (The output byte buffer is too small to contain the encoded data, encoding 'Unicode (UTF-8)' fallback 'System.Text.EncoderReplacementFallback'.\nParameter name: bytes) (The output byte buffer is too small to contain the encoded data, encoding 'Unicode (UTF-8)' fallback 'System.Text.EncoderReplacementFallback'.\nParameter name: bytes)\n---- System.ArgumentException : The output byte buffer is too small to contain the encoded data, encoding 'Unicode (UTF-8)' fallback 'System.Text.EncoderReplacementFallback'.\nParameter name: bytes\n---- System.ArgumentException : The output byte buffer is too small to contain the encoded data, encoding 'Unicode (UTF-8)' fallback 'System.Text.EncoderReplacementFallback'.\nParameter name: bytes\n```\n\nStack Trace:\n```\n   at System.Threading.Tasks.Task.WaitAllCore(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 4815\n   at System.Security.Tests.SecureStringTests.ThreadSafe_Stress(Int32 executionTimeSeconds)\n----- Inner Stack Trace #1 (System.ArgumentException) -----\n   at System.Text.Encoding.ThrowBytesOverflow() in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.cs:line 1188\n   at System.Text.Encoding.ThrowBytesOverflow(EncoderNLS encoder, Boolean nothingEncoded) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.cs:line 1204\n   at System.Text.Encoding.GetBytesWithFallback(ReadOnlySpan`1 chars, Int32 originalCharsLength, Span`1 bytes, Int32 originalBytesLength, EncoderNLS encoder) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.Internal.cs:line 689\n   at System.Text.Encoding.GetBytesWithFallback(Char* pOriginalChars, Int32 originalCharCount, Byte* pOriginalBytes, Int32 originalByteCount, Int32 charsConsumedSoFar, Int32 bytesWrittenSoFar) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.Internal.cs:line 499\n   at System.Text.UTF8Encoding.GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/UTF8Encoding.cs:line 368\n   at System.Security.SecureString.MarshalToStringCore(Boolean globalAlloc, Boolean unicode) in /__w/1/s/src/System.Private.CoreLib/shared/System/Security/SecureString.Unix.cs:line 206\n   at System.Security.SecureString.MarshalToString(Boolean globalAlloc, Boolean unicode) in /__w/1/s/src/System.Private.CoreLib/shared/System/Security/SecureString.cs:line 182\n   at System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(SecureString s) in /__w/1/s/src/System.Private.CoreLib/shared/System/Runtime/InteropServices/Marshal.cs:line 637\n   at System.Security.Tests.SecureStringTests.<>c__DisplayClass22_1.<ThreadSafe_Stress>b__1() in /__w/1/s/src/System.Security.SecureString/tests/SecureStringTests.cs:line 490\n   at System.Threading.Tasks.Task.InnerInvoke() in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2463\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2442\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 289\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 314\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2403\n----- Inner Stack Trace #2 (System.ArgumentException) -----\n   at System.Text.Encoding.ThrowBytesOverflow() in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.cs:line 1188\n   at System.Text.Encoding.ThrowBytesOverflow(EncoderNLS encoder, Boolean nothingEncoded) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.cs:line 1204\n   at System.Text.Encoding.GetBytesWithFallback(ReadOnlySpan`1 chars, Int32 originalCharsLength, Span`1 bytes, Int32 originalBytesLength, EncoderNLS encoder) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.Internal.cs:line 588\n   at System.Text.Encoding.GetBytesWithFallback(Char* pOriginalChars, Int32 originalCharCount, Byte* pOriginalBytes, Int32 originalByteCount, Int32 charsConsumedSoFar, Int32 bytesWrittenSoFar) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.Internal.cs:line 499\n   at System.Text.UTF8Encoding.GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/UTF8Encoding.cs:line 363\n   at System.Security.SecureString.MarshalToStringCore(Boolean globalAlloc, Boolean unicode) in /__w/1/s/src/System.Private.CoreLib/shared/System/Security/SecureString.Unix.cs:line 230\n   at System.Security.SecureString.MarshalToString(Boolean globalAlloc, Boolean unicode) in /__w/1/s/src/System.Private.CoreLib/shared/System/Security/SecureString.cs:line 184\n   at System.Security.Tests.SecureStringTests.<>c__DisplayClass22_1.<ThreadSafe_Stress>b__1() in /__w/1/s/src/System.Security.SecureString/tests/SecureStringTests.cs:line 496\n   at System.Threading.Tasks.Task.InnerInvoke() in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2463\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2442\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 289\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 314\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2403\n```\n\nBuild : 3.0 - 20190415.9 (Core Tests)\nFailing configurations:\n- Fedora.29.Amd64-x64\n  - Release\n- Fedora.28.Amd64-x64\n  - Release\n- SLES.12.Amd64-x64\n  - Release\n- OpenSuse.42.Amd64-x64\n  - Release\n- Ubuntu.1810.Amd64-x64\n  - Release\n- Ubuntu.1604.Amd64-x64\n  - Release\n- Debian.9.Amd64-x64\n  - Release\n- Debian.8.Amd64-x64\n  - Release\n- Alpine.38.Amd64-x64\n  - Release\n- OSX.1013.Amd64-x64\n  - Release\n"},{"Id":"9449880007","Type":"PullRequestEvent","CreatedAt":"2019-04-16T03:56:57","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36909","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#36909) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks"},{"Id":"9449873487","Type":"IssuesEvent","CreatedAt":"2019-04-16T03:54:54","Actor":"VBAndCs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/36835","RelatedDescription":"Reopened issue \"String.Replace overload to do multiple replacements with an array of tuples\" (#36835) at dotnet/corefx","RelatedBody":"I wrote this code:\r\n```VB.NET\r\nReturn xml.ToString(SaveOptions.DisableFormatting).\r\n            Replace(\"<zml>\", \"\").Replace(\"</zml>\", \"\").\r\n            Replace(\"__ltn__\", \"<\").Replace(\"__gtn__\", \">\").\r\n            Replace(\"__amp__\", \"&\")\r\n```\r\n\r\nUsing successive replacements creates many visions of the string, which is less efficient, so I wrote it using tuples like this:\r\n```VB.NET\r\nReturn xml.ToString(SaveOptions.DisableFormatting).\r\n            Replace(\r\n                     (\"<zml>\", \"\"), (\"</zml>\", \"\"),\r\n                     (\"__ltn__\", \"<\"), (\"__gtn__\", \">\"),\r\n                     (\"__amp__\", \"&\")\r\n                   )\r\n```\r\n\r\nWhich is more compact and more efficient. It can be implemented with this extension method:\r\n```VB.NET\r\n<Extension>\r\nFunction Replace(s As String, ParamArray repPairs() As (repStr As String, repWithStr As String))\r\n        Dim sb As New Text.StringBuilder(s)\r\n        For Each x In repPairs\r\n            sb.Replace(x.repStr, x.repWithStr)\r\n        Next\r\n        Return sb.ToString()\r\nEnd Function\r\n```\r\n\r\nI suggest to add this Replace overload to the string class. \r\n"},{"Id":"9449851663","Type":"PullRequestEvent","CreatedAt":"2019-04-16T03:48:23","Actor":"bbartels","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/36912","RelatedDescription":"Opened pull request \"Removed heap allocations from OdbcDataReader\" (#36912) at dotnet/corefx","RelatedBody":"Removed allocations from when data is being parsed into managed structures within the ODBCDataReader.\r\n\r\n|       Method  | MeanCurr  | MeanNew   | AllocCurr   |   AllocNew  |  AllocDiff  |\r\n|-------------- |:---------:|:---------:|:-----------:|:-----------:|:-----------:|\r\n| GetDateTime() | 48.18 ms  | 48.39 ms  |  862.66 KB  |  470.59 KB  |    - 83.3%  |\r\n| GetString()   | 63.45 ms  | 63.51 ms  |  1333.2 KB  |  941.13 KB  |    - 41.7%  |\r\n| GetDecimal()  | 80.82 ms  | 80.38 ms  | 2117.38 KB  | 1725.31 KB  |    - 22.5%  |\r\n\r\n<p align=\"center\">\r\n  [Benchmarking results of iterating through 10000 rows in a MariaDB database]\r\n</p>\r\n\r\nNotes:\r\n1. This does use an unsafe an code block to copy from the IntPtr into the Span, as there is no other way of doing this.\r\nRelated issue: https://github.com/dotnet/corefx/issues/18946\r\n\r\n2. There are two unused internal methods in DbBuffer.cs, I marked them with a comment, in case they should be removed.\r\n\r\n3. Furthermore, the new Read/Write-Numeric implementation is not quite optimal yet, as there is no way for one to create/read a decimal from/into a Span\\<byte\\>.\r\nRelated issue: https://github.com/dotnet/corefx/issues/35877"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9450090046","Type":"IssuesEvent","CreatedAt":"2019-04-16T05:03:02","Actor":"vatsalyaagrawal","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35002","RelatedDescription":"Opened issue \"\"Replace method with property\" replaces non-invoked method with property\" (#35002) at dotnet/roslyn","RelatedBody":"16.0.1\r\n\r\nOriginal code:\r\n\r\n`delegate int Mdelegate();\r\n\r\n    class C\r\n    {\r\n        int GetP() => 0;\r\n\r\n        void M()\r\n        {\r\n            Mdelegate del = new Mdelegate(GetP);\r\n        }\r\n    }`\r\n\r\nUse Replace 'GetP' with property refactoring.\r\n\r\nRefactored Code:\r\n\r\n`delegate int Mdelegate();\r\n\r\n    class C\r\n    {\r\n        int P => 0;\r\n\r\n        void M()\r\n        {\r\n            Mdelegate del = new Mdelegate(P);\r\n        }\r\n    }`\r\n\r\nNote that refactored code will not compile as a property can not be used in place of a method in the delegate."},{"Id":"9449860575","Type":"PullRequestEvent","CreatedAt":"2019-04-16T03:51:01","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34926","RelatedDescription":"Merged pull request \"Correctly report mismatches in foreach types\" (#34926) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/29971. Also updates the location of the error reporting to be the variable being iterated over, rather than the type of that variable. @dotnet/roslyn-compiler for review."},{"Id":"9449860525","Type":"IssuesEvent","CreatedAt":"2019-04-16T03:51:01","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29971","RelatedDescription":"Closed issue \"Report WRN_NullabilityMismatchInAssignment for a loop variable in ```foreach``` based on the type of the Current property and conversions involved\" (#29971) at dotnet/roslyn","RelatedBody":"```\r\n        [Fact]\r\n        public void ForEach_10()\r\n        {\r\n            var source =\r\n@\"#pragma warning disable 0649\r\n#pragma warning disable 8618\r\nclass A<T>\r\n{\r\n    internal T F;\r\n}\r\nclass B : A<object> { }\r\nclass C\r\n{\r\n    static void F(A<object?>[] c)\r\n    {\r\n        foreach (var a1 in c)\r\n            a1.F.ToString();\r\n        foreach (A<object?> a2 in c)\r\n            a2.F.ToString();\r\n        foreach (A<object> a3 in c)\r\n            a3.F.ToString();\r\n        foreach (B b1 in c)\r\n            b1.ToString();\r\n    }\r\n}\";\r\n            // PROTOTYPE(NullableReferenceTypes): Should report WRN_NullabilityMismatchInAssignment\r\n            // for `A<object> a3 in c` and `B b1 in c`.\r\n            var comp = CreateCompilation(new[] { source, NonNullTypesTrue, NonNullTypesAttributesDefinition });\r\n            comp.VerifyDiagnostics(\r\n                // (13,13): warning CS8602: Possible dereference of a null reference.\r\n                //             a1.F.ToString();\r\n                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, \"a1.F\").WithLocation(13, 13),\r\n                // (15,13): warning CS8602: Possible dereference of a null reference.\r\n                //             a2.F.ToString();\r\n                Diagnostic(ErrorCode.WRN_NullReferenceReceiver, \"a2.F\").WithLocation(15, 13));\r\n        }\r\n```"},{"Id":"9449551290","Type":"IssuesEvent","CreatedAt":"2019-04-16T02:25:13","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/34976","RelatedDescription":"Closed issue \"Nullable warning for cast through object?\" (#34976) at dotnet/roslyn","RelatedBody":"Version used:\r\nToday's master\r\n\r\nRepro:\r\n```C#\r\n#nullable enable\r\nusing System;\r\nclass Program\r\n{\r\n    public static void Main()\r\n    {\r\n        bool b1 = true;\r\n        bool b2 = (bool)(object?)b1; // CS8605: Unboxing a possibly null value\r\n        Console.WriteLine(b2);\r\n    }\r\n}\r\n```\r\n\r\ncc: @dotnet/nullablefc"},{"Id":"9449480400","Type":"PullRequestEvent","CreatedAt":"2019-04-16T02:06:07","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35001","RelatedDescription":"Opened pull request \"Error for `typeof(T?)` when `T` is a reference type\" (#35001) at dotnet/roslyn","RelatedBody":"Fixes #29894"},{"Id":"9449384420","Type":"IssuesEvent","CreatedAt":"2019-04-16T01:39:50","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35000","RelatedDescription":"Opened issue \"Collapse section hotkey collapses entire region if method signature has newlines\" (#35000) at dotnet/roslyn","RelatedBody":"VSF_TYPE_MARKDOWNUsing the &quot;Ctrl+M, M&quot; Hotkey, if the caret is on method Foo it will correctly collapse the selection. But with the caret on method Bar it will collapse the entire region.\n```\n# region MyRegion\npublic void Foo(int param1, int param2) \n{\n    string foo = &quot;foo&quot;;\n}\n\npublic void Bar(\n    int param1,\n    int param2)\n{\n    string bar = &quot;bar&quot;;\n} \n\n#endregion\n```\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/532398/collapse-section-hotkey-collapses-entire-region-if.html\nVSTS ticketId: 847516_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/15/2019, 02:44 AM (15 hours ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9449863624","Type":"PullRequestEvent","CreatedAt":"2019-04-16T03:51:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7312","RelatedDescription":"Opened pull request \"Add AdditionalBuildArgs option for the official build pipeline\" (#7312) at dotnet/corert","RelatedBody":""},{"Id":"9449812451","Type":"PullRequestEvent","CreatedAt":"2019-04-16T03:36:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7311","RelatedDescription":"Opened pull request \"Add musl targets in packages\" (#7311) at dotnet/corert","RelatedBody":"Contribute to #4552"},{"Id":"9449513511","Type":"PullRequestEvent","CreatedAt":"2019-04-16T02:15:06","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7310","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7310) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9449505360","Type":"PullRequestEvent","CreatedAt":"2019-04-16T02:12:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7309","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7309) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas"},{"Id":"9448948081","Type":"PullRequestEvent","CreatedAt":"2019-04-15T23:34:23","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7309","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7309) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9448687374","Type":"PullRequestEvent","CreatedAt":"2019-04-15T22:30:09","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7308","RelatedDescription":"Opened pull request \"Fixes for some of the remaining Pri#1 CPAOT compilation buckets\" (#7308) at dotnet/corert","RelatedBody":"1) Handling for ByRef in the signature emitter;\r\n\r\n2) Expanding instantiated type signatures;\r\n\r\n3) Not trying to emit instantiations when asked to emit the\r\nuninstantiated generic methods in signatures.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9447888559","Type":"IssuesEvent","CreatedAt":"2019-04-15T20:08:37","Actor":"josephmoresena","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7307","RelatedDescription":"Opened issue \"Compile Gui.cs example win-x64\" (#7307) at dotnet/corert","RelatedBody":"I am trying to compile an executable that includes https://github.com/migueldeicaza/gui.cs\r\nWhen I compile in Linux all is sucessfully, but when I try to compile in Windows I get the following error:\r\n`\r\nTerminal.obj : error LNK2001: unresolved external symbol dlopen [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nTerminal.obj : error LNK2001: unresolved external symbol dlsym [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nbin\\Debug\\netcoreapp2.2\\win-x64\\native\\Terminal.exe : fatal error LNK1120: 2 unresolved externals [C:\\GitHub\\gui.cs\\Example\\Example.csproj]`\r\nThe problem is related to a `[DllImport (\"__Internal\")]` for compatibility with Mono. \r\nI'm using IlCompiler version 1.0.0-alpha-27615-01\r\n"},{"Id":"9445758636","Type":"IssuesEvent","CreatedAt":"2019-04-15T14:54:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7285","RelatedDescription":"Closed issue \"Techniques for Reducing Size of .NET Native Binaries\" (#7285) at dotnet/corert","RelatedBody":"I'm working on a UWP app being built with .NET native. Reducing the app size is very important. Are there any techniques, guidance or documentation available to help reduce the app size? Are there ways we can help the .NET native tree shaking algorithm be more effective? \r\n\r\nSome of the simple techniques I can think of are pretty basic:\r\n\r\n1. Code reuse.\r\n2. Avoid `await` as this generates a lot of state machine code e.g. Adding six awaits increased the size of my app by 20KB.\r\n3. Compress static assets like images etc."},{"Id":"9445682042","Type":"PullRequestEvent","CreatedAt":"2019-04-15T14:45:53","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7306","RelatedDescription":"Opened pull request \"Smaller SuperIlc fixes for bugs I hit in local testing\" (#7306) at dotnet/corert","RelatedBody":"1) One of the interesting features of the new command-line interface\r\nis the fact that it tries to match the option names to identifiers\r\nof fields and method parameters. Due to this the option --crossgen\r\ndidn't get bound because the counterpart field was called UseCrossgen.\r\nI have renamed the field to just Crossgen.\r\n\r\n2) Don't schedule executions for apps that failed to compile as\r\nthe executions are certain to fail due to the absence of the compiled\r\nartifacts.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9444724603","Type":"IssuesEvent","CreatedAt":"2019-04-15T12:48:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7300","RelatedDescription":"Closed issue \"What is the correct system codepage for build.cmd script\" (#7300) at dotnet/corert","RelatedBody":"![image](https://user-images.githubusercontent.com/8407331/56100592-a4028c00-5f55-11e9-9abd-3af4f5a5856e.png)\r\n"},{"Id":"9444661672","Type":"PullRequestEvent","CreatedAt":"2019-04-15T12:39:46","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7305","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#7305) at dotnet/corert","RelatedBody":""},{"Id":"9444660202","Type":"PullRequestEvent","CreatedAt":"2019-04-15T12:39:34","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7305","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#7305) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9449814827","Type":"PullRequestEvent","CreatedAt":"2019-04-16T03:37:41","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":"Merged pull request \"Use PackageDownload\" (#3111) at dotnet/sdk","RelatedBody":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS)."},{"Id":"9448634681","Type":"IssuesEvent","CreatedAt":"2019-04-15T22:18:23","Actor":"rainersigwald","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2880","RelatedDescription":"Reopened issue \"\"salt\" MSBuild handshake in test / dogfood environment\" (#2880) at dotnet/sdk","RelatedBody":"Right now for our tests (and in the dogfood script) we override the MSBuildSDKsPath to point MSBuild to the SDK under test.  However, this doesn't seem to prevent sharing MSBuild nodes that didn't have this set, which can end up causing assembly loading or other issues.\r\n\r\nIdeally in our test environment we would add a \"salt\" to the node connection handshake, so that MSBuild would only be able to connect to nodes that come from the same test environment.\r\n\r\nThis would probably require a change in MSBuild to allow us to provide such a \"salt\".\r\n\r\n@rainersigwald, thoughts?"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"open","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Open PR \"add links to ML.NET docs\" (#141)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"433511814","IsPullRequest":true,"CreatedAt":"2019-04-16T05:14:49","Actor":"omajid","Number":"24013","RawContent":null,"Title":"Use NewArrayHolder for array types in src/debug","State":"closed","Body":"Using a `NewHolder` with array types means that when the holder is ready to release the  memory, it ends up invoking `delete` (instead of `delete[]`) on that array. This is an undefined behaviour.\r\n\r\nUse NewArrayHolder instead to fix this.","Url":"https://github.com/dotnet/coreclr/pull/24013","RelatedDescription":"Closed or merged PR \"Use NewArrayHolder for array types in src/debug\" (#24013)"},{"Id":"433521349","IsPullRequest":true,"CreatedAt":"2019-04-16T05:12:40","Actor":"omajid","Number":"24017","RawContent":null,"Title":"Use NewArrayHolder for array types","State":"closed","Body":"This touches all the code outside of src/debug/.\r\n\r\nUsing a `NewHolder` with array types means that when the holder is ready to release the memory, it ends up invoking `delete` (instead of `delete[]`) on that array. This is an undefined behaviour.\r\n\r\nUse `NewArrayHolder` instead to fix this.","Url":"https://github.com/dotnet/coreclr/pull/24017","RelatedDescription":"Closed or merged PR \"Use NewArrayHolder for array types\" (#24017)"},{"Id":"433544911","IsPullRequest":false,"CreatedAt":"2019-04-16T04:09:13","Actor":"VincentBu","Number":"24024","RawContent":null,"Title":"[arm64] Test failed: System.Tests.RangeTests.GetOffsetAndLengthTest","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstress2_tst/29/\r\n\r\n**Failed tests:**\r\nSystem.Tests.RangeTests.GetOffsetAndLengthTest\r\n\r\n**Log:**\r\n```\r\nSystem.Tests.RangeTests.GetOffsetAndLengthTest [FAIL]\r\n      System.TypeLoadException : Could not load type 'OffsetAndLength' from assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n      Stack Trace:\r\n           at System.Tests.RangeTests.GetOffsetAndLengthTest()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24024","RelatedDescription":"Closed issue \"[arm64] Test failed: System.Tests.RangeTests.GetOffsetAndLengthTest\" (#24024)"},{"Id":"433510129","IsPullRequest":true,"CreatedAt":"2019-04-16T04:07:34","Actor":"echesakovMSFT","Number":"24011","RawContent":null,"Title":"Fix issue #23943","State":"closed","Body":"The issue https://github.com/dotnet/coreclr/issues/23943 is due to literal `0xFFFFFFFFFFFFF000LL` being **long long unsigned int** and using as if it were **long long int**.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/77a5f9cef77c34db739bb3c13bfd091c693a12d4/src/jit/emitarm64.cpp#L8425-L8427\r\n\r\nAll the following expressions\r\n* `0xFFFFFFFFFFFFF000LL`\r\n* `((ssize_t)dstAddr & 0xFFFFFFFFFFFFF000LL)`\r\n* `((ssize_t)srcAddr & 0xFFFFFFFFFFFFF000LL)` \r\n* `(((ssize_t)dstAddr & 0xFFFFFFFFFFFFF000LL) - ((ssize_t)srcAddr & 0xFFFFFFFFFFFFF000LL))` \r\n\r\nhave **long long unsigned int** type (see https://godbolt.org/z/Z443bf).\r\n\r\nConsequently, C++ compiler uses **lsr** instruction instead of **asr** instruction for shifting 12 bits to the right.\r\n\r\nThis can be seen from the generated assembly for the expression computing `relPageAddr`\r\n\r\n```asm\r\n  244978:       9274ce88        and     x8, x20, #0xfffffffffffff000\r\n  24497c:       9274cec9        and     x9, x22, #0xfffffffffffff000\r\n  244980:       cb090108        sub     x8, x8, x9\r\n  244984:       d34cfd04        lsr     x4, x8, #12\r\n```\r\n\r\nWith this changes (introducing and using `computeRelPageAddr` function) the corresponding expression for `relPageAddr` will be\r\n```asm\r\n  244978:       d34cfe88        lsr     x8, x20, #12\r\n  24497c:       cb563104        sub     x4, x8, x22, lsr #12\r\n```\r\n\r\n\r\nFixes issue #23943 ","Url":"https://github.com/dotnet/coreclr/pull/24011","RelatedDescription":"Closed or merged PR \"Fix issue #23943\" (#24011)"},{"Id":"433520984","IsPullRequest":true,"CreatedAt":"2019-04-16T02:36:45","Actor":"am11","Number":"24016","RawContent":null,"Title":"Update clr-configuration-knobs and cleanups","State":"closed","Body":"* Remove obsolete comment from `tests/src/GC/Scenarios/Samples/gc.cs` (based on https://github.com/dotnet/coreclr/pull/23595)\r\n* In the C# script `clr-configuration-knobs.csx`, update the usage to use `dotnet-script` tool as `dotnet-csi` and other repl commands were removed. The new bring up might happen by the Roslyn team: https://github.com/dotnet/roslyn/issues/17666. Meanwhile, `dotnet-script` can be installed using: `dotnet tool install --global dotnet-script`.\r\n* Remove extra spaces from end of markdown table rows.\r\n\r\n/cc @jkotas","Url":"https://github.com/dotnet/coreclr/pull/24016","RelatedDescription":"Closed or merged PR \"Update clr-configuration-knobs and cleanups\" (#24016)"},{"Id":"433555711","IsPullRequest":true,"CreatedAt":"2019-04-16T02:30:48","Actor":"omajid","Number":"24027","RawContent":null,"Title":"Use delete [] on array types","State":"open","Body":"Calling delete on types allocated with new[] leads to undefined behaviour.","Url":"https://github.com/dotnet/coreclr/pull/24027","RelatedDescription":"Open PR \"Use delete [] on array types\" (#24027)"},{"Id":"433511040","IsPullRequest":true,"CreatedAt":"2019-04-16T02:21:14","Actor":"jkoritzinsky","Number":"24012","RawContent":null,"Title":"[release/3.0] Opt COM methods out of the new Windows instance-method handling","State":"closed","Body":"Some of our users (such as WPF), use a struct to wrap their HRESULT return types on COM members when they use PreserveSig. When we updated CoreCLR to correctly handle the Windows calling convention, we broke this behavior. Additonally, since #23816 didn't make it into release/3.0, this PR also fixes bugs related to enum returns on COM methods, which WPF also found.\r\n\r\nRemove calls to tests that were verifying that COM follows the new behavior. (The tests are removed in the PR to master)\r\n\r\nThe release/3.0 side of #23974 ","Url":"https://github.com/dotnet/coreclr/pull/24012","RelatedDescription":"Closed or merged PR \"[release/3.0] Opt COM methods out of the new Windows instance-method handling\" (#24012)"},{"Id":"433547078","IsPullRequest":false,"CreatedAt":"2019-04-16T01:48:32","Actor":"AriNuer","Number":"24026","RawContent":null,"Title":"[arm64/windows]Test failure:System.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs3_tst/28/\r\n\r\n**Failed test:**\r\nSystem.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion\r\n\r\n**Failed log:**\r\n```\r\nystem.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion [FAIL]\r\n      Assert.Equal() Failure\r\n                   ? (pos 3)\r\n      Expected: ???\r\n      Actual:   ????\r\n                   ? (pos 3)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---94cb1dee\\_\\fx\\src\\System.Reflection.Metadata\\tests\\Metadata\\Ecma335\\MetadataRootBuilderTests.cs(384,0): at System.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion()\r\n    System.Reflection.Metadata.Ecma335.Tests.MetadataBuilderTests.GetOrAddDocumentName2 [FAIL]\r\n      Assert.Equal() Failure\r\n                  ? (pos 2)\r\n      Expected: ??\r\n      Actual:   ???\r\n                  ? (pos 2)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---94cb1dee\\_\\fx\\src\\System.Reflection.Metadata\\tests\\Metadata\\Ecma335\\MetadataBuilderTests.cs(486,0): at System.Reflection.Metadata.Ecma335.Tests.MetadataBuilderTests.GetOrAddDocumentName2()\r\n  Finished:    System.Reflection.Metadata.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Reflection.Metadata.Tests  Total: 556, Errors: 0, Failed: 2, Skipped: 0, Time: 9.952s\r\n----- end 16:28:28.60 ----- exit code 1 ----------------------------------------------------------\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24026","RelatedDescription":"Open issue \"[arm64/windows]Test failure:System.Reflection.Metadata.Ecma335.Tests.MetadataRootBuilderTests.MetadataVersion\" (#24026)"},{"Id":"433545868","IsPullRequest":false,"CreatedAt":"2019-04-16T01:42:32","Actor":"VincentBu","Number":"24025","RawContent":null,"Title":"[arm64] System.Security.Cryptography.Xml.Tests.Reference_ArbitraryElements.Transforms_ExtraData_XmlProcessingInstruction","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs0x10_tst/28/\r\n\r\n**Failed tests:**\r\nSystem.Security.Cryptography.Xml.Tests.Reference_ArbitraryElements.Transforms_ExtraData_XmlProcessingInstruction\r\n\r\n**Log:**\r\n```\r\nSystem.Security.Cryptography.Xml.Tests.Reference_ArbitraryElements.Transforms_ExtraData_XmlProcessingInstruction [FAIL]\r\n      System.NullReferenceException : Object reference not set to an instance of an object.\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(1116,0): at System.Security.Cryptography.Xml.SignedXml.IsKeyTheCorrectAlgorithm(AsymmetricAlgorithm key, Type expectedType)\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(1020,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignedInfo(AsymmetricAlgorithm key)\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(290,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignature(AsymmetricAlgorithm key)\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\src\\System\\Security\\Cryptography\\Xml\\SignedXml.cs(272,0): at System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(AsymmetricAlgorithm& signingKey)\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\tests\\SignedXml_Helpers.cs(28,0): at System.Security.Cryptography.Xml.Tests.Helpers.VerifyCryptoExceptionOnLoad(String xml, Boolean loadXmlThrows)\r\n        D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\System.Security.Cryptography.Xml\\tests\\Reference_ArbitraryElements.cs(68,0): at System.Security.Cryptography.Xml.Tests.Reference_ArbitraryElements.Transforms_ExtraData_XmlProcessingInstruction()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24025","RelatedDescription":"Open issue \"[arm64] System.Security.Cryptography.Xml.Tests.Reference_ArbitraryElements.Transforms_ExtraData_XmlProcessingInstruction\" (#24025)"},{"Id":"433515905","IsPullRequest":true,"CreatedAt":"2019-04-16T01:28:40","Actor":"GrabYourPitchforks","Number":"24015","RawContent":null,"Title":"Fix incorrect bit match pattern in UTF-16 validation","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/36870.\r\n\r\nIn this code, `mask` has the bit pattern `aa_bb_cc_...`, where each pair of bits is \"11\" if the corresponding char in the input vector is a UTF-16 surrogate code point (`U+D800..U+DFFF`), \"00\" otherwise.\r\n\r\n`mask2` has the bit pattern `xx_yy_zz_...`, where each pair of bits is \"00\", \"01\", or (undefined) as specified in the comment starting on line 170. ANDing these two masks together should result in \"01\" if the corresponding char was a low surrogate char, \"00\" otherwise. This is stored in the local `lowSurrogatesMask`.\r\n\r\nThe local `highSurrogatesMask` is intended to be similar, but where \"01\" represents that the corresponding char was a high surrogate char, \"00\" otherwise. This value was being incorrectly generated because the operands to the XOR and the AND operation were swapped. The actual behavior of this code (which has been made clearer in comments and which has been fixed of this PR) is that it should first flip every odd bit in `mask2` (so that \"00\" means low surrogate, \"01\" means high surrogate, and garbage stays garbage), then when it's ANDed with `mask` it'll be properly normalized to \"01\" or \"00\".","Url":"https://github.com/dotnet/coreclr/pull/24015","RelatedDescription":"Closed or merged PR \"Fix incorrect bit match pattern in UTF-16 validation\" (#24015)"},{"Id":"433542242","IsPullRequest":false,"CreatedAt":"2019-04-16T01:23:26","Actor":"AriNuer","Number":"24023","RawContent":null,"Title":"[arm64/windows] Test \"Loader_ContextualReflection._ContextualReflection_ContextualReflection\" failed with TestLibrary.AssertTestException: Assert.IsNotNull","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_r2r_gcstress15_tst/47/\r\n\r\n**Failed test:**\r\nLoader_ContextualReflection._ContextualReflection_ContextualReflection_.Loader\\\\ContextualReflection\\\\ContextualReflection\\\\ContextualReflection.cmd\r\n\r\n**Failed log:**\r\n```\r\nLoader\\ContextualReflection\\ContextualReflection\\ContextualReflection.cmd [FAIL]\r\n        \r\n  Unhandled Exception: TestLibrary.AssertTestException: Assert.IsNotNull: \r\n           at TestLibrary.Assert.HandleFail(String assertionName, String message) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Common\\CoreCLRTestLibrary\\Assertion.cs:line 725\r\n           at ContextualReflectionTest.Program.TestTypeGetType(Boolean isolated, Func`2 typeGetType) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Loader\\ContextualReflection\\ContextualReflection.cs:line 410\r\n           at ContextualReflectionTest.Program.TestTypeGetType(Boolean isolated) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Loader\\ContextualReflection\\ContextualReflection.cs:line 359\r\n           at ContextualReflectionTest.Program.RunTests(Boolean isolated) in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Loader\\ContextualReflection\\ContextualReflection.cs:line 735\r\n           at ContextualReflectionTest.Program.RunTests() in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Loader\\ContextualReflection\\ContextualReflection.cs:line 728\r\n           at ContextualReflectionTest.Program.Main() in D:\\j\\workspace\\arm64_cross_c---0aaef436\\tests\\src\\Loader\\ContextualReflection\\ContextualReflection.cs:line 32\r\n  \r\n  \r\n  Return code:      1\r\n  Raw output file:      C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Reports\\Loader.ContextualReflection\\ContextualReflection\\ContextualReflection.output.txt\r\n  Raw output:\r\n  BEGIN EXECUTION\r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection>set COMPLUS_NOGUIONASSERT=1 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection>set COMPLUS_CONTINUEONASSERT=0 \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection>set COMPLUS_GCSTRESS=0xF \r\n        \r\n        C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection>set COMPLUS_TIEREDCOMPILATION=0 \r\n                1 file(s) copied.\r\n        \" C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\crossgen.exe\"  /Platform_Assemblies_Paths C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root;C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection\\IL;C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection /in ContextualReflection.org /out ContextualReflection.exe\r\n        Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n        Copyright (c) Microsoft Corporation.  All rights reserved.\r\n        \r\n        Native image ContextualReflection.exe generated successfully.\r\n         \"C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\\corerun.exe\" ContextualReflection.exe \r\n        Expected: 100\r\n        Actual: -532462766\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        \r\n  To run the test:\r\n  > set CORE_ROOT=C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\r\n  > C:\\j\\workspace\\arm64_cross_c---c8d6d889\\bin\\tests\\Windows_NT.arm64.Checked\\Loader\\ContextualReflection\\ContextualReflection\\ContextualReflection.cmd\r\n  \r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\arm64_cross_c---0aaef436\\bin\\tests\\Windows_NT.arm64.Checked\\TestWrappers\\Loader.ContextualReflection\\Loader.ContextualReflection.XUnitWrapper.cs(112,0): at Loader_ContextualReflection._ContextualReflection_ContextualReflection_._ContextualReflection_ContextualReflection_cmd()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24023","RelatedDescription":"Open issue \"[arm64/windows] Test \"Loader_ContextualReflection._ContextualReflection_ContextualReflection\" failed with TestLibrary.AssertTestException: Assert.IsNotNull\" (#24023)"},{"Id":"433540441","IsPullRequest":false,"CreatedAt":"2019-04-16T01:13:42","Actor":"VincentBu","Number":"24022","RawContent":null,"Title":"[x86] error NU3004 in x86_checked_windows_nt_jitnox86hwintrinsic","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_jitnox86hwintrinsic/423/\r\n\r\n**Log:**\r\n```\r\nD:\\j\\workspace\\x86_checked_w---9ba7550c\\packages\\microsoft.dotnet.buildtools\\3.0.0-preview4-03913-01\\lib\\tool-runtime\\project.csproj : error NU3004: Package 'Newtonsoft.Json 10.0.3' from source 'https://api.nuget.org/v3/index.json': This repository indicated that all its packages are repository signed; however, this package is unsigned.\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24022","RelatedDescription":"Open issue \"[x86] error NU3004 in x86_checked_windows_nt_jitnox86hwintrinsic\" (#24022)"},{"Id":"433421261","IsPullRequest":true,"CreatedAt":"2019-04-16T01:10:59","Actor":"jkoritzinsky","Number":"23998","RawContent":null,"Title":"Use CMake's built-in toolchain detection","State":"closed","Body":"Try removing manual resolution of toolchain for non-cross builds and let CMake resolve the toolchain itself.","Url":"https://github.com/dotnet/coreclr/pull/23998","RelatedDescription":"Closed or merged PR \"Use CMake's built-in toolchain detection\" (#23998)"},{"Id":"433539898","IsPullRequest":false,"CreatedAt":"2019-04-16T01:10:55","Actor":"VincentBu","Number":"24021","RawContent":null,"Title":"[x86] Test failed: JIT\\Methodical\\largeframes\\skip3\\skippage3\\skippage3.cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_gcstress0xc_zapdisable_jitstress2/126/\r\n\r\n**Failed tests:**\r\nJIT\\Methodical\\largeframes\\skip3\\skippage3\\skippage3.cmd\r\n\r\n**Log:**\r\n```\r\nJIT\\Methodical\\largeframes\\skip3\\skippage3\\skippage3.cmd [FAIL]\r\n        Process is terminating due to StackOverflowException.\r\n        Return code:      1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24021","RelatedDescription":"Open issue \"[x86] Test failed: JIT\\Methodical\\largeframes\\skip3\\skippage3\\skippage3.cmd\" (#24021)"},{"Id":"433538931","IsPullRequest":true,"CreatedAt":"2019-04-16T01:05:21","Actor":"dotnet-maestro-bot","Number":"24020","RawContent":null,"Title":"Update CoreClr to preview5-27615-72 (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/24020","RelatedDescription":"Open PR \"Update CoreClr to preview5-27615-72 (master)\" (#24020)"},{"Id":"433437314","IsPullRequest":true,"CreatedAt":"2019-04-15T23:59:37","Actor":"sdmaclea","Number":"24001","RawContent":null,"Title":"Initialize IsolatedComponentLoadContext.Name","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24001","RelatedDescription":"Closed or merged PR \"Initialize IsolatedComponentLoadContext.Name\" (#24001)"},{"Id":"433526166","IsPullRequest":true,"CreatedAt":"2019-04-15T23:58:50","Actor":"sdmaclea","Number":"24018","RawContent":null,"Title":"Update ContextualReflection doc","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24018","RelatedDescription":"Open PR \"Update ContextualReflection doc\" (#24018)"},{"Id":"433514887","IsPullRequest":true,"CreatedAt":"2019-04-15T23:44:05","Actor":"EgorBo","Number":"24014","RawContent":null,"Title":"Make MarshalAsAttribute partial","State":"closed","Body":"Mono runtime uses this attribute in C thus we need to sync [layouts](https://github.com/mono/mono/blob/master/mono/metadata/object-internals.h#L1512-L1524).\r\nso I want to add `[StructLayout(LayoutKind.Sequential)]` for Mono.\r\n\r\nCurrent auto-layout for this attribute is:\r\n```\r\nType layout for 'MarshalAsAttribute'\r\nSize: 56 bytes. Paddings: 2 bytes (%3 of empty space)\r\n|=======================================================|\r\n| Object Header (8 bytes)                               |\r\n|-------------------------------------------------------|\r\n| Method Table Ptr (8 bytes)                            |\r\n|=======================================================|\r\n|   0-7: Type SafeArrayUserDefinedSubType (8 bytes)     |\r\n|-------------------------------------------------------|\r\n|  8-15: String MarshalType (8 bytes)                   |\r\n|-------------------------------------------------------|\r\n| 16-23: Type MarshalTypeRef (8 bytes)                  |\r\n|-------------------------------------------------------|\r\n| 24-31: String MarshalCookie (8 bytes)                 |\r\n|-------------------------------------------------------|\r\n| 32-35: UnmanagedType <Value>k__BackingField (4 bytes) |\r\n|-------------------------------------------------------|\r\n| 36-39: VarEnum SafeArraySubType (4 bytes)             |\r\n|-------------------------------------------------------|\r\n| 40-43: Int32 IidParameterIndex (4 bytes)              |\r\n|-------------------------------------------------------|\r\n| 44-47: UnmanagedType ArraySubType (4 bytes)           |\r\n|-------------------------------------------------------|\r\n| 48-51: Int32 SizeConst (4 bytes)                      |\r\n|-------------------------------------------------------|\r\n| 52-53: Int16 SizeParamIndex (2 bytes)                 |\r\n|-------------------------------------------------------|\r\n| 54-55: padding (2 bytes)                              |\r\n|=======================================================|\r\n```\r\n\r\ncc: @marek-safar @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/24014","RelatedDescription":"Closed or merged PR \"Make MarshalAsAttribute partial\" (#24014)"},{"Id":"433434720","IsPullRequest":true,"CreatedAt":"2019-04-15T23:29:41","Actor":"jkotas","Number":"24000","RawContent":null,"Title":"Remove redundant UnderlyingSystemType calls","State":"closed","Body":"UnderlyingSystemType is virtual","Url":"https://github.com/dotnet/coreclr/pull/24000","RelatedDescription":"Closed or merged PR \"Remove redundant UnderlyingSystemType calls\" (#24000)"},{"Id":"433508653","IsPullRequest":true,"CreatedAt":"2019-04-15T22:42:06","Actor":"AndyAyersMS","Number":"24010","RawContent":null,"Title":"JIT: ignore pinning of non-gc types","State":"open","Body":"We may see pin modifiers on locals that are not gc types.\r\nIgnore these modifiers.\r\n\r\nCloses #23950.\r\n\r\nAlso added a missing copyright header on an unrelated test.","Url":"https://github.com/dotnet/coreclr/pull/24010","RelatedDescription":"Open PR \"JIT: ignore pinning of non-gc types\" (#24010)"},{"Id":"433508094","IsPullRequest":true,"CreatedAt":"2019-04-15T22:40:05","Actor":"sandreenko","Number":"24009","RawContent":null,"Title":"Fix lsraBlockEpoch check.","State":"open","Body":"There were 2 errors in my old change #11233:\r\n1. an assignment inside a noway assert: `noway_assert(lsraBlockEpoch = compiler->GetCurBasicBlockEpoch());`, so it was not checking anything;\r\n2. `lsraBlockEpoch` was initizalized too early before we called `buildIntervals` that set `blockSequencingDone` and called `compiler->EnsureBasicBlockEpoch();` and  initialized `bbVisitedSet = BlockSetOps::MakeEmpty(compiler);`.\r\n\r\nFix both errors and add an additional check that we set `blockSequencingDone` only once.","Url":"https://github.com/dotnet/coreclr/pull/24009","RelatedDescription":"Open PR \"Fix lsraBlockEpoch check.\" (#24009)"},{"Id":"433503616","IsPullRequest":false,"CreatedAt":"2019-04-15T22:28:53","Actor":"vatsan-madhavan","Number":"24008","RawContent":null,"Title":"Exception thrown 'Unable to find an entry point named 'CopyMemory' in DLL 'kernel32.dll'.' on WPF project with .NET Core 3.0","State":"closed","Body":"_From @Ebenezer94 on Monday, 15 April 2019 17:50:37_\r\n\r\nWe have used the CopyMemory method in our project to copies memory from source to destination. While copying, exception thrown like \"'Unable to find an entry point named 'CopyMemory' in DLL 'kernel32.dll'.'\". This code works fine in WPF with .NET Framework. But, we are facing an issue in WPF with .NET Core. I have added the simple code snippet to reproduce the issue in WPF with .NETCore. The simple sample can be download from below link,\r\n\r\n.NET Core3.0\r\n\r\nhttp://www.syncfusion.com/downloads/support/directtrac/general/ze/NETCOR~1263359629.zip\r\n\r\n.NET Framework\r\n\r\nhttp://www.syncfusion.com/downloads/support/directtrac/general/ze/CopyMemory_NetFramework542091517.zip\r\n\r\nCode snippet :\r\n\r\n```\r\n[DllImport(\"kernel32.dll\", EntryPoint = \"CopyMemory\", SetLastError = false)]\r\npublic static extern void CopyMemory(IntPtr dest, IntPtr src, uint count);\r\npublic MainWindow()\r\n{\r\n    const int size = 200;\r\n    IntPtr memorySource = Marshal.AllocHGlobal(size);\r\n    Marshal.WriteInt32(memorySource, 35);\r\n    IntPtr memoryTarget = Marshal.AllocHGlobal(size);\r\n    CopyMemory(memoryTarget, memorySource, size);\r\n    bool val = Marshal.ReadInt32(memoryTarget) == 35;\r\n}\r\n```\r\n\r\n\r\nPlease find the required configuration below.\r\n\r\n.NET Framework                                 : 4.6\r\n.NET Core                                           : 3.0\r\nOperating System                              : Windows 10\r\nPreferred Programming Language    : C#\r\nVisual Studio                                      : Visual Studio 2017\r\n\r\n_Copied from original issue: dotnet/wpf#586_","Url":"https://github.com/dotnet/coreclr/issues/24008","RelatedDescription":"Closed issue \"Exception thrown 'Unable to find an entry point named 'CopyMemory' in DLL 'kernel32.dll'.' on WPF project with .NET Core 3.0\" (#24008)"},{"Id":"433481393","IsPullRequest":true,"CreatedAt":"2019-04-15T21:14:07","Actor":"mikedn","Number":"24007","RawContent":null,"Title":"[WIP] Compile JIT sources with /W4","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24007","RelatedDescription":"Open PR \"[WIP] Compile JIT sources with /W4\" (#24007)"},{"Id":"433477504","IsPullRequest":true,"CreatedAt":"2019-04-15T21:03:56","Actor":"sdmaclea","Number":"24006","RawContent":null,"Title":"Test remove ContextualReflectionProxy","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24006","RelatedDescription":"Open PR \"Test remove ContextualReflectionProxy\" (#24006)"},{"Id":"433466138","IsPullRequest":true,"CreatedAt":"2019-04-15T20:33:13","Actor":"dotnet-maestro-bot","Number":"24005","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @dotnet-maestro-bot\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/24005","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#24005)"},{"Id":"433446262","IsPullRequest":true,"CreatedAt":"2019-04-15T20:30:09","Actor":"dotnet-maestro-bot","Number":"24004","RawContent":null,"Title":"Update BuildTools to preview1-03915-02 (release/2.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/24004","RelatedDescription":"Closed or merged PR \"Update BuildTools to preview1-03915-02 (release/2.2)\" (#24004)"},{"Id":"433443010","IsPullRequest":true,"CreatedAt":"2019-04-15T20:30:03","Actor":"dotnet-maestro-bot","Number":"24003","RawContent":null,"Title":"Update BuildTools to rc1-03915-01 (release/2.1)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/24003","RelatedDescription":"Closed or merged PR \"Update BuildTools to rc1-03915-01 (release/2.1)\" (#24003)"},{"Id":"433442516","IsPullRequest":true,"CreatedAt":"2019-04-15T19:29:45","Actor":"sandreenko","Number":"24002","RawContent":null,"Title":"Another surgery fix for genPutArgStk to fix desktop build.","State":"open","Body":"Our desktop build hit warning` C4701: potentially uninitialized local variables 'structSize', 'isHfa', 'gcPtrCount' used.`\r\n\r\nRearrange code to make it obvious (that they are initialized) and to avoid double assignment (before for `addrNode->OperGet() == GT_LCL_VAR_ADDR` case we first assigned `isHfa` under ` if (varNode != nullptr)` and then rewritten the value under  ` if (source->OperIs(GT_OBJ))`.\r\n\r\n\r\nLink #23867","Url":"https://github.com/dotnet/coreclr/pull/24002","RelatedDescription":"Open PR \"Another surgery fix for genPutArgStk to fix desktop build.\" (#24002)"},{"Id":"433426363","IsPullRequest":true,"CreatedAt":"2019-04-15T18:46:44","Actor":"jkoritzinsky","Number":"23999","RawContent":null,"Title":"Use Ubuntu 16.04 Docker image for arm cross builds.","State":"open","Body":"Ubuntu 14.04 standard support ends on April 25th 2019 and enters paid [Extended Security Maitenence mode](https://wiki.ubuntu.com/SecurityTeam/ESM/14.04) on that day.\r\n\r\nSince .NET Core 3.0 doesn't support officially support running on Ubuntu 14.04, we should update our docker images to run a supported distribution. Since we use Ubuntu 16.04 for our ARM64 cross-builds, it makes sense to also use Ubuntu 16.04 for our ARM32 cross-builds.","Url":"https://github.com/dotnet/coreclr/pull/23999","RelatedDescription":"Open PR \"Use Ubuntu 16.04 Docker image for arm cross builds.\" (#23999)"},{"Id":"433532521","IsPullRequest":false,"CreatedAt":"2019-04-14T13:14:32","Actor":"ddobric","Number":"24019","RawContent":null,"Title":"Access Violation when working with huge arrays","State":"open","Body":"I'm working on some ML project and have a \"huge\" array:\r\n\r\n`var x = new int[4096, 250000];`\r\n\r\nI utilize array withing following UnitTest running in .NET Core 2.1\r\n\r\n```\r\n       public void HugeArryTest()\r\n        {\r\n            var x = new int[4096, 250000];\r\n            for (int i = 0; i < 4096; i++)\r\n            {\r\n                int[] y = x.GetRow2(i);\r\n            }\r\n        }\r\n```\r\n\r\nMethod **_GetRow2_** is implemented in **_netstandard2.0_** library:\r\n```\r\npublic static int[] GetRow2(this int[,] array, int row)\r\n        {\r\n            if (array == null)\r\n                throw new ArgumentNullException(\"array\");\r\n\r\n            int cols = array.GetUpperBound(1) + 1;\r\n            int[] result = new int[cols];\r\n\r\n            for (int i = 0; i < cols; i++)\r\n            {\r\n                //Console.WriteLine($\"{i}\");\r\n                result[i] = array[row, i];\r\n            }\r\n\r\n            return result;\r\n        }\r\n```\r\n\r\nTest fails inside of method GetRow, while trying to access\r\n\r\n![image](https://user-images.githubusercontent.com/1756871/56093334-b9c97000-5ec7-11e9-816f-c8ae13f162ed.png)\r\n","Url":"https://github.com/dotnet/coreclr/issues/24019","RelatedDescription":"Open issue \"Access Violation when working with huge arrays\" (#24019)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"433495962","IsPullRequest":false,"CreatedAt":"2019-04-15T21:57:37","Actor":"joshfree","Number":"11162","RawContent":null,"Title":"Feature Request: \"Did you mean ...?\" prompting for command typos such as 'consle'","State":"open","Body":"**_Moved from original issue by @jamesBrosnahan at  https://github.com/dotnet/core/issues/2587_**  :\r\n\r\n\r\n\r\nProblem encountered on https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/create\r\nOperating System: Linux Ubuntu 18.04 - x64\r\n\r\nProvide details about the problem you are experiencing. Include your operating system version, exact error message, code sample, and anything else that is relevant.\r\n\r\nTypo using command outputs excessive information:\r\ndotnet new consle -o myApp\r\n\r\n```\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms refer to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\nGetting ready...\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --nuget-source      Specifies a NuGet source to use during install.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --dry-run           Displays a summary of what would happen if the given command line were run if it would result in a template creation.\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Filters templates based on language and specifies the language of the template to create.\r\n\r\n\r\nNo templates matched the input template name: consle.\r\n\r\nTemplates                                         Short Name         Language          Tags                                 \r\n----------------------------------------------------------------------------------------------------------------------------\r\nConsole Application                               console            [C#], F#, VB      Common/Console                       \r\nClass library                                     classlib           [C#], F#, VB      Common/Library                       \r\nUnit Test Project                                 mstest             [C#], F#, VB      Test/MSTest                          \r\nNUnit 3 Test Project                              nunit              [C#], F#, VB      Test/NUnit                           \r\nNUnit 3 Test Item                                 nunit-test         [C#], F#, VB      Test/NUnit                           \r\nxUnit Test Project                                xunit              [C#], F#, VB      Test/xUnit                           \r\nRazor Page                                        page               [C#]              Web/ASP.NET                          \r\nMVC ViewImports                                   viewimports        [C#]              Web/ASP.NET                          \r\nMVC ViewStart                                     viewstart          [C#]              Web/ASP.NET                          \r\nASP.NET Core Empty                                web                [C#], F#          Web/Empty                            \r\nASP.NET Core Web App (Model-View-Controller)      mvc                [C#], F#          Web/MVC                              \r\nASP.NET Core Web App                              webapp             [C#]              Web/MVC/Razor Pages                  \r\nASP.NET Core with Angular                         angular            [C#]              Web/MVC/SPA                          \r\nASP.NET Core with React.js                        react              [C#]              Web/MVC/SPA                          \r\nASP.NET Core with React.js and Redux              reactredux         [C#]              Web/MVC/SPA                          \r\nRazor Class Library                               razorclasslib      [C#]              Web/Razor/Library/Razor Class Library\r\nASP.NET Core Web API                              webapi             [C#], F#          Web/WebAPI                           \r\nglobal.json file                                  globaljson                           Config                               \r\nNuGet Config                                      nugetconfig                          Config                               \r\nWeb Config                                        webconfig                            Config                               \r\nSolution File                                     sln                                  Solution                             \r\n\r\nExamples:\r\n    dotnet new mvc --auth Individual\r\n    dotnet new mstest \r\n    dotnet new --help\r\n```\r\nThe dotnet command should do error checking prior to outputting a welcome message and then use a 'Did you mean' algorithm to determine if the template in the command is a typo or has not been installed; then prompt the user with a group of candidate templates or offer to download templates from the .NET Foundation if available.","Url":"https://github.com/dotnet/cli/issues/11162","RelatedDescription":"Open issue \"Feature Request: \"Did you mean ...?\" prompting for command typos such as 'consle'\" (#11162)"},{"Id":"433492357","IsPullRequest":true,"CreatedAt":"2019-04-15T21:46:17","Actor":"nguerrera","Number":"11161","RawContent":null,"Title":"dotnet/sdk 2.2.300-preview-64015-01","State":"open","Body":"Insert dotnet/sdk latest release/2.2.3xx, with nuget version matching latest in dotnet/cli release/2.2.3xx\r\n","Url":"https://github.com/dotnet/cli/pull/11161","RelatedDescription":"Open PR \"dotnet/sdk 2.2.300-preview-64015-01\" (#11161)"},{"Id":"433245182","IsPullRequest":true,"CreatedAt":"2019-04-15T20:13:53","Actor":"dotnet-maestro[bot]","Number":"11155","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190414.1\r\n- **Date Produced**: 4/14/2019 3:06 PM\r\n- **Commit**: fe57a1c3888750e1656da45d36235b14d6c5aa28\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19214.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11155","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11155)"},{"Id":"433458322","IsPullRequest":true,"CreatedAt":"2019-04-15T20:12:59","Actor":"nguerrera","Number":"11160","RawContent":null,"Title":"Roslyn 3.1.0-beta2-19211-01 (2.2.3xx)","State":"open","Body":"Insert Roslyn matching 16.1 p2 into CLI 2.2.3xx\r\n","Url":"https://github.com/dotnet/cli/pull/11160","RelatedDescription":"Open PR \"Roslyn 3.1.0-beta2-19211-01 (2.2.3xx)\" (#11160)"},{"Id":"433410073","IsPullRequest":true,"CreatedAt":"2019-04-15T20:11:28","Actor":"rainersigwald","Number":"11158","RawContent":null,"Title":"MSBuild 16.1.59 (2.2.3xx)","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11158","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.59 (2.2.3xx)\" (#11158)"},{"Id":"433408848","IsPullRequest":true,"CreatedAt":"2019-04-15T20:11:03","Actor":"rainersigwald","Number":"11156","RawContent":null,"Title":"MSBuild 16.1.59 (2.1.7xx)","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11156","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.59 (2.1.7xx)\" (#11156)"},{"Id":"433456916","IsPullRequest":true,"CreatedAt":"2019-04-15T20:09:14","Actor":"nguerrera","Number":"11159","RawContent":null,"Title":"Roslyn 3.1.0-beta2-19211-01 (2.1.7xx)","State":"open","Body":"Inserting roslyn matching 16.1 p2 into 2.1.7xx CLI","Url":"https://github.com/dotnet/cli/pull/11159","RelatedDescription":"Open PR \"Roslyn 3.1.0-beta2-19211-01 (2.1.7xx)\" (#11159)"},{"Id":"433409336","IsPullRequest":false,"CreatedAt":"2019-04-15T18:01:15","Actor":"wli3","Number":"11157","RawContent":null,"Title":"Remove apphost template when apphosts are bundled","State":"open","Body":"original change is here https://github.com/dotnet/cli/pull/8893/files#diff-0805a49c9b784cecb879590476022506R1\r\n\r\nSince we will bundle all apphosts, this apphost template for global tools is no longer needed","Url":"https://github.com/dotnet/cli/issues/11157","RelatedDescription":"Open issue \"Remove apphost template when apphosts are bundled\" (#11157)"},{"Id":"432704924","IsPullRequest":false,"CreatedAt":"2019-04-15T15:03:41","Actor":"danielancich","Number":"11148","RawContent":null,"Title":"dotnet test --runtime linux-x64 copies wrong nuget dependencies into ouput folder","State":"closed","Body":"## Steps to reproduce\r\n1. Have a nuget package with .dll in the lib/netcoreapp2.2 folder. And the respective .dll and .so in the runtimes/{os}/native folders. \r\n2. Run 'dotnet test --configuration Release --runtime linux-x64 --logger:trx $csprojFile'\r\n\r\n## Expected  behavior\r\nThe output folder 'bin/Release/netcoreapp2.2/linux-x64/' should contain the .so files and run the tests.\r\n\r\n## Actual behavior\r\nThe output folder 'bin/Release/netcoreapp2.2/linux-x64/' contains .dll files and cannot run the tests.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\nVersion:   2.2.105\r\nCommit:    7cecb35b92\r\nRuntime Environment:\r\n  OS Name:     amzn\r\n  OS Version:  2018.03\r\n  OS Platform: Linux\r\n  RID:         linux-x64\r\n  Base Path:   /var/build/workspace/core-unit-tests/dotnet/cli/sdk/2.2.105/\r\nHost (useful for support):\r\n  Version: 2.2.3\r\n  Commit:  6b8ad509b6\r\n.NET Core SDKs installed:\r\n  2.2.105 [/var/build/workspace/core-unit-tests/dotnet/cli/sdk]\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.3 [/var/build/workspace/core-unit-tests/dotnet/cli/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.3 [/var/build/workspace/core-unit-tests/dotnet/cli/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [/var/build/workspace/core-unit-tests/dotnet/cli/shared/Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11148","RelatedDescription":"Closed issue \"dotnet test --runtime linux-x64 copies wrong nuget dependencies into ouput folder\" (#11148)"},{"Id":"432840987","IsPullRequest":true,"CreatedAt":"2019-04-15T12:53:28","Actor":"dotnet-maestro[bot]","Number":"11150","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190412.1\r\n- **Date Produced**: 4/12/2019 12:56 PM\r\n- **Commit**: 00424d5b5432c7b999a8fbb7d5fcac1b9dcfd86b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19212.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190413.1\r\n- **Date Produced**: 4/13/2019 12:58 PM\r\n- **Commit**: 5d0006a959b7375e1cb2fb6221cfe55f94b562de\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19213.1\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190414.1\r\n- **Date Produced**: 4/14/2019 12:53 PM\r\n- **Commit**: 86cd150d97a5cc48982818719099581e50685ad6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19214.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11150)"},{"Id":"433245011","IsPullRequest":true,"CreatedAt":"2019-04-15T12:40:51","Actor":"dotnet-maestro[bot]","Number":"11154","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11154","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11154)"},{"Id":"432984517","IsPullRequest":true,"CreatedAt":"2019-04-14T14:29:04","Actor":"am11","Number":"11153","RawContent":null,"Title":"Update manpages with dotnet/docs master branch","State":"open","Body":"This PR updates manpages for .NET Core using latest pandoc on Debian 9; following the instructions described here: https://github.com/dotnet/cli/tree/2995f33f/Documentation/manpages/tool#ubuntu-example-from-scratch.\r\n\r\n@nguerrera, @mmitche, can it be plugged into the CI pipeline? One clean approach would be to mount a volume on prebuilt docker container, with required pandoc version and other dependencies installed, run it in CI job and push a commit to PR with `dotnet-mastero` as author. Here is a similar example of this idea in action: https://github.com/maxmind/GeoIP2-dotnet/blob/master/Makefile#L6-L27.","Url":"https://github.com/dotnet/cli/pull/11153","RelatedDescription":"Open PR \"Update manpages with dotnet/docs master branch\" (#11153)"},{"Id":"432966508","IsPullRequest":true,"CreatedAt":"2019-04-14T12:40:08","Actor":"dotnet-maestro[bot]","Number":"11152","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11152","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11152)"},{"Id":"432948475","IsPullRequest":false,"CreatedAt":"2019-04-14T10:51:59","Actor":"mattiasw2","Number":"11151","RawContent":null,"Title":"How to disable \"System.GC.Server\" ?","State":"closed","Body":"I want to disable the server GC, since it isn't aggressive enough and ends up using 100% of the 512 Mb the machine has. The application is a small kestrel apps, reads blobs up to size 300kb, and most likely the large object heap is the reason.\r\n\r\nHowever,  `` \"System.GC.Server\": false, ``  is ignored, how to I change that value?\r\n\r\nI created a file called runtimeconfig.template.json and put it on the root\r\n\r\n```\r\n{\r\n  \"configProperties\": {\r\n    \"System.GC.Server\": false,\r\n    \"foobar\":  true \r\n  }\r\n}\r\n```\r\n\r\nI added the foobar stuff to make sure the template is used.\r\n\r\nHowever, the resulting <prject>.runtimeconfig.json in the published folder is\r\n\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp2.1\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.AspNetCore.App\",\r\n      \"version\": \"2.1.1\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true,\r\n      \"foobar\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11151","RelatedDescription":"Closed issue \"How to disable \"System.GC.Server\" ?\" (#11151)"},{"Id":"432533019","IsPullRequest":true,"CreatedAt":"2019-04-13T12:40:17","Actor":"dotnet-maestro[bot]","Number":"11144","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11144","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11144)"},{"Id":"432840293","IsPullRequest":true,"CreatedAt":"2019-04-13T12:35:37","Actor":"dotnet-maestro[bot]","Number":"11149","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190412.9\r\n- **Date Produced**: 4/13/2019 1:41 AM\r\n- **Commit**: 8ad6b4e0b9e74bc666b6f56cf4764209cbd73064\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19212.9\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11149","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11149)"},{"Id":"432335674","IsPullRequest":true,"CreatedAt":"2019-04-13T00:26:14","Actor":"wli3","Number":"11143","RawContent":null,"Title":"dotnet tool --local update","State":"closed","Body":"**Please review by commit**\r\n\r\nthe follow 2 are large but they are refactorings to reduce the duplication:\r\nCreate applied option class 7d65d20\r\nExtract a class and a extension to minimize the dup from install and update 8ae38bd\r\n\r\nImpl dotnet tool update a438573 is the actual feature","Url":"https://github.com/dotnet/cli/pull/11143","RelatedDescription":"Closed or merged PR \"dotnet tool --local update\" (#11143)"},{"Id":"432668327","IsPullRequest":true,"CreatedAt":"2019-04-12T18:40:17","Actor":"wli3","Number":"11147","RawContent":null,"Title":"Remove duplication in message","State":"closed","Body":"fix https://github.com/dotnet/cli/issues/11146","Url":"https://github.com/dotnet/cli/pull/11147","RelatedDescription":"Closed or merged PR \"Remove duplication in message\" (#11147)"},{"Id":"432659759","IsPullRequest":false,"CreatedAt":"2019-04-12T18:40:17","Actor":"wli3","Number":"11146","RawContent":null,"Title":"Duplication in first run welcome message","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/issues/11146","RelatedDescription":"Closed issue \"Duplication in first run welcome message\" (#11146)"},{"Id":"432330562","IsPullRequest":true,"CreatedAt":"2019-04-12T15:55:19","Actor":"dotnet-bot","Number":"11142","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11142","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#11142)"},{"Id":"432536103","IsPullRequest":true,"CreatedAt":"2019-04-12T12:44:08","Actor":"dotnet-maestro[bot]","Number":"11145","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190411.1\r\n- **Date Produced**: 4/11/2019 12:58 PM\r\n- **Commit**: df99030c70eb20df18f953a62f3cf9d56ea20d6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19211.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11145","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11145)"},{"Id":"432330547","IsPullRequest":true,"CreatedAt":"2019-04-12T00:01:22","Actor":"dotnet-bot","Number":"11141","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11141","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11141)"},{"Id":"432330533","IsPullRequest":true,"CreatedAt":"2019-04-12T00:01:19","Actor":"dotnet-bot","Number":"11140","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11140","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11140)"},{"Id":"432306299","IsPullRequest":false,"CreatedAt":"2019-04-11T22:53:55","Actor":"wli3","Number":"11139","RawContent":null,"Title":"Local tools uninstall should uninstall from the first manfiest with package id","State":"open","Body":"instead of the first manfiest regradless","Url":"https://github.com/dotnet/cli/issues/11139","RelatedDescription":"Open issue \"Local tools uninstall should uninstall from the first manfiest with package id\" (#11139)"},{"Id":"432300975","IsPullRequest":true,"CreatedAt":"2019-04-11T22:33:46","Actor":"nugetlurker","Number":"11138","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into cli","State":"open","Body":"Insert NuGet Build 5.0.1-rtm.5946 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/11138","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.1-rtm.5946 into cli\" (#11138)"},{"Id":"432300960","IsPullRequest":true,"CreatedAt":"2019-04-11T22:33:42","Actor":"nugetlurker","Number":"11137","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into cli","State":"open","Body":"Insert NuGet Build 5.0.1-rtm.5946 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/11137","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.1-rtm.5946 into cli\" (#11137)"},{"Id":"432123258","IsPullRequest":true,"CreatedAt":"2019-04-11T16:44:20","Actor":"JohnTortugo","Number":"11136","RawContent":null,"Title":"Onboard with async publishing","State":"open","Body":"Relates to: https://github.com/dotnet/arcade/issues/2444\r\n\r\nGoal: mitigate `lock on the feed problem` and add further validations. [More details here.](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/AsyncPublishing_HowToUse.md)\r\n\r\nTest build was here: https://dnceng.visualstudio.com/internal/_build/results?buildId=151209\r\nTest release: https://dnceng.visualstudio.com/internal/_releaseProgress?_a=release-pipeline-progress&releaseId=4497","Url":"https://github.com/dotnet/cli/pull/11136","RelatedDescription":"Open PR \"Onboard with async publishing\" (#11136)"},{"Id":"431986370","IsPullRequest":true,"CreatedAt":"2019-04-11T15:37:23","Actor":"dotnet-maestro[bot]","Number":"11133","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11133","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11133)"},{"Id":"431990089","IsPullRequest":true,"CreatedAt":"2019-04-11T12:54:47","Actor":"dotnet-maestro[bot]","Number":"11135","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190410.1\r\n- **Date Produced**: 4/10/2019 1:08 PM\r\n- **Commit**: 0ea905c56ab0c8a8d17b1781486dad2e754afca3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19210.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11135)"},{"Id":"431986530","IsPullRequest":true,"CreatedAt":"2019-04-11T12:40:51","Actor":"dotnet-maestro[bot]","Number":"11134","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190410.2\r\n- **Date Produced**: 4/11/2019 3:46 AM\r\n- **Commit**: 6916b50efb78f126aa68a5d183993f55fb6e03c9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19210.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11134","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11134)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"433533107","IsPullRequest":false,"CreatedAt":"2019-04-16T00:34:16","Actor":"rashadrivera","Number":"1147","RawContent":null,"Title":"Please Make AsnReader And AnsWriter Public","State":"open","Body":"All,\r\n\r\nI have a real need for the internl classes that are being used in .NET Core 2.x.  I need a Asn reader and writer and I've recently discovered the [AsnReader and AsnWriter](https://github.com/dotnet/corefx/tree/master/src/Common/src/System/Security/Cryptography/Asn1Reader) as internal classes.  **Can these classes become public within .NET Standard?**  My products are built upon .NET Standard exclusively and not .NET Core or .NET.\r\n\r\nIn my case, I need them to create certificate revocation lists (CRL) and translate online certificate status protocol (OCSP) requests and responses.  I've used BouncyCastle as part of my solution, but I feel it is a poor implementation because of its cryptic design and the fact that I **must** give it unadulterated access to my private keys (which is a serious FIPS security concern).  \r\n\r\nMy goal is to use out-of-process signing like Azure.  But in order to do that, I need a solution that allows me to generate Asn data without third party tools like BouncyCastle.  ","Url":"https://github.com/dotnet/standard/issues/1147","RelatedDescription":"Open issue \"Please Make AsnReader And AnsWriter Public\" (#1147)"},{"Id":"433244267","IsPullRequest":true,"CreatedAt":"2019-04-15T12:13:52","Actor":"dotnet-maestro[bot]","Number":"1146","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1146)"},{"Id":"432966330","IsPullRequest":true,"CreatedAt":"2019-04-14T12:13:32","Actor":"dotnet-maestro[bot]","Number":"1145","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1145","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1145)"},{"Id":"432889036","IsPullRequest":false,"CreatedAt":"2019-04-13T19:21:08","Actor":"JamesNK","Number":"1144","RawContent":null,"Title":"Add HttpResponseMessage.TrailingHeaders to netstandard","State":"open","Body":"https://github.com/dotnet/corefx/blob/4fa6319fb590b046ba4c962088b960a31749f245/src/System.Net.Http/src/System/Net/Http/HttpResponseMessage.cs#L119-L130\r\n\r\nDiscussion: https://github.com/dotnet/corefx/issues/34912#issuecomment-482777355","Url":"https://github.com/dotnet/standard/issues/1144","RelatedDescription":"Open issue \"Add HttpResponseMessage.TrailingHeaders to netstandard\" (#1144)"},{"Id":"432840145","IsPullRequest":true,"CreatedAt":"2019-04-13T12:08:31","Actor":"dotnet-maestro[bot]","Number":"1143","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19212.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1143)"},{"Id":"432819882","IsPullRequest":false,"CreatedAt":"2019-04-13T07:42:03","Actor":"nimisha84","Number":"1142","RawContent":null,"Title":"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0","State":"open","Body":"Hi Team,\r\nhttps://github.com/intuit/QuickBooks-V3-DotNET-SDK/\r\nWe have this class lib project which was on 4.6.1 and needed migration to .Net Standard so that it can support .Net Core too.\r\nSo, we migrated it to 4.7.2 first and then changed all .csproj files to support both 4.7.2 and Net Standard 2.0.\r\nWe are facing a really weird issue here. We have about 16 projects in this solution and using the new .csproj with targetframeworks 4.7.2 and Net Standard2.0, I see that release and debug dlls are generated for majority of projects in the .Net Standard but for some reason for about 4 of these projects, the target version of these dlls is always 4.7.2.  I have tried to compare the .csproj across all projects which build successfully to generate .Net Standard dlls vs those which do not generate. There isn't any diff at all. \r\n**Intuit.Ipp.Core for example builds successfully to generate .Net Standard dlls but Intuit.Ipp.Exception, Intuit.Ipp.Retry, Intuit.Ipp.Utility, Intuit.Ipp.OAuth2PlatformClient always build to generate 4.7.2 dlls.**\r\n\r\n**Another issue is that even though there are no circular ref, the project build order is not honored and you will see a lot of xcopy failures.**\r\n\r\nPlease help.!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1142","RelatedDescription":"Open issue \"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0\" (#1142)"},{"Id":"432775994","IsPullRequest":false,"CreatedAt":"2019-04-12T23:24:57","Actor":"danny-may","Number":"1141","RawContent":null,"Title":"Linq extensions for IAsyncEnumerable","State":"closed","Body":"With `IAsyncEnumerable<T>` being added to .net standard 2,1, I feel it would make sense to also add all the Linq extensions on `IEnumerable<T>` to `IAsyncEnumerable<T>`, be that in a new extension class (e.g. `AsyncEnumerable.cs`) or as additional methods in the existing `Enumerable.cs` class.\r\n\r\n```csharp\r\npublic static class AsyncEnumerable\r\n{\r\n    ....\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n    public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    ....\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n}\r\n```\r\n\r\n```csharp\r\nvar allItems = MyAsyncEnumerableMethod();\r\nvar evens = await allItems.Where(item => item.id % 2 == 0).ToArrayAsync();\r\nvar firstOdd = await allItems.FirstOrDefaultAsync(item => item.id % 2 == 1);\r\n```\r\n\r\nI understand this would need to be implemented into the .net core and .net framework releases too, I figured it would make sense to raise it here first as its an API proposal?","Url":"https://github.com/dotnet/standard/issues/1141","RelatedDescription":"Closed issue \"Linq extensions for IAsyncEnumerable\" (#1141)"},{"Id":"432616368","IsPullRequest":false,"CreatedAt":"2019-04-12T15:17:58","Actor":"hinteadan","Number":"1140","RawContent":null,"Title":"string.Join unexpected behavior when calling Join(String separator, params object[] values);","State":"closed","Body":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`","Url":"https://github.com/dotnet/standard/issues/1140","RelatedDescription":"Closed issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#1140)"},{"Id":"432532476","IsPullRequest":true,"CreatedAt":"2019-04-12T12:13:53","Actor":"dotnet-maestro[bot]","Number":"1139","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19211.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1139","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1139)"},{"Id":"432357589","IsPullRequest":false,"CreatedAt":"2019-04-12T02:20:57","Actor":"DSBRBrasil","Number":"1138","RawContent":null,"Title":"Xml validate [ type is not declared ]","State":"open","Body":"Hi,\r\nWhy, I don't  validate a document using .net standard 2.0? I get that's message: Type not declared\r\nThat's my code:\r\n```\r\n var xDoc = XDocument.Parse(\"<consStatServ versao=\\\"4.00\\\" xmlns=\\\"http://www.portalfiscal.inf.br/nfe\\\"><tpAmb>2</tpAmb><cUF>29</cUF><xServ>STATUS</xServ></consStatServ>\");\r\n   var xss = new XmlSchemaSet();\r\n   xss.Add(\"http://www.portalfiscal.inf.br/nfe\", @\"D:\\Schemas\\consStatServ_v4.00.xsd\");\r\n   //Validar Xml\r\n   xDoc.Validate(xss, (sender, args) =>\r\n            {\r\n                throw new FalhaValidacaoSchemaException(args.Message);\r\n\r\n            });\r\n```","Url":"https://github.com/dotnet/standard/issues/1138","RelatedDescription":"Open issue \"Xml validate [ type is not declared ]\" (#1138)"},{"Id":"431985706","IsPullRequest":true,"CreatedAt":"2019-04-11T12:13:49","Actor":"dotnet-maestro[bot]","Number":"1137","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19210.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1137","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1137)"},{"Id":"431464888","IsPullRequest":true,"CreatedAt":"2019-04-10T12:13:44","Actor":"dotnet-maestro[bot]","Number":"1136","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1136","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1136)"},{"Id":"429978073","IsPullRequest":true,"CreatedAt":"2019-04-09T16:30:37","Actor":"JohnTortugo","Number":"1126","RawContent":null,"Title":"Onboard on async publishing","State":"closed","Body":"Relates to: https://github.com/dotnet/arcade/issues/2442\r\n\r\nGoal: mitigate `lock on the feed problem` and add further validations. [More details here.](https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/AsyncPublishing_HowToUse.md)\r\n\r\nTest build was here: https://dnceng.visualstudio.com/internal/_build/results?buildId=144566\r\nTest release: https://dnceng.visualstudio.com/internal/_releaseProgress?_a=release-pipeline-progress&releaseId=4241","Url":"https://github.com/dotnet/standard/pull/1126","RelatedDescription":"Closed or merged PR \"Onboard on async publishing\" (#1126)"},{"Id":"430928858","IsPullRequest":true,"CreatedAt":"2019-04-09T12:13:46","Actor":"dotnet-maestro[bot]","Number":"1135","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1135)"},{"Id":"430724535","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:16","Actor":"wtgodbe","Number":"1133","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1133","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1133)"},{"Id":"430724563","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:07","Actor":"wtgodbe","Number":"1134","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1134","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1134)"},{"Id":"430719996","IsPullRequest":true,"CreatedAt":"2019-04-09T01:25:47","Actor":"wtgodbe","Number":"1132","RawContent":null,"Title":"Update branding to preview5","State":"closed","Body":"CC @mmitche","Url":"https://github.com/dotnet/standard/pull/1132","RelatedDescription":"Closed or merged PR \"Update branding to preview5\" (#1132)"},{"Id":"430670575","IsPullRequest":false,"CreatedAt":"2019-04-08T21:50:37","Actor":"tom-corwin","Number":"1131","RawContent":null,"Title":"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions","State":"closed","Body":"I noticed that when targeting a .NET Standard library, there is no overload for System.Reflection.Emit.ILGenerator.EmitCalli() that allows for use of the System.Runtime.InteropServices.CallingConvention enum as a parameter.\r\n\r\nAre there any plans to add the overload, or is this going to be on implementation-only?","Url":"https://github.com/dotnet/standard/issues/1131","RelatedDescription":"Closed issue \"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions\" (#1131)"},{"Id":"430411848","IsPullRequest":true,"CreatedAt":"2019-04-08T12:13:43","Actor":"dotnet-maestro[bot]","Number":"1130","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190407.1\r\n- **Date Produced**: 4/7/2019 12:56 PM\r\n- **Commit**: b1f9e12fe3ee71c48ea60b15968745850ac0a4a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19207.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19207.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1130","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1130)"},{"Id":"430137273","IsPullRequest":true,"CreatedAt":"2019-04-07T12:13:36","Actor":"dotnet-maestro[bot]","Number":"1129","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190406.5\r\n- **Date Produced**: 4/6/2019 5:35 PM\r\n- **Commit**: 9d8abf998866f10bc19d97e1916ff1c0ada3fd42\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19206.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19206.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1129","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1129)"},{"Id":"429990573","IsPullRequest":false,"CreatedAt":"2019-04-07T05:49:47","Actor":"benneyman","Number":"1127","RawContent":null,"Title":"[Help] Targeting netstandard2.0 for a class library","State":"closed","Body":"After a lot of googling I came to realize that my existing class library(net462) should be targeting netstandard2.0 to be able to reference into my react app (dotnet new react) which targets netcoreapp2.1.\r\n\r\nI am not sure how to make my class library to target netstandard2.0 from Visual Studio 2013. From the extensive googling I did I know we need VS 2017 (15.3) to do this. I do not have access to VS 2017.\r\n\r\nI feel there could be other ways of doing this without having to have VS2017 from the googling I did. But I can't any concrete solutions.\r\n\r\nCould you please guide me on how to target a class library to netstandard2.0 from Visual Studio 2013 or using CLI tools so that I will be able to add a project reference to my react project.","Url":"https://github.com/dotnet/standard/issues/1127","RelatedDescription":"Closed issue \"[Help] Targeting netstandard2.0 for a class library\" (#1127)"},{"Id":"430027157","IsPullRequest":true,"CreatedAt":"2019-04-06T12:13:34","Actor":"dotnet-maestro[bot]","Number":"1128","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190405.6\r\n- **Date Produced**: 4/5/2019 11:26 PM\r\n- **Commit**: 4217db4a23ffd15abb3771d635b66162994fb9e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19205.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19205.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1128","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1128)"},{"Id":"429720581","IsPullRequest":true,"CreatedAt":"2019-04-05T12:11:02","Actor":"dotnet-maestro[bot]","Number":"1125","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190404.16\r\n- **Date Produced**: 4/5/2019 3:36 AM\r\n- **Commit**: 61196044ed70a65c610beb230ac6ea77566668c2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19204.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19204.16\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1125","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1125)"},{"Id":"429609384","IsPullRequest":false,"CreatedAt":"2019-04-05T07:06:16","Actor":"Jacksiro","Number":"1124","RawContent":null,"Title":"Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell'","State":"closed","Body":"I am using VS 2017 Community and have targeted .Net v4.5 in my app. My app throws the error of \r\n\r\n```\r\n\r\n> See the end of this message for details on invoking \r\n> just-in-time (JIT) debugging instead of this dialog box.\r\n> \r\n> ************** Exception Text **************\r\n> System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.\r\n> File name: 'Microsoft.WindowsAPICodePack.Shell, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n>    at EasyTabs.TitleBarTabs.SetFrameSize()\r\n>    at EasyTabs.TitleBarTabs.OnSizeChanged(EventArgs e)\r\n>    at System.Windows.Forms.Control.UpdateBounds(Int32 x, Int32 y, Int32 width, Int32 height, Int32 clientWidth, Int32 clientHeight)\r\n>    at System.Windows.Forms.Control.UpdateBounds()\r\n>    at System.Windows.Forms.Control.WndProc(Message& m)\r\n>    at System.Windows.Forms.ScrollableControl.WndProc(Message& m)\r\n>    at System.Windows.Forms.Form.WndProc(Message& m)\r\n>    at EasyTabs.TitleBarTabs.WndProc(Message& m)\r\n>    at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message& m)\r\n>    at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message& m)\r\n>    at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n> \r\n> WRN: Assembly binding logging is turned OFF.\r\n> To enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\r\n> Note: There is some performance penalty associated with assembly bind failure logging.\r\n> To turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\r\n> \r\n> \r\n> \r\n> ************** Loaded Assemblies **************\r\n> mscorlib\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.NET/Framework/v4.0.30319/mscorlib.dll\r\n> ----------------------------------------\r\n> vSongBook\r\n>     Assembly Version: 2.3.5.2\r\n>     Win32 Version: 2.3.5.2\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/vSongBook.exe\r\n> ----------------------------------------\r\n> System.Windows.Forms\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Windows.Forms/v4.0_4.0.0.0__b77a5c561934e089/System.Windows.Forms.dll\r\n> ----------------------------------------\r\n> System\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System/v4.0_4.0.0.0__b77a5c561934e089/System.dll\r\n> ----------------------------------------\r\n> System.Drawing\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Drawing/v4.0_4.0.0.0__b03f5f7f11d50a3a/System.Drawing.dll\r\n> ----------------------------------------\r\n> JacksiroCtrl\r\n>     Assembly Version: 1.2.5.0\r\n>     Win32 Version: 1.2.5.0\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/JacksiroCtrl.DLL\r\n> ----------------------------------------\r\n> SQLite.NET\r\n>     Assembly Version: 0.21.1869.3794\r\n>     Win32 Version: 0.21.1869.3794\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/SQLite.NET.DLL\r\n> ----------------------------------------\r\n> System.Data\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_32/System.Data/v4.0_4.0.0.0__b77a5c561934e089/System.Data.dll\r\n> ----------------------------------------\r\n> System.Core\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Core/v4.0_4.0.0.0__b77a5c561934e089/System.Core.dll\r\n> ----------------------------------------\r\n> System.Xml\r\n>     Assembly Version: 4.0.0.0\r\n>     Win32 Version: 4.6.1590.0 built by: NETFXREL2\r\n>     CodeBase: file:///C:/Windows/Microsoft.Net/assembly/GAC_MSIL/System.Xml/v4.0_4.0.0.0__b77a5c561934e089/System.Xml.dll\r\n> ----------------------------------------\r\n> EasyTabs\r\n>     Assembly Version: 1.3.3.0\r\n>     Win32 Version: 1.3.3.0\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/EasyTabs.DLL\r\n> ----------------------------------------\r\n> Win32Interop.Uxtheme\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.Uxtheme.DLL\r\n> ----------------------------------------\r\n> Win32Interop.User32\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.User32.DLL\r\n> ----------------------------------------\r\n> Win32Interop.Dwmapi\r\n>     Assembly Version: 1.0.1.0\r\n>     Win32 Version: 1.0.1\r\n>     CodeBase: file:///C:/Users/Gifted/AppData/Local/AppSmata/vSongBook/Win32Interop.Dwmapi.DLL\r\n> ----------------------------------------\r\n> \r\n> ************** JIT Debugging **************\r\n> To enable just-in-time (JIT) debugging, the .config file for this\r\n> application or computer (machine.config) must have the\r\n> jitDebugging value set in the system.windows.forms section.\r\n> The application must also be compiled with debugging\r\n> enabled.\r\n> \r\n> For example:\r\n> \r\n> <configuration>\r\n>     <system.windows.forms jitDebugging=\"true\" />\r\n> </configuration>\r\n> \r\n> When JIT debugging is enabled, any unhandled exception\r\n> will be sent to the JIT debugger registered on the computer\r\n> rather than be handled by this dialog box.\r\n\r\n```\r\n\r\nKIndly advice me on the on how to resolve this issue","Url":"https://github.com/dotnet/standard/issues/1124","RelatedDescription":"Closed issue \"Could not load file or assembly 'Microsoft.WindowsAPICodePack.Shell'\" (#1124)"},{"Id":"429582381","IsPullRequest":false,"CreatedAt":"2019-04-05T04:53:06","Actor":"Groostav","Number":"1123","RawContent":null,"Title":"phantom connection when mixing async & blocking calls on TcpClient ","State":"open","Body":"apologies if this is the wrong place to report this!\r\n\r\non .net 4.6.1, win10\r\n\r\n1. create a TCPClient object\r\n2. attempt to connect synchronously to an endpoint with no bound service, get a `SocketException: Connection actively refused\"\r\n3. attempt to `connectAsync` to that same endpoint \r\n\r\nexpected: Asynchronously get a `SocketException: Connection Actively Refused`\r\nactual: connection is established, `tcpClient.Connected` returns true, `tcpClient.GetStream()` returns non-null, `tcpClient.GetStream().write(...)` throws `NotConnectedException`.\r\n\r\n```C#\r\n        \r\n[Test] //baseline, good behaviour\r\npublic async Task when_only_using_async_calls_should_get_consistent_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        await tcpClient.ConnectAsync(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    Func<Task> act = (async () => await tcpClient.ConnectAsync(localhost, port));\r\n\r\n    //assert\r\n    act.Should().Throw<SocketException>();\r\n}        \r\n\r\n\r\n[Test]\r\npublic async Task when_mixing_sync_and_async_tcpclient_calls_should_get_hideous_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        tcpClient.Connect(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    await tcpClient.ConnectAsync(localhost, port);\r\n\r\n    //assert\r\n    tcpClient.Connected.Should().BeTrue();\r\n    tcpClient.GetStream().Should().NotBeNull();\r\n\r\n    //seems very strange\r\n    //subsequent interactions with tcpClient throw \"not connected\" exceptions\r\n    //I would've expected the `ConnectAsync` method to throw the same `SocketException`,\r\n}\r\n```","Url":"https://github.com/dotnet/standard/issues/1123","RelatedDescription":"Open issue \"phantom connection when mixing async & blocking calls on TcpClient \" (#1123)"},{"Id":"429333028","IsPullRequest":false,"CreatedAt":"2019-04-04T15:07:55","Actor":"Korporal","Number":"1122","RawContent":null,"Title":"The end of .NET Framework support?","State":"open","Body":"Hi,\r\n\r\nOn [this ](https://github.com/dotnet/standard/blob/master/docs/versions.md)page we see this footnote under the chart:\r\n\r\n> 2 .NET Framework will not support .NET Standard 2.1 or any other later version. For more details, see this blog post.\r\n\r\nI can understand how some specific version like .NET Framework 4.6.1 (for example) will not support .NET Standard 2.1 but _all_ **future** versions of the .NET Framework too?\r\n\r\nThis statements amounts to a phasing out of .NET Framework, it tells us that we should begin to stop targeting it - well that's what seems to be a logical conclusion anyway.\r\n\r\nI don't understand why some future version of .NET Framework (e.g. 4.8) could not include support for .NET Core 2.1?\r\n\r\nWe read [here ](https://docs.microsoft.com/en-us/dotnet/standard/net-standard)the following Microsoft statement:\r\n\r\n> The .NET Standard is a formal specification of .NET APIs that are intended to be available on **_all_** .NET implementations.\r\n\r\nBut now you're retracting this and instead should be saying:\r\n\r\n> The .NET Standard 2.0 and below, is a formal specification of .NET APIs that are intended to be available on all .NET implementations.\r\n\r\nCan Microsoft please be clearer about this? Companies and their staff are under a huge burden to keep up with all sorts of developments in the technology world and if we are being advised to phase out our own support for the .NET Framework then please say so very clearly and definitively, mentioning this kind of thing as small footnote isn't helpful.\r\n\r\nThanks\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1122","RelatedDescription":"Open issue \"The end of .NET Framework support?\" (#1122)"},{"Id":"429240376","IsPullRequest":true,"CreatedAt":"2019-04-04T12:13:48","Actor":"dotnet-maestro[bot]","Number":"1121","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19203.10\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1121","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1121)"},{"Id":"429232379","IsPullRequest":false,"CreatedAt":"2019-04-04T11:43:44","Actor":"markrendle","Number":"1120","RawContent":null,"Title":"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0","State":"open","Body":"This is exactly the sort of version number weirdness that .NET takes flak for.\r\n\r\nIn the commit explaining the 2.1 decision, the 3.0 section is:\r\n\r\n- **3.0**\r\n  - Aligns with .NET Core, which will be released at the same time as .NET\r\n    Standard vNext\r\n  - Pros\r\n    + Leaves room for another .NET Standard that is smaller\r\n    + Simpler messaging when we ship .NET Core and .NET Standard and aligns with\r\n      what we did for .NET Core 2.0.\r\n  - Cons\r\n    + A 3.0 isn't really warranted for .NET Standard\r\n    + Perpetuates the problem of aligning .NET Core & .NET Standard versions and\r\n      requires arbitrary skipping of version numbers\r\n\r\n*Simpler messaging* should be a top priority here. I'm going to spend as much time explaining to clients why they can't use .NET Standard 2.1 with the .NET Core 2.1 LTS as my niece Allyce does explaining how to spell her name.\r\n\r\nIf a 3.0 is warranted for .NET Core, with it's `IAsyncEnumerable`, `IAsyncDisposable`, `Range` and `Index` and all the new overloads of existing APIs, then why isn't it warranted for .NET Standard?\r\n\r\nBetter yet, why not publish a .NET Standard 2.1 which aligns with .NET Core 2.1, with all the `Span<T>` goodness, and a .NET Standard 3.0 which aligns with .NET Core 3.0?\r\n\r\nDeliberately versioning .NET Standard independently of .NET Core, especially on the major version numbers, just seems perverse and unnecessary.","Url":"https://github.com/dotnet/standard/issues/1120","RelatedDescription":"Open issue \"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0\" (#1120)"},{"Id":"428727330","IsPullRequest":true,"CreatedAt":"2019-04-03T12:11:00","Actor":"dotnet-maestro[bot]","Number":"1119","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190402.13\r\n- **Date Produced**: 4/3/2019 12:44 AM\r\n- **Commit**: 764f362c8e92e41905fe5f6c782ab9980c86c909\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19202.13\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1119","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1119)"},{"Id":"428466923","IsPullRequest":false,"CreatedAt":"2019-04-02T22:06:10","Actor":"wtgodbe","Number":"1118","RawContent":null,"Title":"Consider adding Nullable annotations to .Net Standard","State":"open","Body":"https://github.com/dotnet/coreclr/tree/NullableFeature\r\n\r\nWe should consider adding the annotations from the above Feature branch to the .Net Standard for 2.1.\r\n\r\nCC @wtgodbe @terrajobst @dotnet/nullablefc ","Url":"https://github.com/dotnet/standard/issues/1118","RelatedDescription":"Open issue \"Consider adding Nullable annotations to .Net Standard\" (#1118)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"433549719","IsPullRequest":false,"CreatedAt":"2019-04-16T04:28:17","Actor":"dotnet-mc-bot","Number":"36910","RawContent":null,"Title":"Test failure: System.Security.Tests.SecureStringTests/ThreadSafe_Stress(executionTimeSeconds: 5)","State":"closed","Body":"Opened on behalf of @wfurt\n\nThe test `System.Security.Tests.SecureStringTests/ThreadSafe_Stress(executionTimeSeconds: 5)` has failed.\n\nFailure Message:\n```\nSystem.AggregateException : One or more errors occurred. (The output byte buffer is too small to contain the encoded data, encoding 'Unicode (UTF-8)' fallback 'System.Text.EncoderReplacementFallback'.\nParameter name: bytes) (The output byte buffer is too small to contain the encoded data, encoding 'Unicode (UTF-8)' fallback 'System.Text.EncoderReplacementFallback'.\nParameter name: bytes)\n---- System.ArgumentException : The output byte buffer is too small to contain the encoded data, encoding 'Unicode (UTF-8)' fallback 'System.Text.EncoderReplacementFallback'.\nParameter name: bytes\n---- System.ArgumentException : The output byte buffer is too small to contain the encoded data, encoding 'Unicode (UTF-8)' fallback 'System.Text.EncoderReplacementFallback'.\nParameter name: bytes\n```\n\nStack Trace:\n```\n   at System.Threading.Tasks.Task.WaitAllCore(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 4815\n   at System.Security.Tests.SecureStringTests.ThreadSafe_Stress(Int32 executionTimeSeconds)\n----- Inner Stack Trace #1 (System.ArgumentException) -----\n   at System.Text.Encoding.ThrowBytesOverflow() in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.cs:line 1188\n   at System.Text.Encoding.ThrowBytesOverflow(EncoderNLS encoder, Boolean nothingEncoded) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.cs:line 1204\n   at System.Text.Encoding.GetBytesWithFallback(ReadOnlySpan`1 chars, Int32 originalCharsLength, Span`1 bytes, Int32 originalBytesLength, EncoderNLS encoder) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.Internal.cs:line 689\n   at System.Text.Encoding.GetBytesWithFallback(Char* pOriginalChars, Int32 originalCharCount, Byte* pOriginalBytes, Int32 originalByteCount, Int32 charsConsumedSoFar, Int32 bytesWrittenSoFar) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.Internal.cs:line 499\n   at System.Text.UTF8Encoding.GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/UTF8Encoding.cs:line 368\n   at System.Security.SecureString.MarshalToStringCore(Boolean globalAlloc, Boolean unicode) in /__w/1/s/src/System.Private.CoreLib/shared/System/Security/SecureString.Unix.cs:line 206\n   at System.Security.SecureString.MarshalToString(Boolean globalAlloc, Boolean unicode) in /__w/1/s/src/System.Private.CoreLib/shared/System/Security/SecureString.cs:line 182\n   at System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(SecureString s) in /__w/1/s/src/System.Private.CoreLib/shared/System/Runtime/InteropServices/Marshal.cs:line 637\n   at System.Security.Tests.SecureStringTests.<>c__DisplayClass22_1.<ThreadSafe_Stress>b__1() in /__w/1/s/src/System.Security.SecureString/tests/SecureStringTests.cs:line 490\n   at System.Threading.Tasks.Task.InnerInvoke() in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2463\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2442\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 289\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 314\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2403\n----- Inner Stack Trace #2 (System.ArgumentException) -----\n   at System.Text.Encoding.ThrowBytesOverflow() in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.cs:line 1188\n   at System.Text.Encoding.ThrowBytesOverflow(EncoderNLS encoder, Boolean nothingEncoded) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.cs:line 1204\n   at System.Text.Encoding.GetBytesWithFallback(ReadOnlySpan`1 chars, Int32 originalCharsLength, Span`1 bytes, Int32 originalBytesLength, EncoderNLS encoder) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.Internal.cs:line 588\n   at System.Text.Encoding.GetBytesWithFallback(Char* pOriginalChars, Int32 originalCharCount, Byte* pOriginalBytes, Int32 originalByteCount, Int32 charsConsumedSoFar, Int32 bytesWrittenSoFar) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/Encoding.Internal.cs:line 499\n   at System.Text.UTF8Encoding.GetBytes(Char* chars, Int32 charCount, Byte* bytes, Int32 byteCount) in /__w/1/s/src/System.Private.CoreLib/shared/System/Text/UTF8Encoding.cs:line 363\n   at System.Security.SecureString.MarshalToStringCore(Boolean globalAlloc, Boolean unicode) in /__w/1/s/src/System.Private.CoreLib/shared/System/Security/SecureString.Unix.cs:line 230\n   at System.Security.SecureString.MarshalToString(Boolean globalAlloc, Boolean unicode) in /__w/1/s/src/System.Private.CoreLib/shared/System/Security/SecureString.cs:line 184\n   at System.Security.Tests.SecureStringTests.<>c__DisplayClass22_1.<ThreadSafe_Stress>b__1() in /__w/1/s/src/System.Security.SecureString/tests/SecureStringTests.cs:line 496\n   at System.Threading.Tasks.Task.InnerInvoke() in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2463\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2442\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 289\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 314\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /__w/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2403\n```\n\nBuild : 3.0 - 20190415.9 (Core Tests)\nFailing configurations:\n- Fedora.29.Amd64-x64\n  - Release\n- Fedora.28.Amd64-x64\n  - Release\n- SLES.12.Amd64-x64\n  - Release\n- OpenSuse.42.Amd64-x64\n  - Release\n- Ubuntu.1810.Amd64-x64\n  - Release\n- Ubuntu.1604.Amd64-x64\n  - Release\n- Debian.9.Amd64-x64\n  - Release\n- Debian.8.Amd64-x64\n  - Release\n- Alpine.38.Amd64-x64\n  - Release\n- OSX.1013.Amd64-x64\n  - Release\n","Url":"https://github.com/dotnet/corefx/issues/36910","RelatedDescription":"Closed issue \"Test failure: System.Security.Tests.SecureStringTests/ThreadSafe_Stress(executionTimeSeconds: 5)\" (#36910)"},{"Id":"433544102","IsPullRequest":true,"CreatedAt":"2019-04-16T03:56:56","Actor":"Dotnet-GitSync-Bot","Number":"36909","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corefx/pull/36909","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36909)"},{"Id":"433571149","IsPullRequest":true,"CreatedAt":"2019-04-16T03:48:22","Actor":"bbartels","Number":"36912","RawContent":null,"Title":"Removed heap allocations from OdbcDataReader","State":"open","Body":"Removed allocations from when data is being parsed into managed structures within the ODBCDataReader.\r\n\r\n|       Method  | MeanCurr  | MeanNew   | AllocCurr   |   AllocNew  |  AllocDiff  |\r\n|-------------- |---------:|---------:|-----------:|-----------:|-----------:|\r\n| GetDateTime() | 48.18 ms  | 48.39 ms  |  862.66 KB  |  470.59 KB  |    - 45.45%  |\r\n| GetString()   | 63.45 ms  | 63.51 ms  |  1333.2 KB  |  941.13 KB  |    - 29.4%  |\r\n| GetDecimal()  | 80.82 ms  | 80.38 ms  | 2117.38 KB  | 1725.31 KB  |    - 18.5%  |\r\n\r\n<p align=\"center\">\r\n  [Benchmarking results of iterating through 10000 rows in a MariaDB database]\r\n</p>\r\n\r\nNotes:\r\n1. This does use an unsafe an code block to copy from the IntPtr into the Span, as there is no other way of doing this.\r\nRelated issue: https://github.com/dotnet/corefx/issues/18946\r\n\r\n2. There are two unused internal methods in DbBuffer.cs, I marked them with a comment, in case they should be removed.\r\n\r\n3. Furthermore, the new Read/Write-Numeric implementation is not quite optimal yet, as there is no way for one to create/read a decimal from/into a Span\\<byte\\>. Though I am not quite sure if it is used at all, as GetDecimal() does not seem to rely on that function.\r\nRelated issue: https://github.com/dotnet/corefx/issues/35877","Url":"https://github.com/dotnet/corefx/pull/36912","RelatedDescription":"Open PR \"Removed heap allocations from OdbcDataReader\" (#36912)"},{"Id":"433562951","IsPullRequest":true,"CreatedAt":"2019-04-16T03:06:21","Actor":"dotnet-maestro[bot]","Number":"36911","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190415.73\r\n- **Date Produced**: 4/16/2019 3:03 AM\r\n- **Commit**: 9562c551f391635ce81869aabc84f894c2846be8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview4-27615-73\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview4-27615-73\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview4-27615-73\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36911","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#36911)"},{"Id":"433538984","IsPullRequest":true,"CreatedAt":"2019-04-16T01:05:40","Actor":"wfurt","Number":"36908","RawContent":null,"Title":"handle bad Expires better","State":"open","Body":"fixes #31918\r\n\r\nThis is attempt to improve handling of Expire header.\r\nBased on the discussion, -1 and 0 will now  return DateTimeOffset.MinValue as representation of \"same time in back\" instead of null. I also added test to verify that if header is missing we still return null; \r\n\r\nSecond part of this change will treat al derived classes  as Custom.  That seems to be fine as we always set types when used internally. I added test case for scenario described by @stephentoub \r\n","Url":"https://github.com/dotnet/corefx/pull/36908","RelatedDescription":"Open PR \"handle bad Expires better\" (#36908)"},{"Id":"433534513","IsPullRequest":true,"CreatedAt":"2019-04-16T00:51:01","Actor":"Dotnet-GitSync-Bot","Number":"36907","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/36907","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36907)"},{"Id":"433523355","IsPullRequest":true,"CreatedAt":"2019-04-16T00:24:32","Actor":"Dotnet-GitSync-Bot","Number":"36905","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corefx/pull/36905","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36905)"},{"Id":"433528489","IsPullRequest":true,"CreatedAt":"2019-04-16T00:10:21","Actor":"ericstj","Number":"36906","RawContent":null,"Title":"Add System.Resources.Binary.Reader|Writer","State":"open","Body":"This adds a new pair of IResourceWriter & IResourceReader named BinaryResourceWriter and BinaryResourceReader.\r\n\r\nThe primary difference between these and the base reader/writer is that they support more formats for pre-serialized data.  The benefit of using pre-serialized data is that we don't need to create live-objects during the resource writing phase.  This will enable us to fix https://github.com/Microsoft/msbuild/issues/2221 in a source comaptible way.\r\n\r\nMSBuild will adopt the new BinaryResourceWriter to pass through resource data from resx directly to resources, rather than reading the resx, creating live objects, and directly serializing those.\r\n\r\nThe Writer is designed in such a way that it only requires the new reader when any of the new-pass-through formats are used.  Otherwise it will write the .resources in a format that is compatible with the existing built-in ResourceReader.\r\n\r\nThe writer must target `netstandard` so that it can be used by MSBuild when building from visual studio.  The reader targets `netstandard` so that it other frameworks might benefit from this improved resource build process, but it is a secondary requirement.\r\n\r\nSince these new types are largely just an extension of the existing ResourceWriter and ResourceReader functionality I unsealed the base types and added the minimal amount of virtuals to enable this.  To benefit from the same code-sharing I made the `netstandard` implementation carry a copy of the base ResourceReader and ResourceWriter types.  I have hidden this derivation from the reference assemblies since it cannot be made universally (types are sealed in `netstandard2.0`) and it's not particularly useful as an \"is a\" relationship.\r\n\r\nI did investigate trying to implement this functionality by wrapping the existing ResourceReader/ResourceWriter types (and wrapping their format) but I couldn't do so cleanly without duplicating a resourceId to type-table map in the outer format.  This would bloat the resources considerably and add quite a lot of complexity, so I avoided it.\r\n\r\nThis is currently in draft.  I'd like feedback on the names and the strategy.  @stephentoub @jkotas @tarekgh @rainersigwald @nguerrera ","Url":"https://github.com/dotnet/corefx/pull/36906","RelatedDescription":"Open PR \"Add System.Resources.Binary.Reader|Writer\" (#36906)"},{"Id":"433521174","IsPullRequest":true,"CreatedAt":"2019-04-15T23:41:43","Actor":"Dotnet-GitSync-Bot","Number":"36904","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/36904","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36904)"},{"Id":"433516488","IsPullRequest":true,"CreatedAt":"2019-04-15T23:14:02","Actor":"GrabYourPitchforks","Number":"36903","RawContent":null,"Title":"Add extra tests for UTF-16 validation of random 8-char data","State":"open","Body":"Corresponding unit tests for https://github.com/dotnet/corefx/issues/36870. Will fail CI until https://github.com/dotnet/coreclr/pull/24015 makes its way over to corefx.","Url":"https://github.com/dotnet/corefx/pull/36903","RelatedDescription":"Open PR \"Add extra tests for UTF-16 validation of random 8-char data\" (#36903)"},{"Id":"433507556","IsPullRequest":false,"CreatedAt":"2019-04-15T22:38:09","Actor":"joshfree","Number":"36902","RawContent":null,"Title":"Windows Compat Pack - unable to find a stable System.Data.SqlClient >= 4.6.1","State":"open","Body":"Creating issue for multiple customer reported issues:\r\n\r\n_User grant <grantwinney@protonmail.com> sends the following message to the owners of Package 'Microsoft.Windows.Compatibility 2.1.0'._\r\n\r\n> Every time I try to upgrade my .NET Standard library from v2.0.1 to v.2.1.0 I get the following error and it rolls back to 2.0.1:\r\n> **NU1103: Unable to find a stable package System.Data.SqlClient with version (>= 4.6.1)**\r\n> •\tFound 32 version(s) in nuget.org [ Nearest version: 4.7.0-preview.18571.3 ]\r\n> •\tFound 2 version(s) in Microsoft Visual Studio Offline Packages [ Nearest version: 4.1.0 ] Package restore failed. Rolling back package changes for 'Logger'.\r\n> Is this new version dependent on System.Data.SqlClient for some reason? I don't use it in my application, and don't have a dependency on it.\r\n\r\n\r\n_User arbor <info@nlundberg.se> sends the following message to the owners of Package 'Microsoft.Windows.Compatibility 2.1.0'._\r\n\r\n> **NuGet package Microsoft.Windows.Compatibility version 2.1.0 released to NuGet has a dependency to System.Data.SqlClient >= 4.6.1 that is not on NuGet**.\r\n\r\n_User dwn <diwendt@microsoft.com> sends the following message to the owners of Package 'Microsoft.Windows.Compatibility 2.1.0'._\r\n\r\n> 2.1.0 breaks installation of this package:\r\n> Severity Code Description Project File Line Suppression State Error NU1103 **Unable to find a stable package System.Data.SqlClient with version (>= 4.6.1)**\r\n> •\tFound 1272 version(s) in https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json [ Nearest version: 4.7.0-alphautf8string.18530.6 ]\r\n> •\tFound 32 version(s) in nuget.org [ Nearest version: 4.7.0-preview.18571.3 ]\r\n> •\tFound 0 version(s) in Microsoft Visual Studio Offline Packages\r\n> •\tFound 0 version(s) in https://dotnetfeed.blob.core.windows.net/aspnet-aspnetcore-tooling/index.json\r\n> •\tFound 0 version(s) in https://dotnetfeed.blob.core.windows.net/aspnet-aspnetcore/index.json\r\n> •\tFound 0 version(s) in https://dotnetfeed.blob.core.windows.net/aspnet-entityframeworkcore/index.json\r\n> •\tFound 0 version(s) in https://dotnetfeed.blob.core.windows.net/aspnet-extensions/index.json\r\n> •\tFound 0 version(s) in https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/index.json\r\n> •\tFound 0 version(s) in secassure dotnetcoretest E:\\code\\dotnetcoretest\\dotnetcoretest.csproj 1\r\n","Url":"https://github.com/dotnet/corefx/issues/36902","RelatedDescription":"Open issue \"Windows Compat Pack - unable to find a stable System.Data.SqlClient >= 4.6.1\" (#36902)"},{"Id":"433505855","IsPullRequest":false,"CreatedAt":"2019-04-15T22:31:43","Actor":"BrennanConroy","Number":"36901","RawContent":null,"Title":"Parsing empty array to string results in null and not an exception","State":"open","Body":"```c#\r\nvar json = \"[]\";\r\nvar output = JsonSerializer.Parse<string>(json); // should throw\r\n// output == null here\r\n```\r\n\r\ncc @steveharter ","Url":"https://github.com/dotnet/corefx/issues/36901","RelatedDescription":"Open issue \"Parsing empty array to string results in null and not an exception\" (#36901)"},{"Id":"433403371","IsPullRequest":true,"CreatedAt":"2019-04-15T21:44:05","Actor":"steveharter","Number":"36890","RawContent":null,"Title":"Remove null coalescing assignment operator to avoid build-from-source errors","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/36890","RelatedDescription":"Closed or merged PR \"Remove null coalescing assignment operator to avoid build-from-source errors\" (#36890)"},{"Id":"433468717","IsPullRequest":false,"CreatedAt":"2019-04-15T21:17:20","Actor":"Wraith2","Number":"36899","RawContent":null,"Title":"SqlClient: calling a function that does nothing hangs manual test, why?","State":"closed","Body":"I've been profiling SqlClient and I started to look into the [TdsParserStateObject.StateSnapshot](https://github.com/dotnet/corefx/blob/6bfaf4116b5180c857bf6ad531f0655fd57c5eef/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs#L3839) class which is used when async methods are called. If you do a lot of async you'll end up creating and dropping a lot of these so I want to try keeping one around to reuse. It should be a really trivial thing to do but I've hit a really weird behaviour I can't explain. \r\n\r\nSetup to run the tests is simple, you need an sql server database somewhere with northwind and to create a valid connection string to it. Bring up your corefx dev prompt and use these commands (swapping in your own connection string)\r\n\r\n```\r\nset TEST_NP_CONN_STR=Data Source=(local);Initial Catalog=Northwind;Trusted_Connection=true;Connect Timeout=10\r\nset TEST_TCP_CONN_STR=Data Source=(local);Initial Catalog=Northwind;Trusted_Connection=true;Connect Timeout=10\r\nset TEST_INTEGRATEDSECURITY_SETUP=1\r\n\r\nbuild src\\System.Data.SqlClient -c Debug && dotnet msbuild .\\src\\System.Data.SqlClient\\tests\\ManualTests /t:RebuildAndTest  /p:XunitMethodName=System.Data.SqlClient.ManualTesting.Tests.DataStreamTest.RunAllTestsForSingleServer_TCP\r\n```\r\nit'll take a few seconds but it will compile test and pass.\r\n\r\nNow, in the StateSnapshot class add a new instace method `internal void DoNothing() { }` and then when the snapshot is released:\r\nhttps://github.com/dotnet/corefx/blob/6bfaf4116b5180c857bf6ad531f0655fd57c5eef/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs#L2001-L2005 \r\nadd in a call to `_snapshot.DoNothing();` before it's nulled. Rerun the test and it should now hang and keep waiting as a long running test that you'll have to ctrl+c out of.\r\n\r\nThe problem is in the ReadStream test which is validating that if you have a long running connection and try to start new async functions that they're correctly throwing errors, and those parts of the test work just fine. What happens is that the [`t.Wait();`](https://github.com/dotnet/corefx/blob/6bfaf4116b5180c857bf6ad531f0655fd57c5eef/src/System.Data.SqlClient/tests/ManualTests/SQL/DataStreamTest/DataStreamTest.cs#L1465) doesn't come back.\r\n\r\nWhy? calling any instance methods on other objects seems to work fine, calling static methods works. I've put in debug writes and thread sleeps calls to various other objects that all work ok. Calling an instance method on the snapshot causes the hang. I can take a ref, null the original, pass that ref to a new function and still it'll cause the hang. How can a method which literally does nothing cause this behaviour? And how do I stop it?\r\n\r\n/cc all the usual sqlclient people @afsanehr, @tarikulsabbir, @Gary-Zh , @david-engel @saurabh500 ","Url":"https://github.com/dotnet/corefx/issues/36899","RelatedDescription":"Closed issue \"SqlClient: calling a function that does nothing hangs manual test, why?\" (#36899)"},{"Id":"433445815","IsPullRequest":true,"CreatedAt":"2019-04-15T20:30:13","Actor":"dotnet-maestro-bot","Number":"36895","RawContent":null,"Title":"Update BuildTools to preview1-03915-02 (release/2.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/36895","RelatedDescription":"Closed or merged PR \"Update BuildTools to preview1-03915-02 (release/2.2)\" (#36895)"},{"Id":"433442571","IsPullRequest":true,"CreatedAt":"2019-04-15T20:30:00","Actor":"dotnet-maestro-bot","Number":"36894","RawContent":null,"Title":"Update BuildTools to rc1-03915-01 (release/2.1)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/36894","RelatedDescription":"Closed or merged PR \"Update BuildTools to rc1-03915-01 (release/2.1)\" (#36894)"},{"Id":"433455895","IsPullRequest":true,"CreatedAt":"2019-04-15T20:06:21","Actor":"wfurt","Number":"36898","RawContent":null,"Title":"add tests for invalid HTTP headers","State":"open","Body":"closes #35165\r\n\r\nThis is missing test for invalid values in headers in HTTP/2. \r\n\r\nHowever this uncovered few new issues in product as wee:\r\n- duplicate AddStream() in SendHeadersAsync(). Probably bad merge.\r\n- When we throw in SendHeadersAsync(), we also need to call RemoveStream() to complement AddStream() from top. Calling Dispose on stream is not sufficient. \r\n\r\n\r\nThere are few other changes to make test more reasonable. Now we can catch IOException() when client fails instead of getting generic exception or failing on Null deference. ","Url":"https://github.com/dotnet/corefx/pull/36898","RelatedDescription":"Open PR \"add tests for invalid HTTP headers\" (#36898)"},{"Id":"433455374","IsPullRequest":false,"CreatedAt":"2019-04-15T20:04:59","Actor":"JeremyKuhne","Number":"36897","RawContent":null,"Title":"API proposal: Add AppContext.ApplicationConfig","State":"open","Body":"While `app.config` isn't the way we configure Core, plenty of ported libraries still use `System.Configuration`. We don't expose `ConfigurationFile` on `AppDomainSetup` any more and we hack it's path directly in `System.Configuration`.\r\n\r\nA common pattern, particularly for testing frameworks, is to fire up a new `AppDomain` with a custom config file. As we only have a single `AppDomain` on Core this isn't possible and is creating some serious pain in porting larger more complicated projects. We can provide the customization at the hosting level by exposing a property like `APP_CONTEXT_CONFIGURATION_FILE` much like we do `APP_CONTEXT_BASE_DIRECTORY`.\r\n\r\n``` C#\r\npublic static partial class AppContext\r\n{\r\n    // Populated with \"APP_CONTEXT_CONFIGURATION_FILE\" much like \"APP_CONTEXT_BASE_DIRECTORY\"\r\n    public static ConfigurationFile { get; }\r\n}\r\n\r\npublic static partial class AppDomainSetup\r\n{\r\n    // This API exists on NetFX\r\n    public static ConfigurationFile { get; set; } // AppContext.ConfigurationFile by default.\r\n}\r\n```\r\n\r\nSee #32095 and linked issues for more.","Url":"https://github.com/dotnet/corefx/issues/36897","RelatedDescription":"Open issue \"API proposal: Add AppContext.ApplicationConfig\" (#36897)"},{"Id":"433450881","IsPullRequest":false,"CreatedAt":"2019-04-15T19:52:41","Actor":"Tratcher","Number":"36896","RawContent":null,"Title":"Expose a high level NTAuth Negotiate API","State":"open","Body":"Please expose a high level API for managing Negotiate/NTLM/Kerberos authentication handshakes. This is not the same as https://github.com/dotnet/corefx/issues/32291, which wants a low level Kerberos specific API.\r\n\r\nThere is an internal API today called [NTAuthentication](https://github.com/dotnet/corefx/blob/6bfaf4116b5180c857bf6ad531f0655fd57c5eef/src/Common/src/System/Net/NTAuthentication.Common.cs#L169) that is used by HttpClient, HttpListener, and NegotiateStream to exchange opaque auth blobs, negotiate the authentication protocol, and identify the client to the server. ASP.NET Core also wants to [expose](https://github.com/aspnet/AspNetCore/issues/8897) this functionality for our cross platform server Kestrel. It could use the same NTAuthentication APIs and handle the HTTP aspect itself.\r\n\r\nThis is related to https://github.com/dotnet/corefx/issues/8221 for cross platform server support.\r\n\r\nI'll follow up with a specific API proposal.","Url":"https://github.com/dotnet/corefx/issues/36896","RelatedDescription":"Open issue \"Expose a high level NTAuth Negotiate API\" (#36896)"},{"Id":"433383251","IsPullRequest":true,"CreatedAt":"2019-04-15T19:10:56","Actor":"christothes","Number":"36888","RawContent":null,"Title":"Implement Trace.TraceCritical","State":"closed","Body":"Exposes the static method TraceCritical so that callers can easily trace at the critical TrraceEventType","Url":"https://github.com/dotnet/corefx/pull/36888","RelatedDescription":"Closed or merged PR \"Implement Trace.TraceCritical\" (#36888)"},{"Id":"433426059","IsPullRequest":false,"CreatedAt":"2019-04-15T19:07:20","Actor":"NinoFloris","Number":"36892","RawContent":null,"Title":"Why is Task<T> not covariant?","State":"closed","Body":"Does anybody have some history as to why this was done?\r\n\r\nmaybe @stephentoub ?","Url":"https://github.com/dotnet/corefx/issues/36892","RelatedDescription":"Closed issue \"Why is Task<T> not covariant?\" (#36892)"},{"Id":"433430039","IsPullRequest":false,"CreatedAt":"2019-04-15T19:03:42","Actor":"ViktorHofer","Number":"36893","RawContent":null,"Title":"Dependencies in unix-instructions are outdated / not resolvable","State":"closed","Body":"I just tried to follow the docs for Ubuntu 18.04 (with WSL) and couple of dependencies aren't installable anymore. We should update the docs:\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/Documentation/building/unix-instructions.md","Url":"https://github.com/dotnet/corefx/issues/36893","RelatedDescription":"Closed issue \"Dependencies in unix-instructions are outdated / not resolvable\" (#36893)"},{"Id":"433425046","IsPullRequest":true,"CreatedAt":"2019-04-15T18:43:15","Actor":"Anipik","Number":"36891","RawContent":null,"Title":"Added code for removing oleHeader","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/36439\r\nRelated test data PR https://github.com/dotnet/corefx-testdata/pull/31\r\n\r\nBefore\r\n```\r\n      System.ComponentModel.TypeConverterTests.ImageConverterTest.ImageWithOleHeader [FAIL]\r\n        System.ArgumentException : Parameter is not valid.\r\n        Stack Trace:\r\n          C:\\git\\corefx\\src\\System.Drawing.Common\\src\\System\\Drawing\\Gdiplus.cs(259,0): at System.Drawing.SafeNativeMethods.Gdip.CheckStatus(Int32 status)\r\n          C:\\git\\corefx\\src\\System.Drawing.Common\\src\\System\\Drawing\\Image.Windows.cs(67,0): at System.Drawing.Image.FromStream(Stream stream, Boolean useEmbeddedColorManagement, Boolean validateImageData)\r\n          C:\\git\\corefx\\src\\System.Drawing.Common\\src\\System\\Drawing\\Image.cs(107,0): at System.Drawing.Image.FromStream(Stream stream, Boolean useEmbeddedColorManagement)\r\n          C:\\git\\corefx\\src\\System.Drawing.Common\\src\\System\\Drawing\\Image.cs(105,0): at System.Drawing.Image.FromStream(Stream stream)\r\n          C:\\git\\corefx\\src\\System.Windows.Extensions\\src\\System\\Drawing\\ImageConverter.cs(32,0): at System.Drawing.ImageConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object value)\r\n          C:\\git\\corefx\\src\\System.ComponentModel.TypeConverter\\src\\System\\ComponentModel\\TypeConverter.cs(48,0): at System.ComponentModel.TypeConverter.ConvertFrom(Object value)\r\n          C:\\git\\corefx\\src\\System.Windows.Extensions\\tests\\System\\Drawing\\ImageConverterTests.cs(46,0): at System.ComponentModel.TypeConverterTests.ImageConverterTest.ImageWithOleHeader()\r\n    Finished:    System.Windows.Extensions.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.Windows.Extensions.Tests  Total: 81, Errors: 0, Failed: 1, Skipped: 2, Time: 0.421s\r\n```\r\n\r\nAfter\r\n```\r\n    Discovering: System.Windows.Extensions.Tests (method display = ClassAndMethod, method display options = None)\r\n    Discovered:  System.Windows.Extensions.Tests (found 65 of 76 test cases)\r\n    Starting:    System.Windows.Extensions.Tests (parallel test collections = on, max threads = 12)\r\n      System.Security.Cryptography.X509Certificates.Tests.X509Certificate2UIManualTests.DisplayCertificateTest [SKIP]\r\n        Condition(s) not met: \"ManualTestsEnabled\"\r\n      System.Security.Cryptography.X509Certificates.Tests.X509Certificate2UIManualTests.SelectCertificateSingleSelectionTest [SKIP]\r\n        Condition(s) not met: \"ManualTestsEnabled\"\r\n    Finished:    System.Windows.Extensions.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.Windows.Extensions.Tests  Total: 81, Errors: 0, Failed: 0, Skipped: 2, Time: 0.356s\r\n  ----- end 11:38:26.31 ----- exit code 0 ---------------------------------------------------------\r\n```\r\n\r\n\r\ncode taken from https://referencesource.microsoft.com/#System.Drawing/commonui/System/Drawing/ImageConverter.cs,181","Url":"https://github.com/dotnet/corefx/pull/36891","RelatedDescription":"Open PR \"Added code for removing oleHeader\" (#36891)"},{"Id":"433373592","IsPullRequest":true,"CreatedAt":"2019-04-15T17:55:43","Actor":"safern","Number":"36886","RawContent":null,"Title":"Remove myget publish entirely","State":"closed","Body":"Fixes: https://github.com/dotnet/corefx/issues/36860","Url":"https://github.com/dotnet/corefx/pull/36886","RelatedDescription":"Closed or merged PR \"Remove myget publish entirely\" (#36886)"},{"Id":"433384837","IsPullRequest":false,"CreatedAt":"2019-04-15T16:57:05","Actor":"steveharter","Number":"36889","RawContent":null,"Title":"Add unlimited support for nested arrays to Json deserializer","State":"open","Body":"Currently the deserializer does not support enumerables or jagged arrays greater than two dimension such as int[][][] being returned directly from a Parse() method. For enumerable properties on an object, that restriction is one dimension less: only a single level is supported: e.g. int[] or List<> and not int[][] or List<List<>>\r\n\r\nThese current limitations only apply to deserialization, not serialization.\r\n\r\nExpect that there is no limit to the nesting of arrays or enumerables from the root or as properties on an object.\r\n\r\ncc @layomia","Url":"https://github.com/dotnet/corefx/issues/36889","RelatedDescription":"Open issue \"Add unlimited support for nested arrays to Json deserializer\" (#36889)"},{"Id":"433352677","IsPullRequest":true,"CreatedAt":"2019-04-15T16:46:19","Actor":"filipnavara","Number":"36883","RawContent":null,"Title":"System.IO.Tests: Add guard for runtimes that support large arrays","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/36883","RelatedDescription":"Closed or merged PR \"System.IO.Tests: Add guard for runtimes that support large arrays\" (#36883)"},{"Id":"433379356","IsPullRequest":false,"CreatedAt":"2019-04-15T16:43:18","Actor":"filipnavara","Number":"36887","RawContent":null,"Title":"Tests for float- and double- backed Enums","State":"open","Body":"There are numerous test for `Enum` types backed by `float` or `double` in [EnumTests.cs](https://github.com/dotnet/corefx/blob/10d7d6f812295a572eb148aedb19efd2f96fbe17/src/System.Runtime/tests/System/EnumTests.cs) and [EnumTests.netcoreapp.cs](https://github.com/dotnet/corefx/blob/10d7d6f812295a572eb148aedb19efd2f96fbe17/src/System.Runtime/tests/System/EnumTests.netcoreapp.cs).\r\n\r\nThe ECMA specification doesn't allow these `Enum` types:\r\n\r\n> The symbols of an enum are represented by an underlying integer type: one of { bool, char, int8, unsigned int8, int16, unsigned int16, int32, unsigned int32, int64, unsigned int64, native int, unsigned native int }\r\n\r\n([ECMA CLR standard](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf), §II.14.3)\r\n\r\nMoreover, in many cases the tests actually expect a broken behaviour like incorrect parsing of values or `Enum.GetNames`/`Enum.GetValues` not returning results sorted by the values:\r\n\r\nhttps://github.com/dotnet/corefx/blob/10d7d6f812295a572eb148aedb19efd2f96fbe17/src/System.Runtime/tests/System/EnumTests.cs#L90-L96\r\n\r\nI believe these tests should be removed, CoreCLR should not allow float- and double- backed enums and there should be test verifying that such enums cannot be created.\r\n\r\n/cc @jkotas \r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36887","RelatedDescription":"Open issue \"Tests for float- and double- backed Enums\" (#36887)"},{"Id":"433368562","IsPullRequest":false,"CreatedAt":"2019-04-15T16:17:01","Actor":"filipnavara","Number":"36885","RawContent":null,"Title":"Question: Behaviour of ThreadPool.SetMaxThreads(-1, -1)","State":"open","Body":"There's a unit test for `ThreadPool.SetMaxThreads(-1, -1)` which expects it to succeed:\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Threading.ThreadPool/tests/ThreadPoolTests.cs#L117\r\n\r\nAs far as I can tell this is undocumented behaviour. It seems to work in CoreCLR only because the managed prototype for `SetMaxThreadsNative` uses `int` as data type for the parameters, while the unmanaged prototype uses `DWORD`:\r\n\r\nhttps://github.com/dotnet/coreclr/blob/de68c9ddd18f863fd67098ab28d19206c9c66627/src/System.Private.CoreLib/src/System/Threading/ThreadPool.CoreCLR.cs#L300-L301\r\nhttps://github.com/dotnet/coreclr/blob/d3e39bc2f81e3dbf9e4b96347f62b49d8700336c/src/vm/comthreadpool.cpp#L127\r\n\r\nIs this quirk something that is supposed to be supported and tested? It seems rather non-obvious why is it tested and what is the expected behaviour.\r\n\r\n/cc @jkotas @kouvel ","Url":"https://github.com/dotnet/corefx/issues/36885","RelatedDescription":"Open issue \"Question: Behaviour of ThreadPool.SetMaxThreads(-1, -1)\" (#36885)"},{"Id":"433368368","IsPullRequest":true,"CreatedAt":"2019-04-15T16:16:33","Actor":"wfurt","Number":"36884","RawContent":null,"Title":"add support for 100-continue for H/2","State":"open","Body":"fixes #31312 \r\nThis changes adds logic to process Expect: 100-continue request header and 10x responses.","Url":"https://github.com/dotnet/corefx/pull/36884","RelatedDescription":"Open PR \"add support for 100-continue for H/2\" (#36884)"},{"Id":"433328099","IsPullRequest":false,"CreatedAt":"2019-04-15T14:54:55","Actor":"87Alex","Number":"36882","RawContent":null,"Title":"The Reader and Table fields are missed in the System.Resources.ResourceSet class","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Have you experienced this same bug with .NET Framework?: Yes/No\r\n->No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\nThe Reader and Table fields are not available in the System.Resources.ResourceSet class descendant.\r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nThe Reader and Table fields are missed in the System.Resources.ResourceSet class.\r\n\r\n**Expected behavior:**\r\nThe Reader and Table protected fields are available in the System.Resources.ResourceSet class as with .NET Framework.\r\n\r\n**Minimal repro:**\r\n[ConsoleApp1.zip](https://github.com/dotnet/corefx/files/3080668/ConsoleApp1.zip)","Url":"https://github.com/dotnet/corefx/issues/36882","RelatedDescription":"Open issue \"The Reader and Table fields are missed in the System.Resources.ResourceSet class\" (#36882)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"433584950","IsPullRequest":false,"CreatedAt":"2019-04-16T05:03:02","Actor":"vatsalyaagrawal","Number":"35002","RawContent":null,"Title":"\"Replace method with property\" replaces non-invoked method with property","State":"open","Body":"16.0.1\r\n\r\nOriginal code:\r\n\r\n```\r\ndelegate int Mdelegate();\r\n\r\nclass C\r\n{\r\n    int GetP() => 0;\r\n\r\n    void M()\r\n    {\r\n        Mdelegate del = new Mdelegate(GetP);\r\n    }\r\n}\r\n```\r\n\r\nUse Replace 'GetP' with property refactoring.\r\n\r\nRefactored Code:\r\n\r\n```\r\ndelegate int Mdelegate();\r\n\r\nclass C\r\n{\r\n    int P => 0;\r\n\r\n    void M()\r\n    {\r\n        Mdelegate del = new Mdelegate(P);\r\n    }\r\n}\r\n```\r\n\r\nNote that refactored code will not compile as a property can not be used in place of a method in the delegate.","Url":"https://github.com/dotnet/roslyn/issues/35002","RelatedDescription":"Open issue \"\"Replace method with property\" replaces non-invoked method with property\" (#35002)"},{"Id":"432861340","IsPullRequest":false,"CreatedAt":"2019-04-16T02:25:13","Actor":"stephentoub","Number":"34976","RawContent":null,"Title":"Nullable warning for cast through object?","State":"closed","Body":"Version used:\r\nToday's master\r\n\r\nRepro:\r\n```C#\r\n#nullable enable\r\nusing System;\r\nclass Program\r\n{\r\n    public static void Main()\r\n    {\r\n        bool b1 = true;\r\n        bool b2 = (bool)(object?)b1; // CS8605: Unboxing a possibly null value\r\n        Console.WriteLine(b2);\r\n    }\r\n}\r\n```\r\n\r\ncc: @dotnet/nullablefc","Url":"https://github.com/dotnet/roslyn/issues/34976","RelatedDescription":"Closed issue \"Nullable warning for cast through object?\" (#34976)"},{"Id":"433550569","IsPullRequest":true,"CreatedAt":"2019-04-16T02:06:05","Actor":"gafter","Number":"35001","RawContent":null,"Title":"Error for `typeof(T?)` when `T` is a reference type","State":"open","Body":"Fixes #29894","Url":"https://github.com/dotnet/roslyn/pull/35001","RelatedDescription":"Open PR \"Error for `typeof(T?)` when `T` is a reference type\" (#35001)"},{"Id":"433545307","IsPullRequest":false,"CreatedAt":"2019-04-16T01:39:50","Actor":"vsfeedback","Number":"35000","RawContent":null,"Title":"Collapse section hotkey collapses entire region if method signature has newlines","State":"open","Body":"VSF_TYPE_MARKDOWNUsing the &quot;Ctrl+M, M&quot; Hotkey, if the caret is on method Foo it will correctly collapse the selection. But with the caret on method Bar it will collapse the entire region.\n```\n# region MyRegion\npublic void Foo(int param1, int param2) \n{\n    string foo = &quot;foo&quot;;\n}\n\npublic void Bar(\n    int param1,\n    int param2)\n{\n    string bar = &quot;bar&quot;;\n} \n\n#endregion\n```\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/532398/collapse-section-hotkey-collapses-entire-region-if.html\nVSTS ticketId: 847516_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/15/2019, 02:44 AM (15 hours ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35000","RelatedDescription":"Open issue \"Collapse section hotkey collapses entire region if method signature has newlines\" (#35000)"},{"Id":"433526545","IsPullRequest":true,"CreatedAt":"2019-04-16T00:00:44","Actor":"dotnet-bot","Number":"34999","RawContent":null,"Title":"Merge master to features/lspSupport","State":"open","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34999","RelatedDescription":"Open PR \"Merge master to features/lspSupport\" (#34999)"},{"Id":"433526519","IsPullRequest":true,"CreatedAt":"2019-04-16T00:00:37","Actor":"dotnet-bot","Number":"34998","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34998","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#34998)"},{"Id":"433526384","IsPullRequest":true,"CreatedAt":"2019-04-15T23:59:58","Actor":"vatsalyaagrawal","Number":"34997","RawContent":null,"Title":"Bugfix fix: \"Replace method with property\" removes a space","State":"open","Body":"Git Issue: https://github.com/dotnet/roslyn/issues/31830\r\n\r\nIssue: Trivia after the bracket was not being considered as part of the rewrite.\r\n\r\nSolution: Updated code to consider trivia after the bracket to be the trailing trivia.\r\n\r\nTesting:\r\n- Tested with different trivia: spaces, tabs, comments.\r\n- Added new unit test\r\n- Ran all relevant unit tests","Url":"https://github.com/dotnet/roslyn/pull/34997","RelatedDescription":"Open PR \"Bugfix fix: \"Replace method with property\" removes a space\" (#34997)"},{"Id":"433525093","IsPullRequest":true,"CreatedAt":"2019-04-15T23:53:27","Actor":"gafter","Number":"34996","RawContent":null,"Title":"Handly dynamic null checks against literal null","State":"open","Body":"Fixes #30939","Url":"https://github.com/dotnet/roslyn/pull/34996","RelatedDescription":"Open PR \"Handly dynamic null checks against literal null\" (#34996)"},{"Id":"433525042","IsPullRequest":false,"CreatedAt":"2019-04-15T23:53:15","Actor":"ivanbasov","Number":"34995","RawContent":null,"Title":"Create a context object to handle parameters passed in methods of AbstractCSharpCompletionProviderTests","State":"open","Body":"Defining the whole list of parameters at each method is inefficient: \r\n```\r\nstring code, int position,\r\n            string expectedItemOrNull, string expectedDescriptionOrNull,\r\n            SourceCodeKind sourceCodeKind, bool usePreviousCharAsTrigger, bool checkForAbsence,\r\n            int? glyph, int? matchPriority, bool? hasSuggestionItem, string displayTextSuffix)\r\n            int? glyph, int? matchPriority, bool? hasSuggestionItem, string displayTextSuffix,\r\n            List<CompletionItemFilter> matchingFilters, bool targetTypedExperimentEnabled\r\n```\r\nCorrecting the list of parameters is painful. We should create a container to store them all.","Url":"https://github.com/dotnet/roslyn/issues/34995","RelatedDescription":"Open issue \"Create a context object to handle parameters passed in methods of AbstractCSharpCompletionProviderTests\" (#34995)"},{"Id":"433520521","IsPullRequest":false,"CreatedAt":"2019-04-15T23:31:10","Actor":"tmat","Number":"34994","RawContent":null,"Title":"Make VisualStudioMefHostServices public","State":"open","Body":"This class is simple and currently needed by Live Share. Let's make it public.","Url":"https://github.com/dotnet/roslyn/issues/34994","RelatedDescription":"Open issue \"Make VisualStudioMefHostServices public\" (#34994)"},{"Id":"433515124","IsPullRequest":false,"CreatedAt":"2019-04-15T23:08:08","Actor":"333fred","Number":"34993","RawContent":null,"Title":"Verify the results of nullable analysis","State":"open","Body":"Currently, we are not running `NullableWalker.DebugVerifier` in all cases when we run the walker. We should enable this pass, and always verify the results regardless of language version. Currently, we gate it on whether or not nullable analysis should be enabled on the Compilation.","Url":"https://github.com/dotnet/roslyn/issues/34993","RelatedDescription":"Open issue \"Verify the results of nullable analysis\" (#34993)"},{"Id":"433511976","IsPullRequest":true,"CreatedAt":"2019-04-15T22:55:30","Actor":"mavasani","Number":"34992","RawContent":null,"Title":"Improve IDE0052 diagnostic message for properties with used setter bu…","State":"open","Body":"…t unused getter\r\n\r\nFixes #33994","Url":"https://github.com/dotnet/roslyn/pull/34992","RelatedDescription":"Open PR \"Improve IDE0052 diagnostic message for properties with used setter bu…\" (#34992)"},{"Id":"433502881","IsPullRequest":true,"CreatedAt":"2019-04-15T22:21:01","Actor":"mavasani","Number":"34991","RawContent":null,"Title":"Use original definition symbol for fetching control flow graph of gen…","State":"open","Body":"…eric local functions.\r\n\r\nFixes #34301","Url":"https://github.com/dotnet/roslyn/pull/34991","RelatedDescription":"Open PR \"Use original definition symbol for fetching control flow graph of gen…\" (#34991)"},{"Id":"433485909","IsPullRequest":false,"CreatedAt":"2019-04-15T21:26:50","Actor":"kendrahavens","Number":"34990","RawContent":null,"Title":"Change name 'Basic' to 'Visual Basic' in Tools Options","State":"open","Body":"I've noticed users mistaking the 'Basic' Text Editor Tools Options to mean general .NET settings as opposed to 'Visual Basic' specific settings multiple times. Can we rename this to 'Visual Basic' to reduce confusion for new users? It's also doesn't follow brand guidelines for the language.\r\n\r\n![image](https://user-images.githubusercontent.com/8293542/56166199-d0d09680-5f89-11e9-8435-57c36e586b3a.png)\r\n![image](https://user-images.githubusercontent.com/8293542/56166253-fe1d4480-5f89-11e9-9417-eda5c74fe7b8.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/34990","RelatedDescription":"Open issue \"Change name 'Basic' to 'Visual Basic' in Tools Options\" (#34990)"},{"Id":"433483410","IsPullRequest":true,"CreatedAt":"2019-04-15T21:19:39","Actor":"YairHalberstadt","Number":"34989","RawContent":null,"Title":"WIP: Implement `where T: class` and `where T: struct` for overrides and implementations","State":"open","Body":"https://github.com/dotnet/roslyn/issues/34798#issuecomment-483414230","Url":"https://github.com/dotnet/roslyn/pull/34989","RelatedDescription":"Open PR \"WIP: Implement `where T: class` and `where T: struct` for overrides and implementations\" (#34989)"},{"Id":"433468481","IsPullRequest":true,"CreatedAt":"2019-04-15T20:39:44","Actor":"ivanbasov","Number":"34988","RawContent":null,"Title":"Regex Completion + Async Completion = Failure to trigger on `[` in VB","State":"open","Body":"Fix https://github.com/dotnet/roslyn/issues/33852","Url":"https://github.com/dotnet/roslyn/pull/34988","RelatedDescription":"Open PR \"Regex Completion + Async Completion = Failure to trigger on `[` in VB\" (#34988)"},{"Id":"432908153","IsPullRequest":true,"CreatedAt":"2019-04-15T19:54:32","Actor":"agocke","Number":"34978","RawContent":null,"Title":"Fix bootstrap on Linux/Mac","State":"closed","Body":"There are two problems here: in order for the bootstrap to change from the toolset compiler to the bootstrap compiler we need to re-run restore, which doesn't happen by default, and the 'quiet restore' function seems to cause node reuse so the MSBuild task doesn't get reloaded. Apparently NuGet has decreased noisiness of restore anyway, so it's not useful anymore.","Url":"https://github.com/dotnet/roslyn/pull/34978","RelatedDescription":"Closed or merged PR \"Fix bootstrap on Linux/Mac\" (#34978)"},{"Id":"433384994","IsPullRequest":false,"CreatedAt":"2019-04-15T16:57:28","Actor":"sharwell","Number":"34987","RawContent":null,"Title":"FailFast in HostWorkspaceServicesExtensions.CreateContentTypeMap: An item with the same key has already been added","State":"open","Body":"Observed in integration tests.\r\n\r\n```\r\nEvent Time (UTC): 4/13/2019 1:38:38 AM\r\nEvent ID: 1025\r\nData: Application: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)\r\n   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector)\r\n   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.CreateContentTypeMap(HostWorkspaceServices hostWorkspaceServices)\r\n   at System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(TKey key, CreateValueCallback createValueCallback)\r\n   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.GetDefaultContentTypeName(HostWorkspaceServices workspaceServices, String language)\r\n   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.LanguageMatches(String language, IContentType contentType, HostWorkspaceServices workspaceServices)\r\n   at Microsoft.CodeAnalysis.Editor.Shared.Extensions.HostWorkspaceServicesExtensions.GetLanguageServices(HostWorkspaceServices workspaceServices, IContentType contentType)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.TagComputer.GetTags(NormalizedSnapshotSpanCollection spans)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SyntacticClassificationTaggerProvider.Tagger.GetTags(NormalizedSnapshotSpanCollection spans)\r\n   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1.<GetTagsForBuffer>d__46.MoveNext()\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)\r\n   at Microsoft.VisualStudio.IntegrationTest.Setup.TestExtensionErrorHandler.HandleError(System.Object, System.Exception)\r\n   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.HandleException(System.Object, System.Exception)\r\n   at Microsoft.VisualStudio.Text.Tagging.Implementation.TagAggregator`1+<GetTagsForBuffer>d__46[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at Microsoft.VisualStudio.Text.Classification.Implementation.ClassifierAggregator.InternalGetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan, System.Collections.Generic.IEnumerable`1<Microsoft.VisualStudio.Text.Tagging.IMappingTagSpan`1<Microsoft.VisualStudio.Text.Tagging.IClassificationTag>>)\r\n   at Microsoft.VisualStudio.Text.Classification.Implementation.ClassifierAggregator.GetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)\r\n   at Microsoft.VisualStudio.Text.Formatting.Implementation.NormalizedSpanGenerator.CreateClassifiedRuns(Microsoft.VisualStudio.Text.SnapshotSpan, Microsoft.VisualStudio.Text.Classification.IAccurateClassifier, Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Formatting.Implementation.NormalizedSpanGenerator.Create(Microsoft.VisualStudio.Text.Formatting.ITextAndAdornmentCollection, Microsoft.VisualStudio.Text.ITextSnapshot, Microsoft.VisualStudio.Text.Classification.IAccurateClassifier, Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Formatting.Implementation.FormattedLineSource.FormatLineInVisualBuffer(Microsoft.VisualStudio.Text.ITextSnapshotLine, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.FormatSnapshotLine(Microsoft.VisualStudio.Text.ITextSnapshotLine, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView+LayoutLineCache.DoAnchorFormat(Microsoft.VisualStudio.Text.SnapshotPoint, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.DoAnchorLayout(LayoutDescription, Microsoft.VisualStudio.Text.SnapshotPoint, Double, Double, Microsoft.VisualStudio.Text.Editor.ViewRelativePosition, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.PerformLayout(Microsoft.VisualStudio.Text.ITextSnapshot, Microsoft.VisualStudio.Text.ITextSnapshot, Microsoft.VisualStudio.Text.SnapshotPoint, Double, Microsoft.VisualStudio.Text.Editor.ViewRelativePosition, Double, Double, Boolean, System.Nullable`1<System.Threading.CancellationToken>)\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextView.Initialize()\r\n   at Microsoft.VisualStudio.Text.Editor.Implementation.WpfTextEditorFactoryService.InitializeTextView(Microsoft.VisualStudio.Text.Editor.IWpfTextView)\r\n   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Init_InitializeWpfTextView()\r\n   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindowPane.<InitializeDifferenceViewer>b__40_0(Microsoft.VisualStudio.Text.Differencing.IDifferenceTextViewModel, Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet, Microsoft.VisualStudio.Text.Editor.IEditorOptions, System.Windows.FrameworkElement ByRef, Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost ByRef)\r\n   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.EnsureRightHost()\r\n   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.GetHostForViewMode(Microsoft.VisualStudio.Text.Differencing.DifferenceViewMode)\r\n   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.UpdateVisual()\r\n   at Microsoft.VisualStudio.Text.Differencing.Implementation.DifferenceViewer.Initialize(Microsoft.VisualStudio.Text.Differencing.IDifferenceBuffer, Microsoft.VisualStudio.Text.Differencing.CreateTextViewHostCallback, Microsoft.VisualStudio.Text.Editor.IEditorOptions)\r\n   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindowPane.InitializeDifferenceViewer()\r\n   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindowPane.<CreateView>b__33_0()\r\n   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.Init_OnActivation()\r\n   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.PreOuterQueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[])\r\n   at Microsoft.VisualStudio.Editor.Implementation.CompoundTextViewWindow.QueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[], IntPtr)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.DocumentObjectSite.QueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[], IntPtr)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.QueryStatus(System.Guid ByRef, UInt32, Microsoft.VisualStudio.OLE.Interop.OLECMD[], IntPtr)\r\n   at Microsoft.Internal.VisualStudio.Shell.Interop.IVsTrackSelectionExPrivate.Register()\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.ConnectSelectionContext()\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Activate()\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService.viewManager_ActiveViewChanged(System.Object, Microsoft.VisualStudio.PlatformUI.Shell.ActiveViewChangedEventArgs)\r\n   at System.EventHandler`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Object, System.__Canon)\r\n   at Microsoft.VisualStudio.PlatformUI.ExtensionMethods.RaiseEvent[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.EventHandler`1<System.__Canon>, System.Object, System.__Canon)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager.SetActiveView(Microsoft.VisualStudio.PlatformUI.Shell.View, Microsoft.VisualStudio.PlatformUI.Shell.ActivationType)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager.ActivateViewFromTabControl(System.Windows.Controls.TabControl, Microsoft.VisualStudio.PlatformUI.Shell.ActivationType)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager.OnTabControlSelectionChanged(System.Object, System.Windows.Controls.SelectionChangedEventArgs)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewManager+<>c.<.cctor>b__24_27(System.Object, System.Windows.Controls.SelectionChangedEventArgs)\r\n   at System.Windows.Controls.SelectionChangedEventArgs.InvokeEventHandler(System.Delegate, System.Object)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(System.Delegate, System.Object)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(System.Object, System.Windows.RoutedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(System.Object, System.Windows.RoutedEventArgs, Boolean)\r\n   at System.Windows.UIElement.RaiseEventImpl(System.Windows.DependencyObject, System.Windows.RoutedEventArgs)\r\n   at System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)\r\n   at System.Windows.Controls.TabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)\r\n   at Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)\r\n   at System.Windows.Controls.Primitives.Selector.InvokeSelectionChanged(System.Collections.Generic.List`1<ItemInfo>, System.Collections.Generic.List`1<ItemInfo>)\r\n   at System.Windows.Controls.Primitives.Selector+SelectionChanger.End()\r\n   at System.Windows.Controls.Primitives.Selector+SelectionChanger.SelectJustThisItem(ItemInfo, Boolean)\r\n   at System.Windows.Controls.Primitives.Selector.OnSelectedItemChanged(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex, System.Windows.DependencyProperty, System.Windows.PropertyMetadata, System.Windows.EffectiveValueEntry, System.Windows.EffectiveValueEntry ByRef, Boolean, Boolean, System.Windows.OperationType)\r\n   at System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty, Boolean)\r\n   at System.Windows.Data.BindingExpressionBase.Invalidate(Boolean)\r\n   at System.Windows.Data.BindingExpression.TransferValue(System.Object, Boolean)\r\n   at System.Windows.Data.BindingExpression.ScheduleTransfer(Boolean)\r\n   at MS.Internal.Data.ClrBindingWorker.NewValueAvailable(Boolean, Boolean, Boolean)\r\n   at MS.Internal.Data.PropertyPathWorker.UpdateSourceValueState(Int32, System.ComponentModel.ICollectionView, System.Object, Boolean)\r\n   at MS.Internal.Data.PropertyPathWorker.OnDependencyPropertyChanged(System.Windows.DependencyObject, System.Windows.DependencyProperty, Boolean)\r\n   at MS.Internal.Data.ClrBindingWorker.OnSourceInvalidation(System.Windows.DependencyObject, System.Windows.DependencyProperty, Boolean)\r\n   at System.Windows.Data.BindingExpression.HandlePropertyInvalidation(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.Data.BindingExpressionBase.OnPropertyInvalidation(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.Data.BindingExpression.OnPropertyInvalidation(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependentList.InvalidateDependents(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex, System.Windows.DependencyProperty, System.Windows.PropertyMetadata, System.Windows.EffectiveValueEntry, System.Windows.EffectiveValueEntry ByRef, Boolean, Boolean, System.Windows.OperationType)\r\n   at System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty, System.Object, System.Windows.PropertyMetadata, Boolean, Boolean, System.Windows.OperationType, Boolean)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewElement.UpdateParentSelectedElement()\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.View.OnIsSelectedChanged()\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewElement.OnIsSelectedChanged(System.Windows.DependencyObject, System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.NotifyPropertyChange(System.Windows.DependencyPropertyChangedEventArgs)\r\n   at System.Windows.DependencyObject.UpdateEffectiveValue(System.Windows.EntryIndex, System.Windows.DependencyProperty, System.Windows.PropertyMetadata, System.Windows.EffectiveValueEntry, System.Windows.EffectiveValueEntry ByRef, Boolean, Boolean, System.Windows.OperationType)\r\n   at System.Windows.DependencyObject.SetValueCommon(System.Windows.DependencyProperty, System.Object, System.Windows.PropertyMetadata, Boolean, Boolean, System.Windows.OperationType, Boolean)\r\n   at Microsoft.VisualStudio.PlatformUI.Shell.ViewElement.set_IsSelected(Boolean)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.ShowInternal(ShowFlags)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.<Show>b__506_0()\r\n   at Microsoft.VisualStudio.ErrorHandler.CallWithCOMConvention(System.Func`1<Int32>, Boolean, Boolean)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.Show()\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.DTE.Window.set_Visible(Boolean)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.DTE.WindowBase+<>c__DisplayClass69_0.<set_Visible>b__0()\r\n   at Microsoft.VisualStudio.Shell.ThreadHelper.Invoke[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Func`1<Boolean>)\r\n   at Microsoft.VisualStudio.Platform.WindowManagement.DTE.WindowBase.set_Visible(Boolean)\r\n   at Microsoft.VisualStudio.TemplateWizard.Wizard.OpenNotedItems(System.String, System.Collections.Generic.List`1<WizardExtension>, EnvDTE.Project)\r\n   at Microsoft.VisualStudio.TemplateWizard.Wizard.Execute(System.Object, Int32, System.Object[] ByRef, System.Object[] ByRef, EnvDTE.wizardResult ByRef)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/34987","RelatedDescription":"Open issue \"FailFast in HostWorkspaceServicesExtensions.CreateContentTypeMap: An item with the same key has already been added\" (#34987)"},{"Id":"433270804","IsPullRequest":false,"CreatedAt":"2019-04-15T13:04:22","Actor":"AndreasHeisel","Number":"34986","RawContent":null,"Title":"Provide an extension point to disable IDE0051 on selected members","State":"open","Body":"We have private methods in our codebase that trigger an IDE0051, because there are no references visible to the analyzer.\r\n\r\nThese methods get called by reflection and therefore shouldn't be removed. They are all decorated with a custom attribute. \r\n\r\nI found #31036 wich adds a list of attributes that disable IDE0051 on selected members.\r\n\r\nMy suggestion is to make these list extensible bei either an attribute or a marker interface to decorate custom attributes. Something like\r\n\r\n```c#\r\n[\r\n    IndicatesUsage\r\n]\r\npublic sealed class MyAttribute : Attribute\r\n{}\r\n```\r\nor\r\n\r\n```c#\r\npublic sealed class MyAttribute : Attribute, IUsageIndicator\r\n{}\r\n```\r\nMembers decorated with such an attribute should not trigger IDE0051:\r\n\r\n```c#\r\n[\r\n    MyAttribute\r\n]\r\nprivate void GetsMagicallyCalled()\r\n{}\r\n```\r\nThis would enable library authors to prevent false positives for users of their libraries.\r\n\r\n**Version Used**: \r\nVS2019\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/34986","RelatedDescription":"Open issue \"Provide an extension point to disable IDE0051 on selected members\" (#34986)"},{"Id":"433254152","IsPullRequest":false,"CreatedAt":"2019-04-15T12:27:28","Actor":"TessenR","Number":"34985","RawContent":null,"Title":"Roslyn fails to warn about NullReferenceException when there are multiple implementations of an interface with different type arguments","State":"open","Body":"**Version Used**: \r\n\r\nBranch master (12 Apr 2019)\r\nLatest commit 5a1ddd by Heejae Chang:\r\nremoved duplicated entry for ExternalAccess.FSharp (#34938)\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile and run the following code:\r\n```cs\r\n#nullable enable\r\nclass A { }\r\nclass B : A { }\r\nclass C : A { }\r\n\r\ninterface D<out T>\r\n{\r\n    T GetT();\r\n}\r\n\r\nclass E : D<B?>, D<C>\r\n{\r\n  B? D<B?>.GetT() => null;\r\n  C D<C>.GetT() => new C();\r\n}\r\n\r\nclass Test\r\n{\r\n    public static void Main()\r\n    {\r\n        var e = new E();\r\n        D<A> da = e;\r\n        A a = da.GetT();\r\n        a.ToString();\r\n    }\r\n}\r\n```\r\n\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxAgrgOyQExAagB8BiTdAG3ImHLgAI5NraBYAKAAEAmOgQToDedAL7tudAEJ0QfQSLE8AwtNlDRbdgEtM8BADMIAY3oARADwB7dDDoAVAHzsB7Oq7t0A4nBi2AFAEoAbnZ1BToAURVzCQB+eyQ6c0VHNmc2V1jEs1j7ADovHwC6AF57OjJKYPS6ZSS8gr9/ErLMOAB3GoCq0M4eWzhYJxc3DgBmOg4ARgA2CYAWOgBZCG0A4dc0ty26ADcIBAYS8vaIrvXt814ynAgjuCrtt35b4rob/O9Gh8e6CFzbCwAZRgCG0AHMztVXOphEA===\r\n\r\n**Expected Behavior**:\r\n\r\nWarning on conversion from `E` to `D<A>` since annotations on the nullable reference types do not match.\r\n\r\n**Actual Behavior**:\r\nNo warnings. The program crashes at runtime with a `NullReferenceException`.\r\n\r\n**Notes**\r\nNote that Roslyn will emit a warning for this conversion if `E` implements `D<C?>` instead of `D<C>`. It seems that it currently only warns when _all_ possible implementations of `D<A>` implement it with nullable annotations whereas at runtime you'll get a specific one - `D<B?>` in the code above.\r\nIt seems that Roslyn should either emit a warning if _any_ of possible implementations' nullability does not match or check which implementation will actually be used and check its nullability - currently the implementation of `GetT` depends on the order the interfaces are specified in the declaration of `E`","Url":"https://github.com/dotnet/roslyn/issues/34985","RelatedDescription":"Open issue \"Roslyn fails to warn about NullReferenceException when there are multiple implementations of an interface with different type arguments\" (#34985)"},{"Id":"433094242","IsPullRequest":false,"CreatedAt":"2019-04-15T04:54:23","Actor":"davkean","Number":"34984","RawContent":null,"Title":"ExtractMethodCodeRefactoringProvider throws InvalidOperationException on highlighting non-existent property","State":"open","Body":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Highlight between $$\r\n\r\n``` C#\r\n// Copyright (c) Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace Microsoft.VisualStudio.ProjectSystem.VS.NuGet\r\n{\r\n    internal static class ImmutablePropertyCollectionEqualityComparer\r\n    {\r\n        public static bool AreUnorderedEqual<T>(ImmutablePropertyCollection<T> x, ImmutablePropertyCollection<T> y, IEqualityComparer<T> comparer)\r\n            where T : class\r\n        {\r\n            Requires.NotNull(x, nameof(x));\r\n            Requires.NotNull(y, nameof(y));\r\n\r\n            if (x.Count != y.Count)\r\n                return false;\r\n\r\n            if (x.Count == 0)\r\n                return true;\r\n\r\n            foreach (T xItem in x.$$ToolReferences$$)\r\n            {\r\n                IVsReferenceItem yReference = y.ToolReferences.Item(xItem.Name);\r\n                if (yReference == null)\r\n                    return false;\r\n\r\n                if (!ReferenceItemEqualityComparer.Instance.Equals(xReference, yReference))\r\n                    return false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n```\r\nSystem.InvalidOperationException : Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind'\r\n   at Microsoft.CodeAnalysis.CSharp.ConversionKindExtensions.IsImplicitConversion(ConversionKind conversionKind)\r\n   at Microsoft.CodeAnalysis.CSharp.Conversion.get_IsExplicit()\r\n   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ConversionsAreCompatible(Conversion originalConversion,Conversion newConversion)\r\n   at Microsoft.CodeAnalysis.CSharp.Utilities.SpeculationAnalyzer.ForEachConversionsAreCompatible(SemanticModel originalModel,CommonForEachStatementSyntax originalForEach,SemanticModel newModel,CommonForEachStatementSyntax newForEach)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementBreaksForEachStatement(TForEachStatementSyntax forEachStatement,TForEachStatementSyntax newForEachStatement)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemanticsForNode(SyntaxNode currentOriginalNode,SyntaxNode currentReplacedNode,SyntaxNode previousOriginalNode,SyntaxNode previousReplacedNode)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics(SyntaxNode currentOriginalNode,SyntaxNode currentReplacedNode,SyntaxNode originalRoot,Boolean skipVerificationForCurrentNode)\r\n   at Microsoft.CodeAnalysis.Shared.Utilities.AbstractSpeculationAnalyzer`7.ReplacementChangesSemantics()\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CanReplaceWithReducedName(NameSyntax name,TypeSyntax reducedName,SemanticModel semanticModel,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduce(NameSyntax name,SemanticModel semanticModel,TypeSyntax& replacementNode,TextSpan& issueSpan,OptionSet optionSet,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,TypeSyntax& replacementNode,TextSpan& issueSpan,OptionSet optionSet,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.TryReduceOrSimplifyExplicitName(ExpressionSyntax expression,SemanticModel semanticModel,ExpressionSyntax& replacementNode,TextSpan& issueSpan,OptionSet optionSet,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.SimplifyName(SyntaxNode node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpNameReducer.Rewriter.VisitGenericName(GenericNameSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.GenericNameSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitInvocationExpression(InvocationExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitForEachStatement(ForEachStatementSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ForEachStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)\r\n   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.<>c__DisplayClass10_1.<ReduceAsync>b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.CodeGenerator`3.GenerateAsync[TStatement,TExpression,TNodeUnderContainer](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/34984","RelatedDescription":"Open issue \"ExtractMethodCodeRefactoringProvider throws InvalidOperationException on highlighting non-existent property\" (#34984)"},{"Id":"433083904","IsPullRequest":false,"CreatedAt":"2019-04-15T03:53:09","Actor":"chborl","Number":"34983","RawContent":null,"Title":"Complete Statement on incomplete code places semicolon in incorrect location","State":"open","Body":"When Complete Statement is invoked in the following case, the incomplete code is mistakenly considered an ElementAccessExpression that includes `[Test]`.  The semicolon is then placed after the attribute instead of after the field declaration. \r\n\r\n```csharp\r\nusing System;\r\ninternal class TestMethodAttribute : Attribute\r\n{\r\n    readonly int i = Foo(3,4$$)\r\n\r\n    [Test]\r\n}\r\n```\r\n\r\nExpected:\r\nsemicolon to be placed after `Foo(3,4)`\r\n\r\nActual:\r\nsemicolon is placed after `[Test]`\r\n\r\n![image](https://user-images.githubusercontent.com/25776963/56096145-3002ae00-5e99-11e9-8a94-83ca3092e66e.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/34983","RelatedDescription":"Open issue \"Complete Statement on incomplete code places semicolon in incorrect location\" (#34983)"},{"Id":"433057791","IsPullRequest":false,"CreatedAt":"2019-04-15T01:13:34","Actor":"stephentoub","Number":"34982","RawContent":null,"Title":"No nullable warning issued for null event invocation","State":"open","Body":"**Version Used**: \r\n3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\n#nullable enable\r\nusing System;\r\n\r\npublic class Program\r\n{\r\n    static void Main()\r\n    {\r\n        var p = new Program();\r\n        p.MyEvent(p, EventArgs.Empty);\r\n    }\r\n\r\n    public event EventHandler MyEvent;\r\n}\r\n```\r\n\r\nNo warning is issued here, but it will null ref.\r\n\r\ncc: @dotnet/nullablefc ","Url":"https://github.com/dotnet/roslyn/issues/34982","RelatedDescription":"Open issue \"No nullable warning issued for null event invocation\" (#34982)"},{"Id":"432916349","IsPullRequest":false,"CreatedAt":"2019-04-14T23:06:41","Actor":"cartermp","Number":"34979","RawContent":null,"Title":"Open EmbeddedLanguages for public consumption","State":"closed","Body":"I'd like to hook into the Regex language service to support colors and brace matching (and completion if possible). However, all the types and interfaces are marked `internal`, so even though we have IVTs with F#, we can't access these things.","Url":"https://github.com/dotnet/roslyn/issues/34979","RelatedDescription":"Closed issue \"Open EmbeddedLanguages for public consumption\" (#34979)"},{"Id":"433022415","IsPullRequest":false,"CreatedAt":"2019-04-14T19:27:01","Actor":"mikadumont","Number":"34981","RawContent":null,"Title":"Show unused non-private type members when solution-wide analysis is off","State":"open","Body":"Customer Request Copying Here\r\n\r\n>Show unused non-private type members when solution-wide analysis is off. See how Resharper highlights the field UnusedMember but Visual Studio does not. \r\n\r\n**Expected Behavior**:\r\n\r\n![Untitled](https://user-images.githubusercontent.com/46729679/56097955-c0e48400-5eaf-11e9-8830-ee80f876af7d.png)\r\n\r\n**Actual Behavior**:\r\n\r\n![Capture2](https://user-images.githubusercontent.com/46729679/56098010-78799600-5eb0-11e9-96c5-162a8f617e42.png)","Url":"https://github.com/dotnet/roslyn/issues/34981","RelatedDescription":"Open issue \"Show unused non-private type members when solution-wide analysis is off\" (#34981)"},{"Id":"432943713","IsPullRequest":false,"CreatedAt":"2019-04-14T07:53:44","Actor":"yyjdelete","Number":"34980","RawContent":null,"Title":"Crashes with NullReferenceException at `Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionSlow`","State":"open","Body":"**Version Used**: \r\nVS2019 16.1.0 Preview1\r\nC# Tools   3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40\r\nMicrosoft.CodeAnalysis.Workspaces.ni.dll: 3.100.19.17205\r\n\r\nThat doesn't happen in roslyn 2.9.0(test with sharplab)\r\n\r\n**Steps to Reproduce**:\r\nHit this while typing some incompleted code, and choose between autocomplete members. <del>I will try to make an simple reproduce latter.</del>\r\n\r\nJust see\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEAMACFBGA3AWACgiUBmDCYWBCAYxiwCYMBZATwFEAPABwTihQAlgHsAdgB4AKgD4iAbyIZlWcjgBsrTr36DRk2RgDyPbAAoAlBnlYA7BjEBXADbPcGAL5KVZJsdPcfALC4hggWoG6IQZyhCrW3spexHE+5CIAbogIQgAmcFjYmFIiAMowOWIA5paJCanxykIAZhhmMAAWQlAY3f7YFgD0g1JsPAUABp19fSbYExgdiHB18YoNjfEo9gBEczsEG/HJm8rbGHudiAd1yR5AA===\r\n\r\nOr\r\n1. Copy and paste the below code\r\n```cs\r\n//public class Class1<T> {//Also happen with class Class1<T>{class MyExpression{MyExpression Op1(){} string ToString(){...}}}\r\n    public abstract class MyExpression<T>\r\n    {\r\n        public static MyExpression<T> Op1() { return null; }\r\n        public class Op1Expression : MyExpression<T>\r\n        {\r\n        }\r\n\r\n        public override string ToString()\r\n        {\r\n            if ()//Type `this is Op1` here\r\n            {\r\n                return \"Op1\";\r\n            }\r\n            return \"Other\";\r\n        }\r\n    }\r\n//}\r\n```\r\n2. Type `this is Op1` at the line with `if`(want to type `this is Op1Expression`, but unable to finish it)\r\n\r\n**Expected Behavior**:\r\n1. Should not crash here;\r\n***Note:*** This doesn't crash without generic type.\r\n2. Maybe autocomplete shouldn't list methods here, but is not important.\r\n\r\n\r\n**Actual Behavior**:\r\n```\r\nApplication: devenv.exe\r\nFramework Version: v4.0.30319\r\nExplanation: The application requests termination of the process via System.Environment.FailFast(string message).\r\nMessage: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionSlow(TypeSymbol source, TypeSymbol destination, HashSet`1& useSiteDiagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyBuiltInConversion(TypeSymbol source, TypeSymbol destination, HashSet`1& useSiteDiagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.ExpressionOfTypeMatchesPatternType(Conversions conversions, TypeSymbol expressionType, TypeSymbol patternType, HashSet`1& useSiteDiagnostics, Conversion& conversion, ConstantValue operandConstantValue, Boolean operandCouldBeNull)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.ConvertPatternExpression(TypeSymbol inputType, CSharpSyntaxNode node, BoundExpression expression, ConstantValue& constantValue, Boolean hasErrors, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindConstantPattern(SyntaxNode node, TypeSymbol inputType, ExpressionSyntax patternExpression, Boolean hasErrors, DiagnosticBag diagnostics, Boolean& wasExpression)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindIsOperator(BinaryExpressionSyntax node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node, DiagnosticBag diagnostics, Boolean invoked, Boolean indexed)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindBooleanExpression(ExpressionSyntax node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindIfStatement(IfStatementSyntax node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode& bindableNode, BoundNode& lowestBoundNode, BoundNode& highestBoundNode, BoundNode& boundParent)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(SyntaxNode node, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(SyntaxNode node, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Classification.OperatorOverloadSyntaxClassifier.AddClassifications(Workspace workspace, SyntaxNode syntax, SemanticModel semanticModel, ArrayBuilder`1 result, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ClassifyNode(SyntaxNode syntax)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ProcessNodes()\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.Classify(Workspace workspace, SemanticModel semanticModel, TextSpan textSpan, ArrayBuilder`1 list, Func`2 getNodeClassifiers, Func`2 getTokenClassifiers, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.<AddSemanticClassificationsAsync>d__5.MoveNext()\r\nStackTrace:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+<AddSemanticClassificationsAsync>d__5.MoveNext()\r\n   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionSlow(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, System.Collections.Generic.HashSet`1<Microsoft.CodeAnalysis.DiagnosticInfo> ByRef)\r\n   at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyBuiltInConversion(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, System.Collections.Generic.HashSet`1<Microsoft.CodeAnalysis.DiagnosticInfo> ByRef)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.ExpressionOfTypeMatchesPatternType(Microsoft.CodeAnalysis.CSharp.Conversions, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, System.Collections.Generic.HashSet`1<Microsoft.CodeAnalysis.DiagnosticInfo> ByRef, Microsoft.CodeAnalysis.CSharp.Conversion ByRef, Microsoft.CodeAnalysis.ConstantValue, Boolean)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.ConvertPatternExpression(Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.CSharp.BoundExpression, Microsoft.CodeAnalysis.ConstantValue ByRef, Boolean, Microsoft.CodeAnalysis.DiagnosticBag)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindConstantPattern(Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol, Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Boolean, Microsoft.CodeAnalysis.DiagnosticBag, Boolean ByRef)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindIsOperator(Microsoft.CodeAnalysis.CSharp.Syntax.BinaryExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag, Boolean, Boolean)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindBooleanExpression(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, Microsoft.CodeAnalysis.DiagnosticBag)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindIfStatement(Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel+IncrementalBinder.BindStatement(Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax, Microsoft.CodeAnalysis.DiagnosticBag)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Microsoft.CodeAnalysis.CSharp.Binder, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.DiagnosticBag)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef, Microsoft.CodeAnalysis.CSharp.BoundNode ByRef)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, SymbolInfoOptions, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode, SymbolInfoOptions, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoFromNode(Microsoft.CodeAnalysis.SyntaxNode, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfoCore(Microsoft.CodeAnalysis.SyntaxNode, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Classification.OperatorOverloadSyntaxClassifier.AddClassifications(Microsoft.CodeAnalysis.Workspace, Microsoft.CodeAnalysis.SyntaxNode, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1<Microsoft.CodeAnalysis.Classification.ClassifiedSpan>, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+Worker.ClassifyNode(Microsoft.CodeAnalysis.SyntaxNode)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+Worker.ProcessNodes()\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+Worker.Classify(Microsoft.CodeAnalysis.Workspace, Microsoft.CodeAnalysis.SemanticModel, Microsoft.CodeAnalysis.Text.TextSpan, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1<Microsoft.CodeAnalysis.Classification.ClassifiedSpan>, System.Func`2<Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier>>, System.Func`2<Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier>>, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+<AddSemanticClassificationsAsync>d__5.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService+<AddSemanticClassificationsAsync>d__5, Microsoft.CodeAnalysis.Workspaces, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<AddSemanticClassificationsAsync>d__5 ByRef)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Func`2<Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier>>, System.Func`2<Microsoft.CodeAnalysis.SyntaxToken,System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.Classification.Classifiers.ISyntaxClassifier>>, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder`1<Microsoft.CodeAnalysis.Classification.ClassifiedSpan>, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService+<AddSemanticClassificationsAsync>d__2.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Classification.AbstractClassificationService+<AddSemanticClassificationsAsync>d__2, Microsoft.CodeAnalysis.Workspaces, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<AddSemanticClassificationsAsync>d__2 ByRef)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractClassificationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Collections.Generic.List`1<Microsoft.CodeAnalysis.Classification.ClassifiedSpan>, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.WorkspaceClassificationDelegationService.AddSemanticClassificationsAsync(Microsoft.CodeAnalysis.Classification.IClassificationService, Microsoft.CodeAnalysis.Document, Microsoft.CodeAnalysis.Text.TextSpan, System.Collections.Generic.List`1<Microsoft.CodeAnalysis.Classification.ClassifiedSpan>, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+<ClassifySpansAsync>d__2`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+<ClassifySpansAsync>d__2`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<ClassifySpansAsync>d__2`1<System.__Canon> ByRef)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ClassifySpansAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1<Microsoft.VisualStudio.Text.Tagging.IClassificationTag>, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1<System.__Canon>, System.__Canon, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+<TryClassifyContainingMemberSpan>d__1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+<TryClassifyContainingMemberSpan>d__1`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<TryClassifyContainingMemberSpan>d__1`1<System.__Canon> ByRef)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.TryClassifyContainingMemberSpan[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1<Microsoft.VisualStudio.Text.Tagging.IClassificationTag>, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1<System.__Canon>, System.__Canon, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+<ProduceTagsAsync>d__0`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities+<ProduceTagsAsync>d__0`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<ProduceTagsAsync>d__0`1<System.__Canon> ByRef)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationUtilities.ProduceTagsAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1<Microsoft.VisualStudio.Text.Tagging.IClassificationTag>, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1<System.__Canon>, System.__Canon, Microsoft.CodeAnalysis.Editor.Shared.Utilities.ClassificationTypeMap)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationViewTaggerProvider.ProduceTagsAsync[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1<Microsoft.VisualStudio.Text.Tagging.IClassificationTag>, Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan, Microsoft.CodeAnalysis.Editor.IClassificationDelegationService`1<System.__Canon>)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Classification.SemanticClassificationViewTaggerProvider.ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1<Microsoft.VisualStudio.Text.Tagging.IClassificationTag>)\r\n   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProduceTagsAsync(Microsoft.CodeAnalysis.Editor.Tagging.TaggerContext`1<System.__Canon>)\r\n   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+<RecomputeTagsAsync>d__70[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[[Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+<RecomputeTagsAsync>d__70[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], Microsoft.CodeAnalysis.EditorFeatures, Version=3.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]](<RecomputeTagsAsync>d__70<System.__Canon> ByRef)\r\n   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].RecomputeTagsAsync(System.Object, System.Nullable`1<Microsoft.VisualStudio.Text.SnapshotPoint>, System.Nullable`1<Microsoft.CodeAnalysis.Text.TextChangeRange>, System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.Editor.DocumentSnapshotSpan>, System.Collections.Immutable.ImmutableDictionary`2<Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.Editor.Shared.Tagging.TagSpanIntervalTree`1<System.__Canon>>, Boolean, System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Tagging.AbstractAsynchronousTaggerProvider`1+TagSource+<>c__DisplayClass63_1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].<RecomputeTagsForeground>b__0(System.Threading.CancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Shared.Threading.AsynchronousSerialWorkQueue+<>c__DisplayClass12_0.<EnqueueBackgroundTask>b__0(System.Threading.Tasks.Task)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```","Url":"https://github.com/dotnet/roslyn/issues/34980","RelatedDescription":"Open issue \"Crashes with NullReferenceException at `Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionSlow`\" (#34980)"},{"Id":"432894398","IsPullRequest":false,"CreatedAt":"2019-04-13T21:22:50","Actor":"TETYYS","Number":"34977","RawContent":null,"Title":"Undocumented operator '!.'","State":"closed","Body":"**Version Used**: \r\ndotnet 3.0.100-preview-010184 with VS 16.1 Preview 1\r\n**Steps to Reproduce**:\r\n\r\n1. \r\n```csharp\r\nusing System;\r\n\r\nclass A {\r\n        public bool? c { get; set; }\r\n}\r\n\r\npublic class Test\r\n{\r\n        public static void Main()\r\n        {\r\n                var a = new A() {\r\n                        c = true\r\n                };\r\n\r\n                Console.WriteLine(a!.c);\r\n        }\r\n}\r\n```\r\n2. `dotnet run`\r\n3. ???\r\n\r\n**Expected Behavior**:\r\nNot sure\r\n**Actual Behavior**:\r\nNothing changes if I type `a.c`. The `!.` operator is not listed in [the list of operators](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/)","Url":"https://github.com/dotnet/roslyn/issues/34977","RelatedDescription":"Closed issue \"Undocumented operator '!.'\" (#34977)"},{"Id":"432822643","IsPullRequest":false,"CreatedAt":"2019-04-13T08:17:26","Actor":"c-s-n","Number":"34975","RawContent":null,"Title":"Undo \"restores\" garbled code","State":"open","Body":"**Version Used**: Visual Studio Professional 2017 v15.9.11 (reproducible also in v15.9.8, but not in v15.9.7)\r\n\r\n**Background**\r\nDeleting several lines from `.cs` or `.cshtml` files (likely happens for more types) and trying to restore them via undo feature.\r\n\r\n**Steps to Reproduce**:\r\n1. Open a larger solution\r\nSuggestion: https://github.com/aspnet/AspNetWebStack.git branch v3.2.7, Runtime.sln\r\n2. Open a file where Visual Studio more likely tends to slow down (Razor)\r\nSuggestion: `src\\Microsoft.Web.Helpers\\Facebook.cshtml`\r\n3. Go to the middle of the file and press and hold CTRL+X to cut lines or CTRL+L to delete them\r\nSuggestion: 200+ lines\r\n4. Restore via CTRL+Z by holding until nothing happens anymore\r\n-> The file name won't have the asterisk anymore, but still be different from the previously version\r\n5. Diff to the repository version\r\n-> You should see a difference\r\n6. If not yet reproduced, repeat the previous steps (it will get slower each time, thus more likely to happen)\r\n\r\n**Expected Behavior**:\r\nThe file looks exactly like before.\r\n\r\n**Actual Behavior**:\r\nThe lines are not restored correctly; often lines are missing.\r\nIf you modified the file before, rarely even text fragments are \"restored\" at positions where they never were before.\r\n\r\n![image](https://user-images.githubusercontent.com/615657/56076782-2c0d5800-5dd5-11e9-8559-f7f07b6afa0f.png)\r\n\r\n-> Any unsaved previous code is lost or garbage, or at worst it might even be noticed too late that parts are wrong.\r\n\r\n**Additional Notes**:\r\nThis might be related to the small hangs one can notice during deletion.\r\nThe problems seems to be intensified with ReSharper turned on (\"We've noticed that extension 'JetBrains ReSharper Ultimate 2018.3.4' is slowing typing performance.\"), but also happens without.","Url":"https://github.com/dotnet/roslyn/issues/34975","RelatedDescription":"Open issue \"Undo \"restores\" garbled code\" (#34975)"},{"Id":"432788778","IsPullRequest":true,"CreatedAt":"2019-04-13T00:36:50","Actor":"CyrusNajmabadi","Number":"34974","RawContent":null,"Title":"Ignore completion item span","State":"open","Body":"Followup to https://github.com/dotnet/roslyn/pull/34952\r\n\r\nThis is currently mutable, which makes sharing completion items hard.  Now, instead, we just track the completion span we are told on the completion context and pass that along at the end when making changes. That helps ensure completion items can be safely shared across invocations.","Url":"https://github.com/dotnet/roslyn/pull/34974","RelatedDescription":"Open PR \"Ignore completion item span\" (#34974)"},{"Id":"432787091","IsPullRequest":true,"CreatedAt":"2019-04-13T00:21:47","Actor":"gafter","Number":"34973","RawContent":null,"Title":"Correct nullability analysis in conditional access","State":"open","Body":"Fixes #29956","Url":"https://github.com/dotnet/roslyn/pull/34973","RelatedDescription":"Open PR \"Correct nullability analysis in conditional access\" (#34973)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"433571783","IsPullRequest":true,"CreatedAt":"2019-04-16T03:51:58","Actor":"jkotas","Number":"7312","RawContent":null,"Title":"Add AdditionalBuildArgs option for the official build pipeline","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7312","RelatedDescription":"Open PR \"Add AdditionalBuildArgs option for the official build pipeline\" (#7312)"},{"Id":"433568931","IsPullRequest":true,"CreatedAt":"2019-04-16T03:36:56","Actor":"jkotas","Number":"7311","RawContent":null,"Title":"Add musl targets in packages","State":"open","Body":"Contribute to #4552","Url":"https://github.com/dotnet/corert/pull/7311","RelatedDescription":"Open PR \"Add musl targets in packages\" (#7311)"},{"Id":"433552374","IsPullRequest":true,"CreatedAt":"2019-04-16T02:15:06","Actor":"Dotnet-GitSync-Bot","Number":"7310","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @jkotas @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7310","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,coreclr\" (#7310)"},{"Id":"433521193","IsPullRequest":true,"CreatedAt":"2019-04-16T02:12:54","Actor":"Dotnet-GitSync-Bot","Number":"7309","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7309","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7309)"},{"Id":"433505434","IsPullRequest":true,"CreatedAt":"2019-04-15T22:30:08","Actor":"trylek","Number":"7308","RawContent":null,"Title":"Fixes for some of the remaining Pri#1 CPAOT compilation buckets","State":"open","Body":"1) Handling for ByRef in the signature emitter;\r\n\r\n2) Expanding instantiated type signatures;\r\n\r\n3) Not trying to emit instantiations when asked to emit the\r\nuninstantiated generic methods in signatures.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7308","RelatedDescription":"Open PR \"Fixes for some of the remaining Pri#1 CPAOT compilation buckets\" (#7308)"},{"Id":"433456685","IsPullRequest":false,"CreatedAt":"2019-04-15T20:08:37","Actor":"josephmoresena","Number":"7307","RawContent":null,"Title":"Compile Gui.cs example win-x64","State":"open","Body":"I am trying to compile an executable that includes https://github.com/migueldeicaza/gui.cs\r\nWhen I compile in Linux all is sucessfully, but when I try to compile in Windows I get the following error:\r\n`\r\nTerminal.obj : error LNK2001: unresolved external symbol dlopen [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nTerminal.obj : error LNK2001: unresolved external symbol dlsym [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nbin\\Debug\\netcoreapp2.2\\win-x64\\native\\Terminal.exe : fatal error LNK1120: 2 unresolved externals [C:\\GitHub\\gui.cs\\Example\\Example.csproj]`\r\nThe problem is related to a `[DllImport (\"__Internal\")]` for compatibility with Mono. \r\nI'm using IlCompiler version 1.0.0-alpha-27615-01\r\n","Url":"https://github.com/dotnet/corert/issues/7307","RelatedDescription":"Open issue \"Compile Gui.cs example win-x64\" (#7307)"},{"Id":"432440813","IsPullRequest":false,"CreatedAt":"2019-04-15T14:54:38","Actor":"RehanSaeed","Number":"7285","RawContent":null,"Title":"Techniques for Reducing Size of .NET Native Binaries","State":"closed","Body":"I'm working on a UWP app being built with .NET native. Reducing the app size is very important. Are there any techniques, guidance or documentation available to help reduce the app size? Are there ways we can help the .NET native tree shaking algorithm be more effective? \r\n\r\nSome of the simple techniques I can think of are pretty basic:\r\n\r\n1. Code reuse.\r\n2. Avoid `await` as this generates a lot of state machine code e.g. Adding six awaits increased the size of my app by 20KB.\r\n3. Compress static assets like images etc.","Url":"https://github.com/dotnet/corert/issues/7285","RelatedDescription":"Closed issue \"Techniques for Reducing Size of .NET Native Binaries\" (#7285)"},{"Id":"433323004","IsPullRequest":true,"CreatedAt":"2019-04-15T14:45:52","Actor":"trylek","Number":"7306","RawContent":null,"Title":"Smaller SuperIlc fixes for bugs I hit in local testing","State":"open","Body":"1) One of the interesting features of the new command-line interface\r\nis the fact that it tries to match the option names to identifiers\r\nof fields and method parameters. Due to this the option --crossgen\r\ndidn't get bound because the counterpart field was called UseCrossgen.\r\nI have renamed the field to just Crossgen.\r\n\r\n2) Don't schedule executions for apps that failed to compile as\r\nthe executions are certain to fail due to the absence of the compiled\r\nartifacts.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7306","RelatedDescription":"Open PR \"Smaller SuperIlc fixes for bugs I hit in local testing\" (#7306)"},{"Id":"433044565","IsPullRequest":false,"CreatedAt":"2019-04-15T12:48:38","Actor":"UNDEFINED-BEHAVIOR","Number":"7300","RawContent":null,"Title":"What is the correct system codepage for build.cmd script","State":"closed","Body":"![image](https://user-images.githubusercontent.com/8407331/56100592-a4028c00-5f55-11e9-9abd-3af4f5a5856e.png)\r\n","Url":"https://github.com/dotnet/corert/issues/7300","RelatedDescription":"Closed issue \"What is the correct system codepage for build.cmd script\" (#7300)"},{"Id":"433259360","IsPullRequest":true,"CreatedAt":"2019-04-15T12:39:46","Actor":"MichalStrehovsky","Number":"7305","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7305","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7305)"},{"Id":"433156142","IsPullRequest":true,"CreatedAt":"2019-04-15T11:44:52","Actor":"MichalStrehovsky","Number":"7303","RawContent":null,"Title":"Remove problematic characters in eventtrace.cpp","State":"closed","Body":"The C++ compiler finds the typographic apostrophe disturbing.\r\n\r\n`warning C4828: The file contains a character starting at offset 0x103e5 that is illegal in the current source character set (codepage 65001).`","Url":"https://github.com/dotnet/corert/pull/7303","RelatedDescription":"Closed or merged PR \"Remove problematic characters in eventtrace.cpp\" (#7303)"},{"Id":"433157869","IsPullRequest":true,"CreatedAt":"2019-04-15T08:32:26","Actor":"MichalStrehovsky","Number":"7304","RawContent":null,"Title":"Add normalized equivalent of YieldProcessor","State":"open","Body":"Ports dotnet/coreclr#13670 to CoreRT.\r\n\r\nMarked as draft because I don't have good perf numbers yet (and this is not an area that I'm comfortable making changes in).","Url":"https://github.com/dotnet/corert/pull/7304","RelatedDescription":"Open PR \"Add normalized equivalent of YieldProcessor\" (#7304)"},{"Id":"433075833","IsPullRequest":true,"CreatedAt":"2019-04-15T04:09:51","Actor":"Dotnet-GitSync-Bot","Number":"7302","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MarcoRossignoli","Url":"https://github.com/dotnet/corert/pull/7302","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7302)"},{"Id":"433060403","IsPullRequest":true,"CreatedAt":"2019-04-15T02:33:52","Actor":"Dotnet-GitSync-Bot","Number":"7301","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @razfriman","Url":"https://github.com/dotnet/corert/pull/7301","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7301)"},{"Id":"433034057","IsPullRequest":true,"CreatedAt":"2019-04-14T21:11:23","Actor":"filipnavara","Number":"7299","RawContent":null,"Title":"Move EventSource to shared CoreLib partition","State":"open","Body":"Counter-part to https://github.com/dotnet/coreclr/pull/23925.","Url":"https://github.com/dotnet/corert/pull/7299","RelatedDescription":"Open PR \"Move EventSource to shared CoreLib partition\" (#7299)"},{"Id":"432982157","IsPullRequest":true,"CreatedAt":"2019-04-14T19:55:54","Actor":"MichalStrehovsky","Number":"7296","RawContent":null,"Title":"Group Task/Opcodes/Keywords in ClrThreadPoolEventSource","State":"closed","Body":"EventSource requires these specially named nested types.","Url":"https://github.com/dotnet/corert/pull/7296","RelatedDescription":"Closed or merged PR \"Group Task/Opcodes/Keywords in ClrThreadPoolEventSource\" (#7296)"},{"Id":"432982222","IsPullRequest":true,"CreatedAt":"2019-04-14T19:54:01","Actor":"MichalStrehovsky","Number":"7297","RawContent":null,"Title":"Add analysis of EventSource metadata","State":"closed","Body":"Event sources should not be blocked, so we need to poke a hole through blocking. On Project N, there's a separate IL2IL transform that deals with framework-provided event sources to sidestep this - I don't think we want to replicate that.\r\n\r\nThen we need to add special rule to make the compiler keep metadata for the magical nested types.","Url":"https://github.com/dotnet/corert/pull/7297","RelatedDescription":"Closed or merged PR \"Add analysis of EventSource metadata\" (#7297)"},{"Id":"432982311","IsPullRequest":true,"CreatedAt":"2019-04-14T19:53:04","Actor":"MichalStrehovsky","Number":"7298","RawContent":null,"Title":"Enhance analysis of reflection dependencies","State":"closed","Body":"EventSource reflects on method signatures that might refer to types we never heard about (they were never referenced from code in a way that would bring in the dependency). Bring the dependencies explicitly.","Url":"https://github.com/dotnet/corert/pull/7298","RelatedDescription":"Closed or merged PR \"Enhance analysis of reflection dependencies\" (#7298)"},{"Id":"432697541","IsPullRequest":true,"CreatedAt":"2019-04-14T12:28:51","Actor":"krwq","Number":"7289","RawContent":null,"Title":"Remove duplicate GetCurrentThreadId","State":"closed","Body":"Found as part of https://github.com/dotnet/coreclr/pull/23914\r\ncc: @stephentoub ","Url":"https://github.com/dotnet/corert/pull/7289","RelatedDescription":"Closed or merged PR \"Remove duplicate GetCurrentThreadId\" (#7289)"},{"Id":"432951950","IsPullRequest":true,"CreatedAt":"2019-04-14T12:21:57","Actor":"MichalStrehovsky","Number":"7295","RawContent":null,"Title":"Fix portable threadpool build on Windows","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7295","RelatedDescription":"Closed or merged PR \"Fix portable threadpool build on Windows\" (#7295)"},{"Id":"432932349","IsPullRequest":true,"CreatedAt":"2019-04-14T09:03:58","Actor":"Dotnet-GitSync-Bot","Number":"7294","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @filipnavara @sdmaclea @dotnet-maestro-bot","Url":"https://github.com/dotnet/corert/pull/7294","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7294)"},{"Id":"432668188","IsPullRequest":true,"CreatedAt":"2019-04-14T04:42:08","Actor":"Dotnet-GitSync-Bot","Number":"7288","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @tannergooding @tarekgh @luhenry @filipnavara @EgorBo @sdmaclea @stephentoub @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7288","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7288)"},{"Id":"432900041","IsPullRequest":true,"CreatedAt":"2019-04-14T03:11:11","Actor":"MichalStrehovsky","Number":"7293","RawContent":null,"Title":"Merge nmirror to master","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7293","RelatedDescription":"Closed or merged PR \"Merge nmirror to master\" (#7293)"},{"Id":"432899417","IsPullRequest":true,"CreatedAt":"2019-04-13T21:03:54","Actor":"dotnet-bot","Number":"7292","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7292","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7292)"},{"Id":"432839971","IsPullRequest":true,"CreatedAt":"2019-04-13T15:20:34","Actor":"MichalStrehovsky","Number":"7291","RawContent":null,"Title":"Delete ManualResetEventSlim.cs","State":"closed","Body":"We use the copy in the `shared` directory.","Url":"https://github.com/dotnet/corert/pull/7291","RelatedDescription":"Closed or merged PR \"Delete ManualResetEventSlim.cs\" (#7291)"},{"Id":"432757001","IsPullRequest":true,"CreatedAt":"2019-04-12T21:45:23","Actor":"nattress","Number":"7290","RawContent":null,"Title":"[WIP] Update CoreCLR test scripting","State":"open","Body":"The scripts to support running downloaded CoreCLR tests are from 2017 and have received some compelling updates since then:\r\n\r\n- No longer depend on desktop Xunit runner (`xunit.runner.msbuild`) and instead uses `xunit.console`. This should unblock https://github.com/dotnet/corert/issues/7032.\r\n- Cross platform Python script to drive test execution which lets us remove a bunch of the scripting we brought over last time.\r\n\r\nThe process here was similar to last time - drop runtest.py into this repo and then bring over enough scripts to make it run the test tree. Alternatively, we could have re-written this scripting to clone CoreCLR, build the product and tests, and run them with a custom launcher that first runs CPAOT / ILC. This takes about 25 minutes for the Pri0 tests and would slow our CI down significantly. The Pri0 test binaries are stored in an Azure blob which downloads and extracts in 1 minute at a periodic cost of updating these scripts (currently a 2 year period).\r\n\r\nThe Windows test binaries are supported with this commit. Unix support will be added once the CI looks good for Windows.\r\n\r\nNB: The wrappers are extremely slow to generate (5 minutes on my machine) and run each time we run CoreCLR tests. If we change test exclusion file they need generating, otherwise we can re-use if it's the same test subset. An optimization here would improve quality of life.\r\n\r\nNB2: @trylek FYI since this necessarily involves updating the binary test zips, we may see CPAOT pass rate regressions. There are also ~300 more tests than before based on a quick `dir /s *.cmd`.","Url":"https://github.com/dotnet/corert/pull/7290","RelatedDescription":"Open PR \"[WIP] Update CoreCLR test scripting\" (#7290)"},{"Id":"432654145","IsPullRequest":true,"CreatedAt":"2019-04-12T17:18:40","Actor":"Dotnet-GitSync-Bot","Number":"7287","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara @stephentoub @sdmaclea @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7287","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7287)"},{"Id":"432535975","IsPullRequest":true,"CreatedAt":"2019-04-12T12:13:54","Actor":"MichalStrehovsky","Number":"7286","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7286","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7286)"},{"Id":"432169261","IsPullRequest":true,"CreatedAt":"2019-04-12T05:19:03","Actor":"Dotnet-GitSync-Bot","Number":"7284","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7284","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7284)"},{"Id":"431720505","IsPullRequest":true,"CreatedAt":"2019-04-11T20:12:31","Actor":"trylek","Number":"7283","RawContent":null,"Title":"Minor SuperIlc fixes / improvements found while using the tool","State":"closed","Body":"One non-trivial revelation I made is that my previous introduction\r\nof Outcome was inconsistent w.r.t. the summary table as there is\r\ngenerally a different number of compilations and executions.\r\nI have fixed this by splitting the summary table in two for\r\ncompilations and executions.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7283","RelatedDescription":"Closed or merged PR \"Minor SuperIlc fixes / improvements found while using the tool\" (#7283)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"431772059","IsPullRequest":true,"CreatedAt":"2019-04-16T03:37:40","Actor":"dsplaisted","Number":"3111","RawContent":null,"Title":"Use PackageDownload","State":"closed","Body":"Fix https://github.com/dotnet/cli/issues/10440 (we will need https://github.com/dotnet/project-system/issues/4567 to be able to support this in VS).","Url":"https://github.com/dotnet/sdk/pull/3111","RelatedDescription":"Closed or merged PR \"Use PackageDownload\" (#3111)"},{"Id":"431068288","IsPullRequest":true,"CreatedAt":"2019-04-15T21:46:40","Actor":"nugetlurker","Number":"3106","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5951 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-preview2.5951 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3106","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-preview2.5951 into sdk\" (#3106)"},{"Id":"431068261","IsPullRequest":true,"CreatedAt":"2019-04-15T21:04:02","Actor":"nugetlurker","Number":"3105","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5951 into sdk","State":"closed","Body":"Insert NuGet Build 5.1.0-preview2.5951 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3105","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.1.0-preview2.5951 into sdk\" (#3105)"},{"Id":"433471159","IsPullRequest":false,"CreatedAt":"2019-04-15T20:47:03","Actor":"ericstj","Number":"3129","RawContent":null,"Title":"SDK doesn't honor TargetingPackVersion on FrameworkReference","State":"open","Body":"SDK permits specifying TargetingPackVersion metdata on FrameworkReference:\r\nhttps://github.com/dotnet/sdk/blob/7d6b26df6cc873e07816a098bb66a6bde2640b06/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L99-L103\r\n\r\nBut then it constructs the path to the targeting pack based on KnownFrameworkReference: \r\nhttps://github.com/dotnet/sdk/blob/7d6b26df6cc873e07816a098bb66a6bde2640b06/src/Tasks/Microsoft.NET.Build.Tasks/ResolveFrameworkReferences.cs#L112-L122\r\n\r\nAlso, is this really the way we should be specifying which framework to build against?  I had expected `RuntimeFrameworkVersion` to work, but it looks like that only controls the runtime and not ref-pack.\r\n\r\n/cc @dsplaisted ","Url":"https://github.com/dotnet/sdk/issues/3129","RelatedDescription":"Open issue \"SDK doesn't honor TargetingPackVersion on FrameworkReference\" (#3129)"},{"Id":"433460479","IsPullRequest":false,"CreatedAt":"2019-04-15T20:18:34","Actor":"vidarw","Number":"3128","RawContent":null,"Title":"No package for Ubuntu 19.04 (Disco Dingo)","State":"open","Body":"Ubuntu is officially releasing version 19.04 (Disco Dingo) within a week.\r\nThere is currently no `dotnet-sdk-2.2` available for the newset version of Ubuntu in the Microsoft repository.\r\n\r\nSolution would be to add a disco compatible release package or as a temporary fix provide a standalone .deb package to install with `dpkg`.","Url":"https://github.com/dotnet/sdk/issues/3128","RelatedDescription":"Open issue \"No package for Ubuntu 19.04 (Disco Dingo)\" (#3128)"},{"Id":"433244399","IsPullRequest":true,"CreatedAt":"2019-04-15T19:21:53","Actor":"dotnet-maestro[bot]","Number":"3127","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3127","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3127)"},{"Id":"432532625","IsPullRequest":true,"CreatedAt":"2019-04-14T13:54:35","Actor":"dotnet-maestro[bot]","Number":"3118","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19211.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19212.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3118","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3118)"},{"Id":"431838901","IsPullRequest":true,"CreatedAt":"2019-04-13T00:00:41","Actor":"peterhuene","Number":"3112","RawContent":null,"Title":"Escape output item specs for ResolvePackageAssets task.","State":"closed","Body":"This commit fixes the ResolvePackageAssets task to escape the output\r\nitem specs.  This allows assets in packages to contain characters that\r\nmight get unescaped by MSBuild.\r\n\r\nFixes #3069.","Url":"https://github.com/dotnet/sdk/pull/3112","RelatedDescription":"Closed or merged PR \"Escape output item specs for ResolvePackageAssets task.\" (#3112)"},{"Id":"432140915","IsPullRequest":true,"CreatedAt":"2019-04-12T23:48:57","Actor":"johnbeisner","Number":"3114","RawContent":null,"Title":"[WIP] running perf tests and upload to benchview in Azure DevOps","State":"closed","Body":"First draft: running perf tests and upload to benchview in Azure DevOps","Url":"https://github.com/dotnet/sdk/pull/3114","RelatedDescription":"Closed or merged PR \"[WIP] running perf tests and upload to benchview in Azure DevOps\" (#3114)"},{"Id":"432691504","IsPullRequest":true,"CreatedAt":"2019-04-12T23:15:36","Actor":"dsplaisted","Number":"3120","RawContent":null,"Title":"Allow test tools to roll forward across major versions of .NET Core","State":"closed","Body":"Currently the dotnet tools which run our tests target .NET Core 2.1.  This updates them to allow roll-forward across major .NET Core versions, so that they can run on a 3.0 runtime if 2.x isn't installed.","Url":"https://github.com/dotnet/sdk/pull/3120","RelatedDescription":"Closed or merged PR \"Allow test tools to roll forward across major versions of .NET Core\" (#3120)"},{"Id":"432733384","IsPullRequest":true,"CreatedAt":"2019-04-12T20:30:59","Actor":"sbomer","Number":"3125","RawContent":null,"Title":"Add ILLink targets and tests","State":"open","Body":"This adds linker targets, mostly adapted from https://github.com/mono/linker/blob/9766e2b2406a3d44cbf05e49ab2bd19b535e3e5a/src/ILLink.Tasks/ILLink.Tasks.targets, to run the linker after `ComputeFilesToPublish`.\r\n\r\nA few things still need to change (but I wanted to get what I have so far out for review):\r\n- Change property names to agreed-upon strings\r\n- Update deps file generation in response to https://github.com/dotnet/sdk/pull/3086. I think this needs https://github.com/dotnet/sdk/pull/3113 or another update PR to be merged.\r\n- Update the linker:\r\n  - to include `UsingTask` for other tasks in the assembly (namely, `ComputeManagedAssemblies`)\r\n  - for `ReferencePath` support\r\n  - with a net472 build of the task dll\r\n\r\nWhen I run these tests locally with a recent version of the linker, the checks pass up to the deps file asserts.\r\n\r\n@nguerrera, @fadimounir, @swaroop-sridhar PTAL","Url":"https://github.com/dotnet/sdk/pull/3125","RelatedDescription":"Open PR \"Add ILLink targets and tests\" (#3125)"},{"Id":"432733028","IsPullRequest":false,"CreatedAt":"2019-04-12T20:29:52","Actor":"KathleenDollard","Number":"3124","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/sdk/issues/3124","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#3124)"},{"Id":"432729778","IsPullRequest":true,"CreatedAt":"2019-04-12T20:20:56","Actor":"fadimounir","Number":"3123","RawContent":null,"Title":"Changes to emit a failure message when enabling ReadyToRun in unsupported scenarios","State":"open","Body":"Unsupported scenarios are:\r\n1) When a RID is not provided\r\n2) When publishing framework dependent apps (TEMP, until #3109 and #3110 are fixed)","Url":"https://github.com/dotnet/sdk/pull/3123","RelatedDescription":"Open PR \"Changes to emit a failure message when enabling ReadyToRun in unsupported scenarios\" (#3123)"},{"Id":"432723599","IsPullRequest":false,"CreatedAt":"2019-04-12T20:03:24","Actor":"JunTaoLuo","Number":"3122","RawContent":null,"Title":"Unable to resolve AppHost for the current runtime if it's not included in the SDK","State":"open","Body":"I'm seeing broken behaviour when the app host is not bundled in the targeting pack of the SDK.\r\n\r\nI discovered this as part of our dependency update in https://github.com/aspnet/AspNetCore-Tooling/pull/409. When we first ingested the changes, we saw errors such like:\r\n```\r\n(AspNetCore-Tooling) C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents> dotnet msbuild /nr:false /p:RunningAsTest=true /p:MicrosoftNETCoreApp30PackageVersion=3.0.0-preview5-27608-16 /p:_RazorBuildServerPipeName=\"bc0e5740-2362-4e4c-8244-64c38154f0d7\" /t:Build /p:Configuration=Debug /p:_RazorForceBuildServer=true\r\nMicrosoft (R) Build Engine version 16.1.54-preview+gd004974104 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\GitHub\\AspNetCore-Tooling\\.dotnet\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\MvcWithComponents.csproj]\r\nC:\\GitHub\\AspNetCore-Tooling\\.dotnet\\sdk\\3.0.100-preview4-011136\\Microsoft.Common.CurrentVersion.targets(4552,5): error MSB3030: Could not copy the file \"C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\obj\\Debug\\netcoreapp3.0\\MvcWithComponents.exe\" because it was not found. [C:\\Users\\nimullen\\AppData\\Local\\Temp\\Razor\\okum4oes.lay\\MvcWithComponents\\MvcWithComponents.csproj]\r\n```\r\nI have a binlog for the failing scenario:\r\n[msbuild.zip](https://github.com/dotnet/sdk/files/3074987/msbuild.zip)\r\n\r\nIt seems like the issue is that the app host package could not be found in \"\\.dotnet\\x64\\packs\\runtime.win-x64.Microsoft.NETCore.DotNetAppHost\" since the version of the runtime we reference is ahead of the the version that's included in the SDK. In this case, sdk\\3.0.100-preview4-011136 doesn't contain the targeting pack for runtime\\3.0.0-preview5-27608-16. However, using a newer runtime than what's included in the SDK is a core scenario that we depend on so how should this work?\r\n\r\nCan someone on the SDK team please advise on the expectation here and look through the binlog to see why the mechanism breaks in our scenario?\r\n\r\ncc @nguerrera @dsplaisted \r\n\r\ncc @dougbu @natemcmaster\r\n","Url":"https://github.com/dotnet/sdk/issues/3122","RelatedDescription":"Open issue \"Unable to resolve AppHost for the current runtime if it's not included in the SDK\" (#3122)"},{"Id":"432722156","IsPullRequest":true,"CreatedAt":"2019-04-12T19:59:08","Actor":"fadimounir","Number":"3121","RawContent":null,"Title":"Couple of fixes and tweaks to the R2R creation logic","State":"open","Body":"Changing crossgen commands to use response files.\r\nChanging /Platform_Assemblies_Paths to a set of /r arguments\r\nUsing resolved files list as assembly references to crossgen (temp hack until issue 3110 is fixed)","Url":"https://github.com/dotnet/sdk/pull/3121","RelatedDescription":"Open PR \"Couple of fixes and tweaks to the R2R creation logic\" (#3121)"},{"Id":"432641949","IsPullRequest":true,"CreatedAt":"2019-04-12T16:12:36","Actor":"chcosta","Number":"3119","RawContent":null,"Title":"/* Work in progress */ Test arcade changes","State":"open","Body":"Do not merge!\r\n\r\nPlaying around with some template changes to enable test run title for publishing test results.","Url":"https://github.com/dotnet/sdk/pull/3119","RelatedDescription":"Open PR \"/* Work in progress */ Test arcade changes\" (#3119)"},{"Id":"433231210","IsPullRequest":false,"CreatedAt":"2019-04-12T15:12:26","Actor":"cartermp","Number":"3126","RawContent":null,"Title":"Warn if project is missing both Desktop SDK and UseWPF/UseWinForms","State":"open","Body":"Even if we have cool tooling that adds the appropriate stuff to a project file based on various actions in the IDE, there will still be users who manually edit their WinForms/WPF project files.\r\n\r\nWe should emit a warning under the following conditions:\r\n\r\n* `Microsoft.NET.Sdk.WindowsDesktop` is specified but there is no `UseWPF` or `UseWinForms`\r\n* `UseWPF` or `UseWinForms` is specified but the SDK attribute is not `Microsoft.NET.Sdk.WindowsDesktop`\r\n\r\nIn the first case, it would be great if the warning could say something to the effect of:\r\n\r\n\"Microsoft.NET.Sdk.WindowsDesktop is specified, but no corresponding UseWPF or UseWinForms property was found.\"\r\n\r\nIn the latter case, using WPF as an example, something to the effect of:\r\n\r\n\"UseWPF was specified but the SDK attribute is not Microsoft.NET.Sdk.WindowsDesktop\"\r\n\r\nNot sure if this is an SDK concern or not, but I figured I'd log it somewhere.","Url":"https://github.com/dotnet/sdk/issues/3126","RelatedDescription":"Open issue \"Warn if project is missing both Desktop SDK and UseWPF/UseWinForms\" (#3126)"},{"Id":"432300971","IsPullRequest":true,"CreatedAt":"2019-04-11T22:33:45","Actor":"nugetlurker","Number":"3117","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into sdk","State":"open","Body":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3117","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3117)"},{"Id":"432300957","IsPullRequest":true,"CreatedAt":"2019-04-11T22:33:42","Actor":"nugetlurker","Number":"3116","RawContent":null,"Title":"Insert NuGet Build 5.0.1-rtm.5946 into sdk","State":"open","Body":"Insert NuGet Build 5.0.1-rtm.5946 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3116","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.1-rtm.5946 into sdk\" (#3116)"},{"Id":"432201230","IsPullRequest":false,"CreatedAt":"2019-04-11T19:21:25","Actor":"KathleenDollard","Number":"3115","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/sdk/issues/3115","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#3115)"},{"Id":"431984959","IsPullRequest":true,"CreatedAt":"2019-04-11T12:01:56","Actor":"dotnet-bot","Number":"3113","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3113","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3113)"},{"Id":"431111800","IsPullRequest":true,"CreatedAt":"2019-04-11T02:07:16","Actor":"dsplaisted","Number":"3107","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Replace #3072","Url":"https://github.com/dotnet/sdk/pull/3107","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3107)"},{"Id":"431061785","IsPullRequest":false,"CreatedAt":"2019-04-10T13:20:40","Actor":"johnbeisner","Number":"3104","RawContent":null,"Title":"Allow for the disablement of ResolveAppHosts","State":"closed","Body":"**Repro steps:**\r\nBuild win-arm [all arm* RIDs have this failure] @ commit 0606a12720f0eace5af77c545d0d91b96ec92e27\r\n\r\n**Error:**\r\nerror NU1605: Detected package downgrade: runtime.win-arm.Microsoft.NETCore.DotNetAppHost from 3.0.0-preview5-27607-08 to 3.0.0-preview4-27501-7. Reference the package directly from the project to select a different version. \r\n DownloadPackage -> Microsoft.NETCore.DotNetAppHost 3.0.0-preview5-27607-08 -> runtime.win-arm.Microsoft.NETCore.DotNetAppHost (>= 3.0.0-preview5-27607-08) \r\n DownloadPackage -> runtime.win-arm.Microsoft.NETCore.DotNetAppHost (>= 3.0.0-preview4-27501-7)\r\n\r\n**From Microsoft.NET.Sdk.TargetingPackResolution.targets:**\r\n```\r\n    <ResolveAppHosts TargetFrameworkIdentifier=\"$(TargetFrameworkIdentifier)\"\r\n                     TargetFrameworkVersion=\"$(_TargetFrameworkVersionWithoutV)\"\r\n                     TargetingPackRoot=\"$(NetCoreTargetingPackRoot)\"\r\n                     AppHostRuntimeIdentifier=\"$(AppHostRuntimeIdentifier)\"\r\n                     RuntimeFrameworkVersion=\"$(RuntimeFrameworkVersion)\"\r\n                     PackAsToolShimRuntimeIdentifiers=\"@(_PackAsToolShimRuntimeIdentifiers)\"\r\n                     DotNetAppHostExecutableNameWithoutExtension=\"$(_DotNetAppHostExecutableNameWithoutExtension)\"\r\n                     RuntimeGraphPath=\"$(BundledRuntimeIdentifierGraphFile)\"\r\n                     KnownAppHostPacks=\"@(KnownAppHostPack)\">\r\n\r\n      <Output TaskParameter=\"PackagesToDownload\" ItemName=\"_PackageReferenceToAdd\" />\r\n      <Output TaskParameter=\"AppHost\" ItemName=\"AppHostPack\" />\r\n      <Output TaskParameter=\"PackAsToolShimAppHostPacks\" ItemName=\"PackAsToolShimAppHostPack\" />\r\n\r\n    </ResolveAppHosts>\r\n```\r\n\r\n_Work-around is to disable the 'ResolveFrameworkReferences' target._\r\n\r\nThe 'ResolveFrameworkReferences' step of the 'ResolveFrameworkReferences' target can be disabled by adding:\r\n`<DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>`\r\n\r\nThe 'ResolveAppHosts' step of the 'ResolveFrameworkReferences' target should have a similar mechanism.\r\n","Url":"https://github.com/dotnet/sdk/issues/3104","RelatedDescription":"Closed issue \"Allow for the disablement of ResolveAppHosts\" (#3104)"},{"Id":"431235557","IsPullRequest":false,"CreatedAt":"2019-04-09T23:14:53","Actor":"nguerrera","Number":"3110","RawContent":null,"Title":"Resolve runtime pack assets for crossgen even if app is framework-dependent","State":"open","Body":"Crossgen operates on implementation assemblies only, even when passed as references to the compiler. To crossgen a framework-dependent app, we need all of the framework implementation assemblies to be passed to crossgen as references.\r\n\r\nNote that crossgen requires picking a RID. The app can be framework-dependent, but it must be RID specific. (Crossgen generates native code, which can't be rid-agnostic, obviously.) We are guaranteed to have downloaded the runtime packs, we just need to resolve the framework assemblies from it as though the app was self-contained, but without putting them in deps.json or copying them, etc.\r\n\r\nToday, crossgen tasks can find the base shared framework implementation assemblies next to it (it ships in the base runtime pack), but this doesn't work for the other frameworks like WindowsDesktop or ASP.NET. This also can't just blindly aggregate all the files in all the runtime packs, this list needs to account for conflict resolution (WindowsBase in WindowsDesktop wins over WindowsBase in NETCoreApp), etc.","Url":"https://github.com/dotnet/sdk/issues/3110","RelatedDescription":"Open issue \"Resolve runtime pack assets for crossgen even if app is framework-dependent\" (#3110)"},{"Id":"431234100","IsPullRequest":false,"CreatedAt":"2019-04-09T23:08:44","Actor":"nguerrera","Number":"3109","RawContent":null,"Title":"Gather appropriate list of managed runtime assemblies for crossen and (eventually) linker","State":"open","Body":"Today, crossgen (new ReadyToRun feature) operates over all files to publish and filters out what is not IL. We have decided that the compilation set should be restricted by default to the set of files that we deem are runtime managed assets and designate as such in the .deps.json.\r\n\r\nAs of now, there isn't an exact match for this list that is readily available. _ResolvedCopyLocalPublishAssets + IntermediateAssembly is close.\r\n\r\nI suspect that with #3080, this will be easier to do, but I didn't review in detail yet.\r\n\r\nWe will want to use the same set of runtime assemblies as candidates for the linker as crossgen. This is high priority as we are hoping to have both linker and crossgen feature-complete for Preview 5.","Url":"https://github.com/dotnet/sdk/issues/3109","RelatedDescription":"Open issue \"Gather appropriate list of managed runtime assemblies for crossen and (eventually) linker\" (#3109)"},{"Id":"431167464","IsPullRequest":true,"CreatedAt":"2019-04-09T20:08:25","Actor":"dsplaisted","Number":"3108","RawContent":null,"Title":"Fix conflicts between multiple uses of _PackageReferenceToAdd","State":"open","Body":"Fixes #3027","Url":"https://github.com/dotnet/sdk/pull/3108","RelatedDescription":"Open PR \"Fix conflicts between multiple uses of _PackageReferenceToAdd\" (#3108)"},{"Id":"430812433","IsPullRequest":false,"CreatedAt":"2019-04-09T07:35:55","Actor":"yyjdelete","Number":"3103","RawContent":null,"Title":"Reference transitive not working well when app and libs has different targetFramework, and lib use an transitive reference from special targetFramework of an multi-targetFramework PackageReference/ProjectReference","State":"open","Body":"Sdk Version: `3.0.100-preview3-010431`, `2.1.504`\r\nRun `ConsoleApp5` in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an `MissingMethodException` and an `FileNotFoundException` for `System.Data.SqlClient, Version=4.5.0.0`\r\n\r\nThis can also happen with `PackageReference`. I reference Dapper from an ClassLibrary with netstandard2.0, and the main App is net472, and failed to found `System.Data.SqlClient, Version=4.5.0.0`.\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\nExpected:\r\nThe `FileNotFoundException` not happen and the `System.Data.SqlClient, Version=4.5.0.0` is include in the output bins.\r\nThe below behavior may be not expected, but it's the current behavior for project struct(dependencies) in VS2019. (Rider follow the actual behavior for project struct)\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(netstandard2.0)\r\n------|--System.Data.SqlClient(netstandard2.0)\r\n```\r\n\r\nActual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(missing from the output of ConsoleApp5)\r\n---|--ClassLibrary2(net472)\r\n```","Url":"https://github.com/dotnet/sdk/issues/3103","RelatedDescription":"Open issue \"Reference transitive not working well when app and libs has different targetFramework, and lib use an transitive reference from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\" (#3103)"},{"Id":"430708424","IsPullRequest":true,"CreatedAt":"2019-04-09T02:30:22","Actor":"dotnet-bot","Number":"3101","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3101","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3101)"},{"Id":"430708743","IsPullRequest":true,"CreatedAt":"2019-04-09T00:03:03","Actor":"dsplaisted","Number":"3102","RawContent":null,"Title":"Don't include base FrameworkReferences when creating NuGet packages","State":"open","Body":"Per [comment](https://github.com/aspnet/AspNetCore/pull/9033#issuecomment-481043113) from @nkolev92:\r\n\r\n> I think regardless of whether it gets reverted or not, the SDK should set \"pack=false\" to Microsoft.NETCore.App.","Url":"https://github.com/dotnet/sdk/pull/3102","RelatedDescription":"Open PR \"Don't include base FrameworkReferences when creating NuGet packages\" (#3102)"},{"Id":"430672111","IsPullRequest":true,"CreatedAt":"2019-04-08T21:42:47","Actor":"dsplaisted","Number":"3100","RawContent":null,"Title":"Look for platform manifest using convention currently used by ASP.NET targeting pack","State":"open","Body":"Fix https://github.com/aspnet/AspNetCore/issues/8836","Url":"https://github.com/dotnet/sdk/pull/3100","RelatedDescription":"Open PR \"Look for platform manifest using convention currently used by ASP.NET targeting pack\" (#3100)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1116672310809903105","CreatedAt":"2019-04-12T12:00:00+00:00","UserScreenname":"dotnet","Text":"The #OnDotNet show joined forces with @azureadvocates to bring you DevOps for https://t.co/iOiV9r53NV Developers!… https://t.co/eP7EZV54nW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":26,"RawContent":null},{"Id":"1116372533907902465","CreatedAt":"2019-04-11T16:08:47+00:00","UserScreenname":"dotnet","Text":"We're now live! https://t.co/XI2YUBZA88","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":33,"FavoriteCount":11,"RawContent":null},{"Id":"1115751220235231232","CreatedAt":"2019-04-09T22:59:55+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":1,"RawContent":null},{"Id":"1115373724868333570","CreatedAt":"2019-04-08T21:59:53+00:00","UserScreenname":"dotnet","Text":"On this week's @aspnet Community Standup, Glenn Condron (@condrong) takes Workers Everywhere!\n\nJoin us on Tuesday A… https://t.co/wo80u0zkOk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":13,"RawContent":null},{"Id":"1114554336577609729","CreatedAt":"2019-04-06T15:43:55+00:00","UserScreenname":"dotnet","Text":"Using Windows Installer XML (WiX)? Time to say congrats to @robmen,  @barnson and all the other contributors of… https://t.co/P1rw6S2wGf","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":60,"FavoriteCount":14,"RawContent":null},{"Id":"1113832934580948993","CreatedAt":"2019-04-04T15:57:20+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2019-04-16T05:30:32.5679253Z","RunDurationInMilliseconds":9363}