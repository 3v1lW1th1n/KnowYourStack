{"Data":{"GitHub":{"Issues":[{"Id":"388473572","IsPullRequest":true,"CreatedAt":"2018-12-07T02:29:57","Actor":"webprofusion-chrisc","Number":"114","RawContent":null,"Title":"Fix minor typo","State":"closed","Body":"Fix misspelled 'coverage'.","Url":"https://github.com/dotnet/wpf/pull/114","RelatedDescription":"Closed or merged PR \"Fix minor typo\" (#114)"},{"Id":"388457940","IsPullRequest":false,"CreatedAt":"2018-12-07T00:39:58","Actor":"stefanolson","Number":"113","RawContent":null,"Title":"PresentationTraceSources.TraceLevel not found","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: 10, 1803\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No (well not on 4.5 for sure)\r\n\r\n **Problem description:**\r\nattempting to use PresentationTraceSources.TraceLevel causes failure to compile with  the error:\r\nerror MC3045: Unknown property 'PresentationTraceSources.TraceLevel' for type 'System.Windows.Data.Binding' encountered while parsing a Markup Extension. \r\n\r\nWorks fine in WPF on the .net framework.\r\n\r\n **Expected behavior:**\r\nShould compile and run and trace bindings\r\n \r\n **Minimal repro:**\r\n` <TextBox Grid.Row=\"0\" Text=\"{Binding PresentationTraceSources.TraceLevel=High}\" Grid.Column=\"1\"/>`\r\n\r\nStefan","Url":"https://github.com/dotnet/wpf/issues/113","RelatedDescription":"Open issue \"PresentationTraceSources.TraceLevel not found\" (#113)"},{"Id":"388438428","IsPullRequest":false,"CreatedAt":"2018-12-06T23:14:52","Actor":"dotMorten","Number":"112","RawContent":null,"Title":"Add RelativePanel control","State":"open","Body":"I'd like to propose porting UWP's RelativePanel control to WPF. It's a great way to layout UI, while reducing the number of panels needed to create in order to perform such a layout. A panel like this could also form the basis for porting Adaptive Triggers down the line (as these two go really well gand-in-hand).\r\n\r\nI have an implementation of it here that I'd be happy to contribute back to WPF: https://github.com/dotMorten/UniversalWPF/tree/master/src/UniversalWPF\r\n\r\nI'm also hoping that the [Windows UI Xaml](https://github.com/Microsoft/microsoft-ui-xaml/issues/36) project will soon share UWP's RelativePanel implementation, to ensure 100% consistency in behavior (AFAIK my implementation matches in behavior, but knowing that there are a lot of edge cases, I probably don't handle them all).","Url":"https://github.com/dotnet/wpf/issues/112","RelatedDescription":"Open issue \"Add RelativePanel control\" (#112)"},{"Id":"388410592","IsPullRequest":false,"CreatedAt":"2018-12-06T21:43:12","Actor":"weltkante","Number":"111","RawContent":null,"Title":"DragLeave handlers can modify AllowedEffects of following DragEnter handlers","State":"open","Body":"* .NET Core Version: **3.0.100-preview-009812**\r\n* Windows version: **1809**\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8? **Yes**\r\n\r\n> Project maintainers will consider changes that improve the product or fix known bugs (please file issues to make bugs \"known\").\r\n\r\nRe-reporting a bug I previously reported against Desktop Framework WPF which was decided not to get fixed because \"it isn't broken enough to require a fix\". My opinion differs so I'll try again to get this fixed.\r\n\r\n **Problem description:**\r\nDragLeave handlers can modify the AllowedEffects of the following DragEnter handler by modifying their DragEventArgs.Effects property. Can happen accidently when pushing all the different drag events through a common handler. The problem is transient (fixes itself on the next mouse move because the DragLeave handler won't be called again) but causes cursor flickering due to the incorrect AllowedEffects in DragEnter. If the DragLeave handler is in a 3rd party control you can't easily fix the cursor flickering.\r\n\r\nRoot cause is that effects are passed by-ref (input is AllowedEffects, [output is Effects](https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/DragDrop.cs,1256)) to two drag handlers in succession in [DragDrop.cs, OleDragOver implementation](https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/DragDrop.cs,1001) at [line 1024](https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/DragDrop.cs,1024) and [line 1033](https://referencesource.microsoft.com/#PresentationCore/Core/CSharp/System/Windows/DragDrop.cs,1033).\r\n\r\nThe simplest fix would be to store the original effect variable before calling the DragLeave handler and restore it before calling the DragEnter handler.\r\n \r\n **Actual behavior:**\r\nAllowedEffects in DragEnter handler are wrong if the DragLeave handler was setting DragEventArgs.Effects - in the given example this manifests itself in a flickering cursor when starting a drag from the green area and moving the cursor between red and blue areas. When you have more complex behavior attached to D&D like a thumbnail following the cursor this can get even more obvious.\r\n \r\n **Expected behavior:**\r\nAllowedEffects in DragEnter handler should match those specified by the drag originator and be independent of whatever DragLeave handlers returned from their DragEventArgs.Effects\r\n \r\n **Minimal repro:**\r\n```xaml\r\n<Window x:Class=\"MyWPFApp.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\r\n    <Grid>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition/>\r\n            <RowDefinition/>\r\n        </Grid.RowDefinitions>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition/>\r\n            <ColumnDefinition/>\r\n        </Grid.ColumnDefinitions>\r\n        <Border Grid.Row=\"0\" Grid.ColumnSpan=\"2\"\r\n                MouseLeftButtonDown=\"StartDrag\"\r\n                Background=\"DarkGreen\">\r\n            <TextBlock Foreground=\"White\" Text=\"drag from here\"\r\n                       HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>\r\n        </Border>\r\n        <Border Grid.Row=\"1\" Grid.Column=\"0\" AllowDrop=\"True\"\r\n                DragEnter=\"CopyDragHandler\"\r\n                DragOver=\"CopyDragHandler\"\r\n                DragLeave=\"CopyDragHandler\"\r\n                Drop=\"CopyDragHandler\"\r\n                Background=\"DarkRed\">\r\n            <TextBlock Foreground=\"White\" Text=\"accepts copy\"\r\n                       HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>\r\n        </Border>\r\n        <Border Grid.Row=\"1\" Grid.Column=\"1\" AllowDrop=\"True\"\r\n                DragEnter=\"LinkDragHandler\"\r\n                DragOver=\"LinkDragHandler\"\r\n                DragLeave=\"LinkDragHandler\"\r\n                Drop=\"LinkDragHandler\"\r\n                Background=\"DarkBlue\">\r\n            <TextBlock Foreground=\"White\" Text=\"accepts link\"\r\n                       HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"/>\r\n        </Border>\r\n    </Grid>\r\n</Window>\r\n```\r\n```c#\r\nusing System.Windows;\r\nusing System.Windows.Input;\r\n\r\nnamespace MyWPFApp\r\n{\r\n    public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n        }\r\n\r\n        private void StartDrag(object sender, MouseButtonEventArgs e)\r\n        {\r\n            DragDrop.DoDragDrop((DependencyObject)sender, \"data\", DragDropEffects.Copy | DragDropEffects.Link);\r\n        }\r\n\r\n        private void CopyDragHandler(object sender, DragEventArgs e)\r\n        {\r\n            e.Effects = e.AllowedEffects & DragDropEffects.Copy;\r\n        }\r\n\r\n        private void LinkDragHandler(object sender, DragEventArgs e)\r\n        {\r\n            e.Effects = e.AllowedEffects & DragDropEffects.Link;\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/wpf/issues/111","RelatedDescription":"Open issue \"DragLeave handlers can modify AllowedEffects of following DragEnter handlers\" (#111)"},{"Id":"388024619","IsPullRequest":false,"CreatedAt":"2018-12-06T20:57:06","Actor":"lindexi","Number":"99","RawContent":null,"Title":"Can we build xaml to XBF in WPF?","State":"closed","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nWPF should cost too many time to parse the xaml during startup. In UWP, we can build xaml to XBF that the binary representation enables performance advantages versus loading and parsing a XAML file as text.","Url":"https://github.com/dotnet/wpf/issues/99","RelatedDescription":"Closed issue \"Can we build xaml to XBF in WPF?\" (#99)"},{"Id":"388165563","IsPullRequest":true,"CreatedAt":"2018-12-06T20:53:16","Actor":"AndreyAkinshin","Number":"105","RawContent":null,"Title":"Remove redundant comparisons with true","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/105","RelatedDescription":"Closed or merged PR \"Remove redundant comparisons with true\" (#105)"},{"Id":"388358305","IsPullRequest":false,"CreatedAt":"2018-12-06T19:17:21","Actor":"gix","Number":"110","RawContent":null,"Title":"First-class support for custom themes","State":"open","Body":"It is currently not possible to use a custom theme as a drop-in replacement for a system theme. While it *is* possible to style everything, it requires more cumbersome work that is easily missed.\r\n\r\nFor example:\r\n- Custom styles outside of the custom theme (e.g. local styles in a `UserControl`) always require an explicit `BasedOn=\"{StaticResource {x:Type ...}}\"` or else they are based on the system theme.\r\n- Inheritance does not work. Normally `ListView` without a `GridView` uses the `ListBox` style, but providing a custom one is not enough, it has to be explicitly set on the `ListView`.\r\n- Providing a style for `ContextMenu` does not style the built-in one of textboxes or scrollbars. A prominent example where this can be seen is Visual Studio:\r\n![wpf1](https://user-images.githubusercontent.com/51795/49605011-b52c0280-f98f-11e8-83e1-55cf7431466e.png)\r\n\r\n[My high-quality Aero themes for WPF](https://gix.github.io/PresentationTheme.Aero/) use reflection and method hooking to solve these problems (But that's just a brittle hack. In fact, it breaks on .NET Core because tiered compilation makes hooking more difficult.). It does so by replacing `System.Windows.SystemResources.FindDictionaryResource`, normally responsible for locating the theme resource assembly and style for a given type or resource key, with one that can load custom resource dictionaries.\r\n\r\nSo my wish would be for adoption of a public API to set policies for resource loading, at least for `PresentationFramework.dll`.","Url":"https://github.com/dotnet/wpf/issues/110","RelatedDescription":"Open issue \"First-class support for custom themes\" (#110)"},{"Id":"388264690","IsPullRequest":false,"CreatedAt":"2018-12-06T15:28:09","Actor":"onovotny","Number":"109","RawContent":null,"Title":"Hyphen based ligatures don't work in WPF","State":"open","Body":"See https://github.com/tonsky/FiraCode/issues/259 for the full issue description.\r\n\r\nWould be good to get this fixed for .NET Core 3.","Url":"https://github.com/dotnet/wpf/issues/109","RelatedDescription":"Open issue \"Hyphen based ligatures don't work in WPF\" (#109)"},{"Id":"388204900","IsPullRequest":true,"CreatedAt":"2018-12-06T13:08:57","Actor":"dotnet-maestro[bot]","Number":"108","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18605.14\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/108","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#108)"},{"Id":"388199305","IsPullRequest":false,"CreatedAt":"2018-12-06T12:48:45","Actor":"JamesBlack2","Number":"107","RawContent":null,"Title":"The app is not compatible ","State":"open","Body":"我使用VS2019新建了一个测试用的.net core的控制台应用程序，但是当我把这程序发布后生成的文件复制到Win7 service 1,7061的 32位系统想远行时，却提示文件版本与系统不兼容，就是将其设置兼容性再跑时，也不行。是否VS2019预览版并没有完全将.net core的运行打包在一起？\r\n\r\n下面是app的项目配置。\r\n《Project Sdk=\"Microsoft.NET.Sdk\">\r\n 《 PropertyGroup>\r\n   《 OutputType>Exe《/OutputType>\r\n   《 TargetFramework>netcoreapp2.2《/TargetFramework>\r\n  《/PropertyGroup>\r\n《/Project>","Url":"https://github.com/dotnet/wpf/issues/107","RelatedDescription":"Open issue \"The app is not compatible \" (#107)"},{"Id":"388176663","IsPullRequest":true,"CreatedAt":"2018-12-06T11:42:50","Actor":"AndreyAkinshin","Number":"106","RawContent":null,"Title":"Improve XamlType.LookupIsConstructible with the help of LINQ","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/106","RelatedDescription":"Open PR \"Improve XamlType.LookupIsConstructible with the help of LINQ\" (#106)"},{"Id":"388164790","IsPullRequest":true,"CreatedAt":"2018-12-06T11:09:09","Actor":"AndreyAkinshin","Number":"104","RawContent":null,"Title":"Remove redundant explicit array type specifications","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/104","RelatedDescription":"Open PR \"Remove redundant explicit array type specifications\" (#104)"},{"Id":"388162669","IsPullRequest":true,"CreatedAt":"2018-12-06T11:03:18","Actor":"AndreyAkinshin","Number":"103","RawContent":null,"Title":"Optimize usings","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/103","RelatedDescription":"Open PR \"Optimize usings\" (#103)"},{"Id":"387995958","IsPullRequest":false,"CreatedAt":"2018-12-06T08:18:50","Actor":"zezba9000","Number":"95","RawContent":null,"Title":"Q) Transform XAML into C# API?","State":"closed","Body":"I know the code release is new and may not have everything yet but what API(s) would I use to transform XAML into a C# partial class for code behind as is done normally in WPF?","Url":"https://github.com/dotnet/wpf/issues/95","RelatedDescription":"Closed issue \"Q) Transform XAML into C# API?\" (#95)"},{"Id":"388075153","IsPullRequest":true,"CreatedAt":"2018-12-06T06:31:58","Actor":"lindexi","Number":"102","RawContent":null,"Title":"We use language keywords instead of BCL types","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/102","RelatedDescription":"Open PR \"We use language keywords instead of BCL types\" (#102)"},{"Id":"388050568","IsPullRequest":true,"CreatedAt":"2018-12-06T04:19:59","Actor":"lindexi","Number":"101","RawContent":null,"Title":"Replace IsAssignableFrom to is pattern","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/101","RelatedDescription":"Open PR \"Replace IsAssignableFrom to is pattern\" (#101)"},{"Id":"388013328","IsPullRequest":true,"CreatedAt":"2018-12-06T02:42:09","Actor":"vatsan-madhavan","Number":"98","RawContent":null,"Title":"Adding Sdk section to global.json","State":"closed","Body":"Adding an Sdk section to global.json. This is needed to ensure that CI servers deterministically use the version of .NET Core 3.0 Sdk specified here to build the projects in the repo.","Url":"https://github.com/dotnet/wpf/pull/98","RelatedDescription":"Closed or merged PR \"Adding Sdk section to global.json\" (#98)"},{"Id":"388026006","IsPullRequest":false,"CreatedAt":"2018-12-06T02:10:03","Actor":"lindexi","Number":"100","RawContent":null,"Title":"ObjectWriterContext.GetDestinationType may throw null reference exception","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: Windows 10 17025\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: do not know\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nObjectWriterContext.GetDestinationType may throw null reference exception when CurrentFrame.Previous is not ObjectWriterFrame. \r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nThe code is in       wpf/src/Microsoft.DotNet.Wpf/src/System.Xaml/System/Xaml/Context/ObjectWriterContext.cs\r\n\r\n        internal XamlType GetDestinationType()\r\n        {\r\n            ObjectWriterFrame frame = _stack.CurrentFrame;\r\n\r\n            if (frame == null)\r\n            {\r\n                return null;\r\n            }\r\n\r\n            if (frame.Instance != null && frame.XamlType == null) // when true\r\n            {\r\n                //\r\n                // Text/TypeConverter, we need to go up a frame\r\n                frame = frame.Previous as ObjectWriterFrame; // when the  frame.Previous is not ObjectWriterFrame that the frame is null\r\n            }\r\n\r\n            // for frame is null, calling the frame.Member will break\r\n            if (frame.Member == XamlLanguage.Initialization) \r\n            {\r\n                return frame.XamlType;\r\n            }\r\n            return frame.Member.Type;\r\n        }      \r\n\r\nhttps://github.com/dotnet/wpf/blob/bed20df8769a90615fb1a3a8efb3c18611283645/src/Microsoft.DotNet.Wpf/src/System.Xaml/System/Xaml/Context/ObjectWriterContext.cs#L325\r\n \r\n **Expected behavior:**\r\n\r\nWe should check the  `frame = frame.Previous as ObjectWriterFrame;` and the frame is not null.\r\n \r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/100","RelatedDescription":"Open issue \"ObjectWriterContext.GetDestinationType may throw null reference exception\" (#100)"},{"Id":"387990312","IsPullRequest":false,"CreatedAt":"2018-12-06T01:14:09","Actor":"KelsonBall","Number":"93","RawContent":null,"Title":"build error from artifact (Duplicate attribute in AssemblyInfo.cs)","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n3.0.100-preview-009750\r\n\r\n* Windows version: (`winver`)\r\nVersion 1809 (OS Build 17763.134)\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\t\r\n\r\nWhen trying to build a basic WPF project for dotnet core 3.0 I get multiple duplicate attribute errors that **appear** to be from a temporary file (`\\obj\\Debug\\netcoreapp3.0\\NetCoreWpf_xnekjbde_wpftmp.AssemblyInfo.cs`) conflicting with the actual `AssemblyInfo.cs` file\r\n\r\n To get this error, after a fresh install of Visual Studio 2019 preview 1 I tried to open and build a wpf dotnet core project modified using Brian Lagunis's instructions [from his blog post here](http://brianlagunas.com/getting-started-net-core-3-conveting-existing-wpf-application/). The project is empty (was generated in Visual Studio 15.9.3)\r\n\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n6  duplicate attribute errors fail the build.\r\nCS0579 Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute\r\nCS0579 Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute\r\nCS0579 Duplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute\r\nCS0579 Duplicate 'System.Reflection.AssemblyProductAttribute' attribute\r\nCS0579 Duplicate 'System.Reflection.AssemblyTitleAttribute' attribute\r\nCS0579 Duplicate 'System.Reflection.AssemblyVersionAttribute' attribute\r\n\r\n **Expected behavior:**\r\n No duplicate attribute errors occur unless there are duplicate attributes in my project, in which case the error message should point to the human-made code where the error occurs.\r\n\r\n **Minimal repro:**\r\n https://github.com/KelsonBall/WpfDotnetCoreDuplicateAttributeError\r\n","Url":"https://github.com/dotnet/wpf/issues/93","RelatedDescription":"Closed issue \"build error from artifact (Duplicate attribute in AssemblyInfo.cs)\" (#93)"},{"Id":"388004177","IsPullRequest":false,"CreatedAt":"2018-12-06T00:25:40","Actor":"lindexi","Number":"97","RawContent":null,"Title":"Bring win2d to WPF","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\n[Win2D](http://github.com/Microsoft/Win2D) is an easy-to-use Windows Runtime API for immediate mode 2D graphics rendering with GPU acceleration. \r\n\r\nCan we bring win2d to WPF?","Url":"https://github.com/dotnet/wpf/issues/97","RelatedDescription":"Open issue \"Bring win2d to WPF\" (#97)"},{"Id":"387996784","IsPullRequest":false,"CreatedAt":"2018-12-05T23:52:36","Actor":"taori","Number":"96","RawContent":null,"Title":"Allow registering xmlns prefixes for foreign assemblies","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\nAs pointed out in https://github.com/dotnet/wpf/issues/45, using\r\n\r\n```cs\r\n[assembly: XmlnsPrefix(\"http://schemas.dotMorten.com/2018\", \"custom\")]\r\n[assembly: XmlnsDefinition(\"http://schemas.dotMorten.com/2018\", \"MyClassNamespace\")]\r\n```\r\n\r\nonly works for assemblies you own. \r\n\r\nIt would be nice if you could declare those attributes at application level, to provide controls of an assembly with custom namespaces, if they lack those attributes, or even override them. \r\n\r\nWhile the later one isn't essential, i think the first one could be useful, if people share their controls on nuget and don't know about custom namespace prefixes.\r\n\r\nAt least i've had situations where i was annoyed with the awfully verbose prefixes others chose, or the lack of them alltogether.\r\n\r\nAnother scenario would be that you are supplied with a viewmodels assembly and are going to use those in your views. Being able to group those namespaces would be neat.","Url":"https://github.com/dotnet/wpf/issues/96","RelatedDescription":"Open issue \"Allow registering xmlns prefixes for foreign assemblies\" (#96)"},{"Id":"387995573","IsPullRequest":false,"CreatedAt":"2018-12-05T23:47:27","Actor":"dotMorten","Number":"94","RawContent":null,"Title":"XAML parsing is 27% slower on .NETCore than on .NET Framework","State":"open","Body":"* .NET Core Version: 3.0 Preview1\r\n* Windows version: 1803\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n I expected/hoped that with the XmlReader hopefully being `Span<T>` based. the XAML parser would be faster in .NET Core than the .NET Framework equivalent. However that's not what I'm seeing with this benchmark:\r\n```cs\r\n    public class BenchmarkTests\r\n    {\r\n        static readonly string xamlString = @\"<MyObject xmlns=\"\"clr-namespace:XamlBenchmark;assembly=XamlBenchmark\"\" StringProperty=\"\"Hello World\"\" Int32Property=\"\"1234\"\" DoubleProperty=\"\"123.4567890\"\" FloatProperty=\"\"-0.9876\"\" />\";\r\n\r\n        [Benchmark]\r\n        public object Test1()\r\n        {\r\n            object instance = System.Xaml.XamlServices.Parse(xamlString);\r\n            return instance;\r\n        }\r\n    }\r\n    public class MyObject\r\n    {\r\n        public string StringProperty { get; set; }\r\n        public int Int32Property { get; set; }\r\n        public double DoubleProperty { get; set; }\r\n        public float FloatProperty { get; set; }\r\n    }\r\n```\r\n\r\nHere are the results:\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17763.1 (1809/October2018Update/Redstone5)\r\nIntel Xeon CPU E5-1620 v3 3.50GHz, 1 CPU, 8 logical and 4 physical cores\r\n  [Host]     : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.3190.0\r\n  Job-FQKGZY : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.7.3190.0\r\n  Job-YTBJBT : .NET Core 3.0.0-preview-27122-01 (CoreCLR 4.6.27121.03, CoreFX 4.7.18.57103), 64bit RyuJIT\r\n\r\n\r\n```\r\n| Method | Runtime |     Toolchain |     Mean |    Error |   StdDev | Ratio | RatioSD |\r\n|------- |-------- |-------------- |---------:|---------:|---------:|------:|--------:|\r\n|  Test1 |     Clr |        net472 | 363.3 us | 7.139 us | 7.639 us |  1.00 |    0.00 |\r\n|  Test1 |    Core | netcoreapp3.0 | 461.6 us | 9.078 us | 8.048 us |  1.27 |    0.03 |\r\n\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/94","RelatedDescription":"Open issue \"XAML parsing is 27% slower on .NETCore than on .NET Framework\" (#94)"},{"Id":"387957493","IsPullRequest":true,"CreatedAt":"2018-12-05T22:05:18","Actor":"LyalinDotCom","Number":"92","RawContent":null,"Title":"Update SafeSecurityHelper.cs","State":"closed","Body":"Removed an extra space in a a functions Attribute","Url":"https://github.com/dotnet/wpf/pull/92","RelatedDescription":"Closed or merged PR \"Update SafeSecurityHelper.cs\" (#92)"},{"Id":"387954702","IsPullRequest":false,"CreatedAt":"2018-12-05T21:32:08","Actor":"dotMorten","Number":"91","RawContent":null,"Title":"Add support for Color Emoji support","State":"open","Body":"Currently when you render emojis in WPF, they are rendered black'n'white, and not rendering with the correct emoji color.\r\nIt would be good if we could update the text rasterizer renderers to render with the correct color.\r\nThere's a proof of concept implementation here: https://github.com/samhocevar/emoji.wpf, so perhaps @samhocevar would be willing to contribute? (I'm guessing this would be done on the DirectWrite level though)\r\n\r\nScreenshot from Emoji.WPF\r\n![image](https://user-images.githubusercontent.com/1378165/49545342-32714d80-f892-11e8-9cbf-ba0d87724c47.png)\r\n\r\nDocumentation how this works from https://blogs.windows.com/buildingapps/2017/06/06/using-color-fonts-beautiful-text-icons/#Crwe2VHsjP5PgAXS.97 (thanks @mikedn):\r\n![image](https://user-images.githubusercontent.com/1378165/49545803-86306680-f893-11e8-98dc-1554bd6179ee.png)\r\n\r\nAlso for discussion: Should we have a [IsColorFontEnabled](https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Xaml.Controls.TextBlock#Windows_UI_Xaml_Controls_TextBlock_IsColorFontEnabled) property that turns this behavior on/off, and should it be default like in UWP (behavior change). Also only 8.1+ uses the `D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT` flag, so I'm assuming the behavior would always be black/white on Win7 and 8.0","Url":"https://github.com/dotnet/wpf/issues/91","RelatedDescription":"Open issue \"Add support for Color Emoji support\" (#91)"},{"Id":"387934281","IsPullRequest":true,"CreatedAt":"2018-12-05T21:24:33","Actor":"gieniowski","Number":"90","RawContent":null,"Title":"Fix placeholder for string.Format","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/90","RelatedDescription":"Closed or merged PR \"Fix placeholder for string.Format\" (#90)"},{"Id":"387851715","IsPullRequest":true,"CreatedAt":"2018-12-05T19:58:32","Actor":"digitalbricklayer","Number":"88","RawContent":null,"Title":"Fixes missing space","State":"closed","Body":"Fixes a missing space in the \"How to Engage, Contribute, and Provide Feedback\" section.","Url":"https://github.com/dotnet/wpf/pull/88","RelatedDescription":"Closed or merged PR \"Fixes missing space\" (#88)"},{"Id":"387865627","IsPullRequest":false,"CreatedAt":"2018-12-05T17:29:32","Actor":"DingpingZhang","Number":"89","RawContent":null,"Title":"Make FrameworkElement.Triggers support more types of triggers","State":"open","Body":"`FrameworkElement.Triggers` now only accepts `EventTriggers` type, and we have to write a `Style` to add other triggers to the element, as shown below:\r\n\r\n```xml\r\n        <Button>\r\n            <Button.Style>\r\n                <Style TargetType=\"Button\" BasedOn=\"{StaticResource {x:Type Button}}\">\r\n                    <Style.Triggers>\r\n                        <Trigger Property=\"IsEnabled\" Value=\"False\">\r\n                            <Setter Property=\"Background\" Value=\"Gray\" />\r\n                        </Trigger>\r\n                    </Style.Triggers>\r\n                </Style>\r\n            </Button.Style>\r\n        </Button>\r\n```\r\n\r\nI think we need a more simplified xaml syntax to add triggers (`Trigger`, `DataTrigger`, `MultiTrigger` and `MultiDataTrigger`), just like below:\r\n\r\n```xml\r\n        <Button>\r\n            <Button.Triggers>\r\n                <Trigger Property=\"IsEnabled\" Value=\"False\">\r\n                    <Setter Property=\"Background\" Value=\"Gray\" />\r\n                </Trigger>\r\n            </Button.Triggers>\r\n        </Button>\r\n```","Url":"https://github.com/dotnet/wpf/issues/89","RelatedDescription":"Open issue \"Make FrameworkElement.Triggers support more types of triggers\" (#89)"},{"Id":"387844162","IsPullRequest":false,"CreatedAt":"2018-12-05T16:40:20","Actor":"JeroMiya","Number":"87","RawContent":null,"Title":"Document Microsoft Patent grants/licensing/etc...","State":"open","Body":"**Motivation**\r\nThe MIT license grants a license for the source w.r.t. copyright, but not any patents that Microsoft may have that cover the software. Even using this software for its intended purpose, i.e. writing Windows apps, potentially exposes users to patent infringement liability.\r\n\r\n**Suggestion**\r\nIt would be nice to have some documentation from Microsoft that includes:\r\n- What Microsoft-owned patents might cover functionality in WPF.\r\n- Which of those patents already have public grants/licenses such as OIN, and under what terms.\r\n- Instructions for licensing said patents, if not covered by an existing grant.","Url":"https://github.com/dotnet/wpf/issues/87","RelatedDescription":"Open issue \"Document Microsoft Patent grants/licensing/etc...\" (#87)"},{"Id":"387813613","IsPullRequest":false,"CreatedAt":"2018-12-05T15:36:10","Actor":"brandonhood","Number":"86","RawContent":null,"Title":"SVG support for Image.ImageSource","State":"open","Body":"SVG is a perfect match for WPF, but there's no way to display one without either using a third party library or converting it to XAML.","Url":"https://github.com/dotnet/wpf/issues/86","RelatedDescription":"Open issue \"SVG support for Image.ImageSource\" (#86)"},{"Id":"387809322","IsPullRequest":false,"CreatedAt":"2018-12-05T15:27:24","Actor":"JeroMiya","Number":"85","RawContent":null,"Title":"Extensible rendering pipeline","State":"open","Body":"### Motivation\r\nCurrent WPF implementation relies on DirectX/etc... to render vector graphics/UI. There is potentially a desire to use alternative rendering APIs (SkiaSharp, et. al.) for specific purposes, primarily portability, but also for performance or integration in nontraditional environments (Unity/Unreal engine, Web/Wasm, embedded/IOT, et. al.).\r\n\r\n### Suggestion\r\nAs much as possible, refactor rendering pipeline and other platform-specifics to be extensible, allowing for custom implementations decoupled from DirectX/etc..., for example: a SkiaSharp backend instead of a DirectX one.\r\n\r\n### Potential Questions\r\n**Question**: \"Why not just use Xamarin.Forms? There's already a system there for custom renderers and cross-platform UI.\"\r\n**Answer**: Xamarin.Forms implements something similar, allowing for platform specific or custom renderers for specific controls. However XF uses this to support platform native controls, whereas WPF would be more similar to Flutter/others in that it (more or less?) renders controls using graphics primitives or vector graphics from control templates and styles. There are pros and cons to each approach.\r\n","Url":"https://github.com/dotnet/wpf/issues/85","RelatedDescription":"Open issue \"Extensible rendering pipeline\" (#85)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-07T05:31:06.2472834Z","RunDurationInMilliseconds":973}