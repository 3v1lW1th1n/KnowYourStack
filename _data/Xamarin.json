{"Data":{"Blog":{"FeedItems":[{"Title":"Android Emulator Quick Boot","PublishedOn":"2018-01-29T19:41:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Emulator version 27.0.2 now includes a feature called Quick Boot, which launches the emulator in just a few seconds. For Quick Boot to work, your AVD must perform a cold boot on its first time...","Href":"https://blog.xamarin.com/android-emulator-quick-boot/","RawContent":null},{"Title":"First Look: Xamarin Android Device Manager Preview","PublishedOn":"2018-01-25T19:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the release of SDK Tools 26, Google replaced the standalone UI for the SDK and Device Manager with a command line interface. In an effort to make Android component management accessible and easy...","Href":"https://blog.xamarin.com/first-look-xamarin-android-device-manager-preview/","RawContent":null},{"Title":"Better Resource Organization in Xamarin.Forms","PublishedOn":"2018-01-23T19:28:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Resource Dictionary is a foundational building block to all Xamarin.Forms mobile development. It&#8217;s the primary vehicle for declaring XAML resources you’ll use throughout your mobile application,...","Href":"https://blog.xamarin.com/better-resource-organization-xamarin-forms/","RawContent":null},{"Title":"The What, Why, and How of Mobile DevOps with Visual Studio App Center","PublishedOn":"2018-01-22T18:52:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With constant operating system releases, ever-shifting user expectations, and new form factors launching every year, making sure your apps are high-quality, take advantage of the latest technology,...","Href":"https://blog.xamarin.com/mobile-devops-visual-studio-app-center/","RawContent":null},{"Title":"Running Xamarin.iOS Unit Tests in Visual Studio Team Services","PublishedOn":"2018-01-19T18:32:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In previous posts, we&#8217;ve discussed how to set up continuous integration for your Xamarin.iOS applications inside Visual Studio Team Services(VSTS) using the new Hosted macOS Agent. Building the...","Href":"https://blog.xamarin.com/running-xamarin-ios-unit-tests-visual-studio-team-services/","RawContent":null},{"Title":"The Xamarin Show: Getting Started with iOS Development in C#","PublishedOn":"2018-01-18T18:54:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you&#8217;re looking to get started with iOS development, there&#8217;s no better place to look than our amazing Xamarin.iOS documentation guides. They cover each and every topic that you can...","Href":"https://blog.xamarin.com/the-xamarin-show-getting-started-with-ios-development-in-c-sharp/","RawContent":null},{"Title":"The C# Developer’s Guide to Shipping Better Apps with Visual Studio App Center","PublishedOn":"2018-01-16T19:41:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At our annual Microsoft Connect event in November, we announced the General Availability of Visual Studio App Center, combining our best developer services, incuding Xamarin Test Cloud and HockeyApp,...","Href":"https://blog.xamarin.com/c-developers-guide-shipping-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Podcast: Android 8.1, Xamarin Device Manager, and Visual Studio versions 15.5 & 15.6","PublishedOn":"2018-01-12T20:59:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover Android 8.1, the new Xamarin Device Manager Preview, what&#8217;s new for mobile developers in Visual Studio versions 15.5/15.6,...","Href":"https://blog.xamarin.com/podcast-android-8-1-xamarin-device-manager-visual-studio-versions-15-5-15-6/","RawContent":null},{"Title":"Xamarin.Android Now Double Stuffed with Oreo 8.1","PublishedOn":"2018-01-11T19:55:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Oreo 8.1 introduces new features, including Android Go, Neural Networks API, Autofill framework enhancements, SharedMemory API, and many more. We&#8217;re excited to announce Xamarin.Android...","Href":"https://blog.xamarin.com/xamarin-android-now-double-stuffed-with-oreo-8-1/","RawContent":null},{"Title":"Upcoming Webinar | Xamarin University Presents: Ship Better Apps with Visual Studio App Center","PublishedOn":"2018-01-11T14:55:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Join Mark Smith, Director of Xamarin University, on Thursday, January 25 at 9 am PT / 12 pm ET / 5 pm GMT to learn how to automate your app development pipeline with Visual Studio App Center. You’ll...","Href":"https://blog.xamarin.com/upcoming-webinar-xamarin-university-presents-ship-better-apps-visual-studio-app-center/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7168912818","Type":"IssuesEvent","CreatedAt":"2018-01-30T03:07:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1248","RelatedDescription":"Opened issue \"Generate error when JDK 9 is used.\" (#1248) at xamarin/xamarin-android","RelatedBody":"JDK 9 doesn't currently provide a robust and reliable user experience. Until we *can* provide a reliable experience, we should \"fail early\".\r\n\r\n### Steps to Reproduce\r\n\r\n1. Setup your machine so that *only* JDK 9 is available.\r\n2. Build a Xamarin.Android project\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nWe should generate an error:\r\n\r\n    XA0030: Building with JDK 9 is not supported. Please install JDK 1.8: https://aka.ms/xamarin/jdk9-errors\r\n\r\n### Actual Behavior\r\n\r\nWe may or may not generate some \"rando\" failure somewhere else in the build or packaging process, which will result in my losing more of my hair.\r\n\r\n### MSBuild Property Control\r\n\r\nFor our own internal use, we'll want a way to disable the test. I propose making `$(LatestSupportedJavaVersion)` Conditional, and only emit the error if the JDK version is > `$(LatestSupportedJavaVersion)`. This would allow one-off testing by setting that property on the command-line:\r\n\r\n    msbuild /p:LatestSupportedJavaVersion=9.0.0 /t:SignAndroidPackage TheApp.csproj\r\n\r\n"},{"Id":"7164566302","Type":"PullRequestEvent","CreatedAt":"2018-01-29T11:41:33","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1237","RelatedDescription":"Merged pull request \"Make sure merged api description has the latest platform level\" (#1237) at xamarin/xamarin-android","RelatedBody":"When merging we process several API description files, each for a separate\r\nplatform. The resulting file currently carries the *first* platform level in its\r\n`<api platform=\"\">` root element attribute. This is a subtle issue that may\r\ncause problems when applying fixups from metadata (for instance) as the\r\n`api-since` and `api-until` attributes in fixups may apply to incorrect sets of\r\nAPI members.\r\n\r\nFix the issue by putting the latest API description platform level as obtained\r\nfrom the files provided to api-merge (the files are sorted in platform level\r\nascending order)"},{"Id":"7158371132","Type":"PullRequestEvent","CreatedAt":"2018-01-27T00:15:28","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1244","RelatedDescription":"Merged pull request \"Bump to mono/2017-10/3c3e6928\" (#1244) at xamarin/xamarin-android","RelatedBody":"Bumps to linker/mono-2017-10/c62335c3\r\n\r\nContext: https://github.com/xamarin/xamarin-macios/issues/3210\r\nContext: https://github.com/xamarin/xamarin-macios/issues/3215\r\n\r\nFixes a `NullReferenceException` within the linker when linking\r\nXamarin.iOS apps."},{"Id":"7158370192","Type":"PullRequestEvent","CreatedAt":"2018-01-27T00:15:07","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1243","RelatedDescription":"Merged pull request \"[bundle] Include aot profiler in the bundle\" (#1243) at xamarin/xamarin-android","RelatedBody":"The aot profiler will be used to generate aot profiles for \"profiled\" AOT builds. Note that we don't have an infrastructure for \"profiled\" AOT builds yet.\r\n\r\nI plan to test the \"profiled\" AOT to have an idea what apk sizes and startup times to expect.\r\n"},{"Id":"7157745700","Type":"PullRequestEvent","CreatedAt":"2018-01-26T21:06:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1242","RelatedDescription":"Merged pull request \"[msbuild] fix wrong enum-to-string mapping in ActivityAttribute.Confi…\" (#1242) at xamarin/xamarin-android","RelatedBody":"…gChanges.\r\n\r\nThis should fix https://github.com/xamarin/xamarin-android/issues/1234\r\n\r\nTurned out it was from monodroid/b774219, long-standing issue."},{"Id":"7157745694","Type":"IssuesEvent","CreatedAt":"2018-01-26T21:06:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1234","RelatedDescription":"Closed issue \"Activity attribute value ConfigChanges.SmallestScreenSize does not go into generated android manifest file\" (#1234) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create an empty Android project\r\n2. Navigate to MainActivity.cs, add \"ConfigurationChanges = ConfigChanges.SmallestScreenSize\" to the Activity attribute.\r\n3. Build the project, \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n[TestApp.zip](https://github.com/xamarin/xamarin-android/files/1662312/TestApp.zip)\r\n\r\n### Expected Behavior\r\nThe geneated obj\\Debug\\android\\AndroidManifest.xml should have android:configChanges=\"smallestScreenSize\" as the activity's attribute.\r\n\r\n### Actual Behavior\r\nThe configChanges attribute is empty.\r\nandroid:configChanges=\"\"\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.5.4\r\nVisualStudio.15.Release/15.5.4+27130.2024\r\nMicrosoft .NET Framework\r\nVersion 4.7.02046\r\n\r\nInstalled Version: Enterprise\r\n\r\nArchitecture Diagrams and Analysis Tools   00370-00000-32010-AA897\r\nMicrosoft Architecture Diagrams and Analysis Tools\r\n\r\nVisual Basic 2017   00370-00000-32010-AA897\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00370-00000-32010-AA897\r\nMicrosoft Visual C# 2017\r\n\r\nVisual C++ 2017   00370-00000-32010-AA897\r\nMicrosoft Visual C++ 2017\r\n\r\nVisual F# 4.1   00370-00000-32010-AA897\r\nMicrosoft Visual F# 4.1\r\n\r\nAnkhSVN - Subversion Support for Visual Studio   2.7.12815.35086\r\nAnkhSVN - Subversion Support for Visual Studio 2.7.12815.35086 \r\n * Ankh.Package 2.7.12815.35086\r\n * Subversion 1.9.5 via SharpSvn 1.9005.3940.224\r\n * Git/LibGit2 0.24.0 via SharpGit 0.2401.1116.230\r\n\r\nSharpSvn is linked to: Apr 1.5.2, Apr-util 1.5.4, Cyrus Sasl 2.1.26, eXpat 2.2.0, LibSSH2 1.8.0, OpenSSL 1.0.2k  26 Jan 2017, Serf 1.3.9, SQLite 3.17.0, Subversion 1.9.5-SharpSvn, Utf8proc 1.1.5, ZLib 1.2.8\r\nSharpSvn is optionally linked to: Berkeley DB 4.4.20, SharpPlink 0.67.0(SharpSvn)\r\n\r\nSharpGit is linked to: Apr 1.5.1, Apr-Util 1.5.4, eXpat 2.1.0, Libgit2 0.24.0, LibSSH2 1.7.0, OpenSSL 1.0.2h  3 May 2016, Subversion 1.9.3, Utf8proc 1.1.5, ZLib 1.2.8\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31127.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51007.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nImage Optimizer   3.7.117\r\nUses industry standard tools to optimize any JPEG, PNG and Gifs - including animated Gifs. Can do both lossy and lossless optimization.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nJetBrains ReSharper Ultimate 2017.2.1    Build 109.0.20170920.170950\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2018 JetBrains, Inc.\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.51120.3\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nOffice Developer Tools for Visual Studio 2017 ENU   15.0.27005.00\r\nMicrosoft Office Developer Tools for Visual Studio 2017 ENU\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual C++ for Cross Platform Mobile Development (Android)   15.0.27005.02\r\nVisual C++ for Cross Platform Mobile Development (Android)\r\n\r\nVisual C++ for Cross Platform Mobile Development (iOS)   15.0.27005.02\r\nVisual C++ for Cross Platform Mobile Development (iOS)\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27130.2020\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWiX Toolset Visual Studio Extension   0.9.21.62588\r\nWiX Toolset Visual Studio Extension version 0.9.21.62588\r\nCopyright (c) .NET Foundation and contributors. All rights reserved.\r\n\r\nWorkflow Manager Tools 1.0   1.0\r\nThis package contains the necessary Visual Studio integration components for Workflow Manager.\r\n\r\nXamarin   4.8.0.757 (7f9ec2a)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.3.0 (HEAD/ef47226b7)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.2 (6857dfc)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7157099915","Type":"IssuesEvent","CreatedAt":"2018-01-26T18:39:44","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1247","RelatedDescription":"Opened issue \"BCL test ExpressionTest_MemberBind.CompiledMemberBinding fails on Android when AOT is enabled\" (#1247) at xamarin/xamarin-android","RelatedBody":"Copying over https://bugzilla.xamarin.com/show_bug.cgi?id=57888.\r\n\r\n### Steps to Reproduce\r\nhttps://bugzilla.xamarin.com/attachment.cgi?id=23244\r\n1. Download and run the attachment linked above in Release mode.\r\n\r\n\r\n### Expected Behavior\r\nAll BCL unit tests pass with AOT and LLVM enabled.\r\n\r\n### Actual Behavior\r\n```\r\n01-26 13:29:35.413 I/mono-stdout( 5995): ExpressionTest_MemberBind\r\n01-26 13:29:35.416 I/mono-stdout( 5995): \tCompiledMemberBinding [FAIL] :   Expected: \"tzap\"\r\n01-26 13:29:35.416 I/mono-stdout( 5995):   But was:  null\r\n01-26 13:29:35.416 I/mono-stdout( 5995): \r\n01-26 13:29:35.416 I/mono-stdout( 5995): \t\t  at MonoTests.System.Linq.Expressions.ExpressionTest_MemberBind.CompiledMemberBinding () <0x7b2e2b4ef4 + 0x00223> in <b71cba65df674fc0a88eb818fc19e872>:0 \r\n01-26 13:29:35.416 I/mono-stdout( 5995): \t\t  at (wrapper managed-to-native) System.Reflection.MonoMethod.InternalInvoke(System.Reflection.MonoMethod,object,object[],System.Exception&)\r\n01-26 13:29:35.416 I/mono-stdout( 5995): \t\t  at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) <0x7b306f9150 + 0x00093> in <05c79ec5c1094a41a4d744f293121542>:0 \r\n```\r\n### Version Information\r\nXA 8.2.0.9 (d15-6)\r\n"},{"Id":"7157029591","Type":"IssuesEvent","CreatedAt":"2018-01-26T18:23:21","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1246","RelatedDescription":"Opened issue \"Fast deploy does not work after touching a .cs in a referenced library project in certain solutions\" (#1246) at xamarin/xamarin-android","RelatedBody":"Filing a copy of https://bugzilla.xamarin.com/show_bug.cgi?id=58864 in GH to close the old BZ issue:\r\n\r\nFastdev is not working for the project attached to the bugzilla issue above during a rebuild attempt which occurs after touching a .cs file in a referenced library project. This behavior does not appear to be a regression in recent releases.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Deploy an enormous solution to device.\r\n2. Touch a .cs file in a referenced library project.\r\n3. Redeploy.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nSubsequent redeployments of _every_ project type do not result in the .apk file being reinstalled after a minor change in a .cs file occurs, assuming that fast deploy is enabled.\r\n\r\n### Actual Behavior\r\nFast deploy does not work after touching a .cs in a referenced library project in certain solutions\r\n\r\n### Version Information\r\nd15-5\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n"},{"Id":"7156901559","Type":"PullRequestEvent","CreatedAt":"2018-01-26T17:53:40","Actor":"tondat","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1245","RelatedDescription":"Opened pull request \"set MONO_ANDROID_PATH environment variable with msbuild path of the V…\" (#1245) at xamarin/xamarin-android","RelatedBody":"…S instance `$(VsInstallRoot)\\MSBuild\\Xamarin\\Android`"},{"Id":"7156646789","Type":"IssuesEvent","CreatedAt":"2018-01-26T16:58:12","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1229","RelatedDescription":"Closed issue \"First request with HttpClient on Android takes more than 45 seconds, after that less than second\" (#1229) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create Cross Platform-App (Xamarin-Forms) Projects\r\n2. Add following code in constructor of MainPage of Shared Code:\r\n\r\n```csharp\r\nHttpClientTest testHttpClient = new HttpClientTest();\r\nTask.Run(() => testHttpClient.TestHttpClientAsync(\"Google\",\"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\")).Wait();\r\nTask.Run(() => testHttpClient.TestHttpClientAsync(\"Microsoft\",\"https://assets.onestore.ms/cdnfiles/external/uhf/long/9a49a7e9d8e881327e81b9eb43dabc01de70a9bb/images/microsoft-gray.png\")).Wait();\r\nTask.Run(() => testHttpClient.TestHttpClientAsync(\"Chrome\",\"https://www.google.com/chrome/assets/common/images/chrome_logo_2x.png?mmfb=a5234ae3c4265f687c7fffae2760a907\")).Wait();\r\n```\r\n\r\n3. Create HttpClientTest Class with following:\r\n\r\n```csharp\r\npublic class HttpClientTest\r\n{\r\n    private HttpClient _httpClient;\r\n    public HttpClientTest()\r\n    {\r\n        HttpClientHandler hch = new HttpClientHandler\r\n        {\r\n            UseProxy = false,\r\n        };\r\n        _httpClient = new HttpClient(hch)\r\n        {\r\n            Timeout = new TimeSpan(0, 0, 0, 100)\r\n        };\r\n    }\r\n\r\n    public async Task TestHttpClientAsync(string key, string url)\r\n    {\r\n        DateTime startTime = DateTime.Now;\r\n        Console.WriteLine(string.Empty);\r\n        Console.WriteLine($\"TestHttpClientAsync : Start : {key} : {startTime}\");\r\n        var result = await _httpClient.GetByteArrayAsync(url).ConfigureAwait(false);\r\n        DateTime endTime = DateTime.Now;\r\n        Console.WriteLine(string.Empty);\r\n        Console.WriteLine($\"TestHttpClientAsync : End    : {key} : {endTime.Subtract(startTime).TotalMilliseconds}\");\r\n        Console.WriteLine(string.Empty);\r\n        Console.WriteLine($\"TestHttpClientAsync : Total  : {key} : {endTime} with {result?.Length}\");\r\n        Console.WriteLine(string.Empty);\r\n    }\r\n}\r\n```\r\n\r\n### Expected Behavior\r\nOn Android, I have seen that HttpClient takes longer for first request (around 45 to 65 seconds) and then onward, It is always less than second. All HttpClient request should be of same time.\r\n\r\n### Actual Behavior\r\nTestHttpClientAsync : Start  : Google : 24/01/2018 19:39:30\r\nTestHttpClientAsync : End    : Google : 4610.646\r\nTestHttpClientAsync : Total  : Google : 24/01/2018 19:39:35 with 5969\r\nTestHttpClientAsync : Start  : Microsoft : 24/01/2018 19:39:35\r\nTestHttpClientAsync : End    : Microsoft : 681.655\r\nTestHttpClientAsync : Total  : Microsoft : 24/01/2018 19:39:36 with 4054\r\nTestHttpClientAsync : Start  : Chrome : 24/01/2018 19:39:36\r\nTestHttpClientAsync : End    : Chrome : 100.584\r\nTestHttpClientAsync : Total  : Chrome : 24/01/2018 19:39:36 with 5666\r\n### Version Information\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.5.3\r\nVisualStudio.15.Release/15.5.3+27130.2020\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Community\r\n\r\nVisual Basic 2017   00369-60000-00001-AA603\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00369-60000-00001-AA603\r\nMicrosoft Visual C# 2017\r\n\r\nVisual F# 4.1   00369-60000-00001-AA603\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31127.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2012   4.0.20601.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.51007.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAWS Toolkit for Visual Studio 2017   1.14.0.0\r\nAWS Toolkit for Visual Studio 2017.\r\nCopyright 2011-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n\r\nRelease notes: https://aws-vs-toolkit.s3.amazonaws.com/versioninfo.html\r\n\r\nThis software includes third party software subject to the following copyrights:\r\n- Logging from log4net, Apache License \r\n  [http://logging.apache.org/log4net/license.html]\r\n- Putty for PPK to PEM conversion, MIT license \r\n  [http://www.chiark.greenend.org.uk/~sgtatham/putty/licence.html]\r\n- NGit for AWS Elastic Beanstalk incremental push\r\n  [https://github.com/mono/ngit/blob/master/NGit.license.txt]\r\n- NSch dependency for NGit\r\n  [https://github.com/mono/ngit/blob/master/NSch.license.txt]\r\n- Sharpen dependency for NGit\r\n  [https://github.com/mono/ngit/blob/master/Sharpen/AssemblyInfo.cs]\r\n- ICSharpCode.SharpZipLib dependency for NGit\r\n  [http://www.icsharpcode.net/opensource/sharpziplib/]\r\n- Mono.Posix.dll and Mono.Security.dll dependencies for NGit\r\n  [http://mono-project.com/FAQ:_Licensing#Licensing]\r\n- MPFProj for Visual Studio Project Framework\r\n  [http://mpfproj10.codeplex.com/license]\r\n- JSON Checker for JSON validation\r\n  [http://www.raboof.com/projects/jsonchecker/]\r\n- Newtonsoft Json.NET\r\n  [http://www.newtonsoft.com/json] \r\n- YamlDotNet\r\n  [http://aaubry.net/pages/yamldotnet.html] \r\n    \r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nDotfuscator Community Edition   5.32.1.6167-6ce295ebd\r\nPreEmptive Protection - Dotfuscator CE\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27130.2020\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.8.0.757 (7f9ec2a)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.3.0 (HEAD/ef47226b7)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.2 (6857dfc)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n[adb.log](https://github.com/xamarin/xamarin-android/files/1661351/adb.log)\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7169026610","Type":"IssuesEvent","CreatedAt":"2018-01-30T03:47:57","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1742","RelatedDescription":"Opened issue \"[Enhancement] ToolbarItem A11y\" (#1742) at xamarin/Xamarin.Forms","RelatedBody":"## Rationale \r\nBuilding on #713, this would add VoiceOver/TalkBack/Narrator capability to ToolBarItems. Included in this change would be limited support for setting accessibility properties on the MasterDetailPage toggle button and the NavigationBar back button.\r\n\r\nCan take most of the changes from #889 now that #1199 is merged.\r\n\r\n## Implementation\r\n### `ToolbarItem`s\r\n- [All] `ToolbarItem`s with `Text` will already read the `Text` if no `Accessibility.Name` or `.Hint` are supplied. No change.\r\n- [iOS/UWP] `Accessibility.Name` will _replace_ the `Text` that is read aloud on iOS and UWP. This is consistent with the platforms.\r\n- [Android] `Accessibility.Name` and/or `Accessibility.Hint` will _completely replace_ the `Text` that is both **visible** and read aloud on Android. This is a limitation of API<26 and may be resolved later to be consistent with iOS and UWP.\r\n\r\n### `MasterDetailPage` Toggle Button\r\n- [iOS/UWP] Set `Accessibility.Name` and `Accessibility.Hint` on a `MasterDetailPage` to set the text that is read aloud on the toggle button. Setting these properties will have no effect on Android.\r\n- [Android] Add string resources to the Android project to set the text that is read aloud on the `MasterDetailPage` toggle button. \r\n```\r\n <string name=\"mdp_open_a11y_name\">Show Master Page</string>\r\n <string name=\"mdp_close_a11y_name\">Hide Master Page</string>\r\n```\r\n\r\n### `NavigationPage` Back Button\r\n- [Android] Set `Accessibility.Name` and `Accessibility.Hint` on a `Page` to set the text that is read aloud on the Back arrow in the Action Bar. This will have no effect on OS back buttons.\r\n- [UWP] Not applicable. \r\n- [iOS] Not supported; will read the title of the page as usual.\r\n\r\nSee https://forums.xamarin.com/discussion/94289/basic-accessibility-support-toolbaritems.\r\nSee [Bug 52656 - ToolbarItem needs accessibility support](https://bugzilla.xamarin.com/show_bug.cgi?id=52656)\r\n\r\n### Difficulty: Medium"},{"Id":"7169009179","Type":"PullRequestEvent","CreatedAt":"2018-01-30T03:41:57","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1741","RelatedDescription":"Opened pull request \"[Core] Add IsSet and IsDefault to BindableObject\" (#1741) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdded new methods to `BindableObject` that will allow users to check whether a `BindableProperty` has ever been set (`IsSet()`) or if the value has been set to something other than the `DefaultValue` (`IsDefault()`). The latter method will check against the value set by the `DefaultValueCreator` if one exists. Please note that a `BindableProperty` with a `DefaultValueCreator` will return `true` for `IsSet()` if the value is ever checked, as the `DefaultValueCreator` will actually \"set\" the value on get.\r\n\r\n### Bugs Fixed ###\r\n\r\nfixes #1652 \r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n```\r\n- BindableObject.IsDefault(BindableProperty targetProperty);\r\n- BindableObject.IsSet(BindableProperty targetProperty);\r\n```\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"7168952410","Type":"IssuesEvent","CreatedAt":"2018-01-30T03:21:15","Actor":"Sivaraman761","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1740","RelatedDescription":"Opened issue \"ViewModel Destructor never call when custom view and ListView are having same ItemSoure.\" (#1740) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\n\r\nIn that while using only Listview in the view its working perfectly. While using custom view only in the view working perfectly. \r\nThe issue occur only custom view and ListView are in the same view and having same ItemSource.\r\n\r\nusing customView and test it with the  PerformanceProfiler only one instance of ViewModel is in memory. Compiling to release mode also looks better. It could be that the issue happends only in debug mode. Memory consumption are very important for us.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the sample.\r\n2. Click the button continuously.\r\n3. See the output the destructor never call.  \r\n\r\n### Expected Behavior\r\nNeed to call the viewModel destructor properly .\r\n\r\n### Actual Behavior\r\nDestructor is never called.\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7168866601","Type":"IssuesEvent","CreatedAt":"2018-01-30T02:51:40","Actor":"dansiegel","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1739","RelatedDescription":"Opened issue \"[Enhancement] Allow hooking into an App's DI Container\" (#1739) at xamarin/Xamarin.Forms","RelatedBody":"## Rationale\r\n\r\nMany apps are currently utilizing one DI Container or another. It would be highly beneficial for Xamarin Forms to be able to hook into the app's container (if present) to be able to create types using the app's existing container rather than relying on `Activator.CreateInstance`. This should allow developers to inject services into Renderers, Effects, etc.\r\n\r\n## Implementation\r\n\r\nThe implementation could vary significantly depending on how far the team wants this enhancement to go. Any implementation should meet the following criteria though\r\n\r\n- Replace all direct references to `Activator.CreateInstance`\r\n- The \"Default\" provider should be the only place in the codebase that references `Activator.CreateInstance`\r\n- This should be opt in so as to have no direct effect on apps not using DI or not opting in\r\n\r\n### Basic Implementation\r\n\r\nA more basic implementation could be something like:\r\n\r\n```cs\r\n// In Xamarin Forms\r\npublic static class FormsResolver\r\n{\r\n    static Func<Type, object> _containerResolve;\r\n\r\n    public static void SetDefaultFactory(Func<Type, object> containerResolve) =>\r\n        _containerResolve = containerResolve;\r\n\r\n    public static object Resolve(Type type)\r\n    {\r\n        if (_containerResolve == null)\r\n            return Activator.CreateInstance(type);\r\n\r\n        return _containerResolve(type);\r\n    }\r\n\r\n    public static T Resolve<T>() => (T)Resolve(typeof(T));\r\n}\r\n```\r\n\r\n```cs\r\n// Example Usage\r\npublic class App : Application\r\n{\r\n    IContainer Container { get; }\r\n    public App()\r\n    {\r\n        Container = new Container();\r\n        FormsResolver.SetDefaultFactory(t => Container.Resolve(t));\r\n    }\r\n}\r\n```\r\n\r\n### More Involved Implementation\r\n\r\nIf the team prefers to use the opportunity to enhance the existing DependencyService and use it as the base service resolver, then a bit more thought and care will need to go into this. The DependencyService currently handles resolving types a bit backwards. With a typical container, the Lifetime of the service's registration is handled at Registration rather than at Resolution, where as the `DependencyService` currently handles this at resolution `DependencyService.Get(DependencyFetchTarget)`. If `DependencyService` is being updated then the following additional requirements should be met:\r\n\r\n- Add non-generic Register/Get variants. \r\n\r\nThis could look something like:\r\n\r\n```cs\r\npublic interface IFormsContainerRegistry\r\n{\r\n    void Register(Type serviceType, Type targetType, DependencyLifetime lifetime);\r\n    void RegisterInstance(Type serviceType, object instance);\r\n    object Resolve(Type type);\r\n}\r\n\r\npublic enum DependencyLifetime\r\n{\r\n    Transient,\r\n    Singleton\r\n}\r\n\r\npublic class DependencyAttribute : Attribute\r\n{\r\n    public DependencyAttribute(Type implementorType)\r\n        : this(implementorType, DependencyLifetime.Transient)\r\n    {\r\n\r\n    }\r\n\r\n    public DependencyAttribute(Type implementorType, DependencyLifetime lifetime)\r\n    {\r\n        Implementor = implementorType;\r\n        Lifetime = lifetime;\r\n    }\r\n\r\n    internal DependencyLifetime Lifetime { get; private set; }\r\n\r\n    internal Type Implementor { get; private set; }\r\n}\r\n\r\npublic class DependencyService : IFormsContainerRegistry\r\n{\r\n    static Lazy<DependencyService> implementation => \r\n        new Lazy<DependencyService>(() => new DependencyService());\r\n    static IFormsContainerRegistry _current;\r\n    static IFormsContainerRegistry Current => \r\n        _current ?? (_current = implementation.Value);\r\n\r\n    public static void SetContainerRegistry(IFormsContainerRegistry registry)\r\n    {\r\n        if (_current != null && _current is DependencyService dependencyService)\r\n        {\r\n            foreach (var dependency in dependencyService.DependencyImplementations)\r\n            {\r\n                var serviceType = dependency.Key;\r\n                var data = dependency.Value;\r\n                if (data.Lifetime == DependencyLifetime.Singleton && data.GlobalInstance != null)\r\n                {\r\n                    registry.RegisterInstance(serviceType, data.GlobalInstance);\r\n                }\r\n                else\r\n                {\r\n                    registry.Register(serviceType, data.ImplementorType, data.Lifetime);\r\n                }\r\n            }\r\n        }\r\n\r\n        _current = registry;\r\n    }\r\n\r\n    public static object Get(Type type) =>\r\n        Current.Resolve(type);\r\n\r\n    public static T Get<T>() =>\r\n        (T)Get(typeof(T));\r\n\r\n    public static void Register(Type type) =>\r\n         Current.Register(type, type, DependencyLifetime.Singleton);\r\n\r\n    public static void Register<T>() =>\r\n        Register(typeof(T));\r\n\r\n    public static void Register(Type serviceType, Type targetType)\r\n        Current.Register(serviceType, targetType, DependencyLifetime.Singleton);\r\n\r\n    public static void Register<T, TImpl>()\r\n        where T : class\r\n        where TImpl : class, T =>\r\n        Register(typeof(T), typeof(TImpl));\r\n\r\n    [Obsolete(\"Provided for Legacy Compatibility\")]\r\n    public static T Get<T>(DependencyFetchTarget fetchTarget)\r\n    {\r\n        if (Current is DependencyServicev2 dependencyService)\r\n        {\r\n            return (T)dependencyService.GetInternal(typeof(T), fetchTarget);\r\n        }\r\n\r\n        // When opting into using a container you would need to rely on the Lifetime \r\n        // it was registered with\r\n        return (T)Current.Resolve(typeof(T));\r\n    }\r\n\r\n    DependencyService()\r\n    {\r\n        DependencyImplementations = new Dictionary<Type, DependencyData>();\r\n        Initialize();\r\n    }\r\n\r\n    Dictionary<Type, DependencyData> DependencyImplementations { get; }\r\n\r\n    void Initialize()\r\n    {\r\n        // Do initialization\r\n    }\r\n\r\n    public void Register(Type serviceType, Type targetType, DependencyLifetime lifetime)\r\n    {\r\n        DependencyImplementations.Add(serviceType, new DependencyData\r\n        {\r\n            ImplementorType = targetType,\r\n            Lifetime = lifetime\r\n        });\r\n    }\r\n\r\n    public void RegisterInstance(Type serviceType, object instance)\r\n    {\r\n        DependencyImplementations.Add(serviceType, new DependencyData\r\n        {\r\n            ImplementorType = instance.GetType(),\r\n            GlobalInstance = instance,\r\n            Lifetime = DependencyLifetime.Singleton\r\n        });\r\n    }\r\n\r\n    public object Resolve(Type serviceType) =>\r\n        GetInternal(serviceType);\r\n\r\n    object GetInternal(Type serviceType, DependencyFetchTarget? fetchTarget = null)\r\n    {\r\n        DependencyData dependencyImplementation = DependencyImplementations[serviceType];\r\n        if (dependencyImplementation == null)\r\n            return null;\r\n\r\n        if (dependencyImplementation.Lifetime == DependencyLifetime.Singleton\r\n            || fetchTarget == DependencyFetchTarget.GlobalInstance)\r\n        {\r\n            return dependencyImplementation.GlobalInstance ?? \r\n                   (dependencyImplementation.GlobalInstance = CreateInstance(dependencyImplementation.ImplementorType));\r\n        }\r\n\r\n        return CreateInstance(dependencyImplementation.ImplementorType);\r\n    }\r\n\r\n    object CreateInstance(Type type) =>\r\n        Activator.CreateInstance(type);\r\n\r\n    class DependencyData\r\n    {\r\n        public Type ImplementorType { get; set; }\r\n        public object GlobalInstance { get; set; }\r\n        public DependencyLifetime Lifetime { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n```cs\r\n// Example Usage\r\npublic class App : Application, IFormsContainerRegistry\r\n{\r\n    IContainer Container { get; }\r\n\r\n    public App()\r\n    {\r\n        Container = new Container();\r\n        DependencyService.SetContainerRegistry(this);\r\n    }\r\n\r\n    public void Register(Type serviceType, Type targetType, DependencyLifetime lifetime)\r\n    {\r\n        var reuse = lifetime == DependencyLifetime.Singleton \r\n                                  ? Reuse.Singleton : Reuse.Transient;\r\n        Container.Register(serviceType, targetType, reuse);\r\n    }\r\n\r\n    public void RegisterInstance(Type serviceType, object instance) =>\r\n        Container.UseInstance(serviceType, instance);\r\n\r\n    public object Resolve(Type type) =>\r\n        Container.Resolve(type);\r\n}\r\n```\r\n\r\n## Expected Result\r\n\r\nTypes created from within Xamarin Forms are able to be resolved using 3rd party containers to help facilitate injecting services into Custom Renderers, Effects etc.\r\n\r\n### Android\r\n\r\nNothing specific to Android\r\n\r\n### iOS\r\n\r\nNothing specific to iOS\r\n\r\n### UWP\r\n\r\nNothing specific to UWP\r\n\r\n## Implications for CSS\r\n\r\nNone as this doesn't touch UI code directly\r\n\r\n## Backward Compatibility\r\n\r\nThis should be able to be done in a way that only enhances the existing API without breaking legacy code, particularly as an Opt-In feature. \r\n\r\n## Difficulty : Easy/Medium\r\n\r\nI would tend to believe the difficulty really depends on whether or not the DependencyService is updated as part of this or left alone."},{"Id":"7168820776","Type":"IssuesEvent","CreatedAt":"2018-01-30T02:35:48","Actor":"hachi1030-Allen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1738","RelatedDescription":"Opened issue \"Xamarin Forms WebView first time do Google search navigation, CanGoBack will return false\" (#1738) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\nThis is Allen from AGPC support team. I have one customer that is having issue with Xamarin Forms WebView control. The issue symptom is that we simply use WebView to load Google as start page, and when we do a simple search in Google, it will navigate to the list of the search result page, and the GoBack button we declared for that should be enabled, but it does not. If we navigate again to further websites in that list, the GoBack button will work normally.\r\n### Steps to Reproduce\r\nThe customer has sent me the sample project, I will share later, and his structure is as below steps:\r\n1. Create a Xamarin Forms project, (PCL or .NET Startdard).\r\n2. The App.xaml.cs is declaring the MainPage as the samplePage he declared.\r\n3. In the samplePage, it's a Tabbed Page with MyPage as local page inside it, code as below:\r\n\r\n``` XAML\r\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n   <TabbedPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \r\n                          xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:sample\" x:Class=\"sample.samplePage\">\r\n           <local:MyPage/>\r\n    </TabbedPage>\r\n```\r\n\r\n4. In the MyPage.xaml.cs, it will declare a page that contains a WebView control and 2 buttons for navigation:\r\n\r\n``` XAML    \r\n<StackLayout>\r\n            <!--Webseiten Anzeige-->\r\n            <WebView Source=\"https://www.google.com/\" x:Name=\"o_webview\" WidthRequest=\"1000\" HeightRequest=\"1000\" Navigating=\"webOnNavigating\" Navigated=\"webOnEndNavigating\" />\r\n            <!--Laden indicator-->\r\n            <Label x:Name=\"LoadingLabel\" Text=\"Lädt...\" HorizontalOptions=\"Center\" IsVisible=\"false\" />\r\n            <StackLayout Orientation=\"Horizontal\" Padding=\"10,10\">\r\n                <!--Zurück Knopf-->\r\n                <Button x:Name=\"o_back\" Text=\"&lt;\" FontSize=\"Large\" HorizontalOptions=\"StartAndExpand\" Clicked=\"backClicked\" />\r\n                <!--Forwärts Knopf-->\r\n                <Button x:Name=\"o_forward\" Text=\"&gt;\" FontSize=\"Large\" HorizontalOptions=\"End\" Clicked=\"forwardClicked\" />\r\n            </StackLayout>\r\n        </StackLayout>\r\n\r\nIn the code-behind, there will be code that controls the button click event handler and most importantly is that we declare the Navigated event handler as below function:\r\n\r\n        void webOnEndNavigating(object sender, WebNavigatedEventArgs e)\r\n        {\r\n            LoadingLabel.IsVisible = false;\r\n\r\n            o_back.IsEnabled = o_webview.CanGoBack;\r\n            o_forward.IsEnabled = o_webview.CanGoForward;\r\n\r\n        }\r\n```\r\n\r\n5. Run the sample in iPhone simulator and Android phone.\r\n6. The first page of the WebView is Google, we type anything in the search bar and click Search or we click on the dropdown list that google provided for Intelligence guess. Then the page will be navigated to the search result list of Google.\r\n\r\n### Expected Behavior\r\nExpected behavior should be after navigated to the search result page, the GoBack button should be enabled.\r\n### Actual Behavior\r\nThe GoBack button will be disabled.\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms v2.5.0.122203\r\n- Last known good version: No known good version.\r\n- IDE: Visual Studio 2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  8.0\r\n  - Android: 8.0\r\n  - UWP:  No use of UWP\r\n\r\n- Affected Devices: iPhone simulators and Android phones\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/32292089/35544997-fb6f0508-05a7-11e8-89b3-8378905defbf.png)\r\n\r\n### Reproduction Link\r\nSample project: \r\nPlease download from: \r\nhttps://drive.google.com/open?id=1KcH6utas6HkY76u3NSo7MSWBvlNsOFoa \r\n\r\nSymptom video:\r\nhttps://drive.google.com/open?id=1gRL59RRvTHpn1MdIjKDFepYbJ9BmE6X3\r\n\r\n"},{"Id":"7168628943","Type":"IssuesEvent","CreatedAt":"2018-01-30T01:32:11","Actor":"yinyue200","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1737","RelatedDescription":"Opened issue \"can't reference gtk platform\" (#1737) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\ncan't reference gtk platform\r\nI think revert #1629 could fix the issue.\r\n### Steps to Reproduce\r\n\r\n1. install the nuget via PackageReference  (not packages.config)\r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\nXamarin.Forms.Platform.GTK is be referenced\r\n\r\n### Actual Behavior\r\nXamarin.Forms.Platform.GTK isn't be referenced\r\n\r\n### Basic Information\r\n\r\n- Version with issue:2.6.0.132747-nightly\r\n- Last known good version:2.6.0.99477-nightly\r\n- IDE:VS 2017 15.5.5\r\n- Platform Target Frameworks: v4.7.1\r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n![devenv_2018-01-30_09-21-32](https://user-images.githubusercontent.com/13848771/35543257-10c3fc28-059f-11e8-8813-3b108d2b6e95.png)\r\n\r\n\r\n### Reproduction Link\r\n\r\n[Reproduction Link](https://github.com/yinyue200/gtkforms)\r\n"},{"Id":"7168599005","Type":"IssuesEvent","CreatedAt":"2018-01-30T01:22:35","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1710","RelatedDescription":"Closed issue \"[Enhancement] Picker border customization\" (#1710) at xamarin/Xamarin.Forms","RelatedBody":"## Rationale\r\n\r\n`Picker` borders can't be customized without effects or custom renderers.\r\n\r\n## Implementation\r\n\r\n```csharp\r\npublic static readonly BindableProperty BorderThicknessProperty =\r\n     BindableProperty.Create(propertyName: nameof(BorderThickness),\r\n\t     returnType: typeof(Thickness), declaringType: typeof(Picker));\r\n\t\t\r\npublic static readonly BindableProperty BorderColorProperty =\r\n    BindableProperty.Create(propertyName: nameof(BorderColor),\r\n\t\treturnType: typeof(Color), declaringType: typeof(Picker));\r\n\r\npublic static readonly BindableProperty BorderFillColorProperty =\r\n\tBindableProperty.Create(propertyName: nameof(BorderFillColor),\r\n\t\treturnType: typeof(Color), declaringType: typeof(Picker));\r\n```\r\n\r\nRenderers will frame the `Picker` based on the supplied Border properties\r\n\r\n## Expected Result\r\n\r\n### Android\r\n- `Picker.BorderThickness`:  should set the thickness of the border\r\n- `Picker.BorderColor`:  should set the outline colors of the border\r\n- `Picker.BorderFillColor`:  should set the internal fill on the border. If fill color is different than Border Color you'll have   | Border Color | Fill Color | Border Color | Component\r\n\r\n### iOS\r\nSee Android\r\n\r\n### UWP\r\nSee Android\r\n\r\n## Implications for CSS\r\n```css\r\n{border-color: coral;}\r\n{border-width: thin;}\r\n\r\n// Fill color possible with addition of pseudo elements\r\npicker::borderfill\r\n{\r\ncolor\r\n}\r\n```\r\n## Backward Compatibility\r\nThis is adding a new set of properties so should be backwards compatible. Need to ensure that if the user doesn't specify any of these properties that the `Picker` appears normal\r\n\r\n## Difficulty : Medium\r\nSee #1681"},{"Id":"7168559359","Type":"IssuesEvent","CreatedAt":"2018-01-30T01:10:23","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1681","RelatedDescription":"Closed issue \"[Enhancement] Text edit with borders\" (#1681) at xamarin/Xamarin.Forms","RelatedBody":"## Rationale\r\n\r\nEntry fields can't have borders added without having to add custom renderers.\r\n\r\n## Implementation\r\n\r\n```csharp\r\npublic static readonly BindableProperty BorderThicknessProperty =\r\n     BindableProperty.Create(propertyName: nameof(BorderThickness),\r\n\t     returnType: typeof(Thickness), declaringType: typeof(Entry));\r\n\t\t\r\npublic static readonly BindableProperty BorderColorProperty =\r\n    BindableProperty.Create(propertyName: nameof(BorderColor),\r\n\t\treturnType: typeof(Color), declaringType: typeof(Entry));\r\n\r\npublic static readonly BindableProperty BorderFillColorProperty =\r\n\tBindableProperty.Create(propertyName: nameof(BorderFillColor),\r\n\t\treturnType: typeof(Color), declaringType: typeof(Entry));\r\n```\r\n\r\nRenderers will frame the Entry based on the supplied Border properties\r\n\r\n## Expected Result\r\n\r\n### Android\r\n- `Entry.BorderThickness`:  should set the thickness of the border\r\n- `Entry.BorderColor`:  should set the outline colors of the border\r\n- `Entry.BorderFillColor`:  should set the internal fill on the border. If fill color is different than Border Color you'll have   | Border Color | Fill Color | Border Color | Component\r\n\r\n### iOS\r\nSee Android\r\n\r\n### UWP\r\nSee Android\r\n\r\n## Implications for CSS\r\n```css\r\n{border-color: coral;}\r\n{border-width: thin;}\r\n\r\n// Fill color possible with addition of pseudo elements\r\nentry::borderfill\r\n{\r\ncolor\r\n}\r\n```\r\n## Backward Compatibility\r\nThis is adding a new set of properties so should be backwards compatible. Need to ensure that if the user doesn't specify any of these properties that the entry field appears normal\r\n\r\n## Difficulty : Easy\r\n\r\nThis is an easy change and great for a first time contributor.  \r\n\r\nThis issue may correlate with implementing issue: \r\nhttps://github.com/xamarin/Xamarin.Forms/issues/1664\r\n\r\n\r\n\r\n"},{"Id":"7168270179","Type":"IssuesEvent","CreatedAt":"2018-01-29T23:40:19","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1674","RelatedDescription":"Closed issue \"[Enhancement] Label: Underline + Strike\" (#1674) at xamarin/Xamarin.Forms","RelatedBody":"## Rationale\r\n\r\nAdd enum to enable strike-through and underline to labels (and buttons). \r\n\r\n## Implementation\r\n\r\n```csharp\r\n[Flags]\r\npublic enum FontAttributes\r\n{\r\n\tNone = 0,\r\n\tBold = 1 << 0,\r\n\tItalic = 1 << 1,\r\n\tUnderline = 1 << 2,\r\n\tStrike = 1 << 3\r\n}\r\n```\r\n\r\n## Expected Result\r\n\r\nLabel and Button text respects new flags added to FontAttribute. \r\n\r\n## Implications for CSS\r\n\r\nNone.\r\n\r\n## Backward Compatibility\r\n\r\nNone.\r\n\r\n## Difficulty : Easy"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7167139422","Type":"PullRequestEvent","CreatedAt":"2018-01-29T19:32:31","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3351","RelatedDescription":"Merged pull request \"[backport][avfoundation] Fix AVAudioUnitComponentManager default .ctor crash (#3314)\" (#3351) at xamarin/xamarin-macios","RelatedBody":"It looks like this should not have been bound since there's a singleton-like static property to use the type.\nKeeping binary compatibility.\n\n- Fixes github issue #3303: AVAudioUnitComponentManager default .ctor can crash on macOS 10.13.3\n(https://github.com/xamarin/xamarin-macios/issues/3303)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"958065243565051904","CreatedAt":"2018-01-29T19:52:08+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:… https://t.co/75XbYDGg8m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":51,"RawContent":null},{"Id":"958020024941334528","CreatedAt":"2018-01-29T16:52:27+00:00","UserScreenname":"xamarinhq","Text":"Build a meeting scheduling mobile app using #XamarinForms and the Microsoft Graph API: https://t.co/LsMgiFD20d https://t.co/QvuhUZfhAd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":18,"RawContent":null},{"Id":"957782606992543745","CreatedAt":"2018-01-29T01:09:02+00:00","UserScreenname":"xamarinhq","Text":"Making iOS 11 even easier with #XamarinForms: https://t.co/nIDGNXGuF1 https://t.co/6qXhuCMSDp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":16,"RawContent":null},{"Id":"957415179091873792","CreatedAt":"2018-01-28T00:49:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to publish to #Azure from #VS4Mac: https://t.co/wnNmElsQrM https://t.co/DdxYLvB9ap","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":15,"RawContent":null},{"Id":"956935518746546177","CreatedAt":"2018-01-26T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Add large titles to your iOS 11 apps in this post from @conceptdev: https://t.co/RDyk6GDVUU https://t.co/WlylY4fcZS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":18,"FavoriteCount":5,"RawContent":null},{"Id":"956616920408772610","CreatedAt":"2018-01-25T19:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get your first look at the #Xamarin Android Device Manager Preview: https://t.co/4cTyPaFfMb https://t.co/uKkOHzbp3U","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":34,"RawContent":null},{"Id":"956570118569496576","CreatedAt":"2018-01-25T16:51:03+00:00","UserScreenname":"xamarinhq","Text":"Our @XamarinU webinar on automating the lifecycle of your iOS, Android, Windows, and macOS apps with #VSAppCenter i… https://t.co/XuCIwVEtIh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":12,"RawContent":null},{"Id":"956210745984856064","CreatedAt":"2018-01-24T17:03:02+00:00","UserScreenname":"xamarinhq","Text":"Don't miss our @XamarinU webinar tomorrow (1/25) on automating the lifecycle of your iOS, Android, Windows, and mac… https://t.co/eKFBikD0kM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":12,"RawContent":null},{"Id":"955887729816035328","CreatedAt":"2018-01-23T19:39:28+00:00","UserScreenname":"xamarinhq","Text":"Learn how to merge multiple resource dictionaries in the most recent stable release of #XamarinForms for even great… https://t.co/lYtHCJ9q5V","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":80,"FavoriteCount":33,"RawContent":null},{"Id":"955846589817479170","CreatedAt":"2018-01-23T16:56:00+00:00","UserScreenname":"xamarinhq","Text":"Native Android Facebook Authentication with Azure App Service https://t.co/DAcKpYLHe5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":11,"RawContent":null},{"Id":"955516166373560322","CreatedAt":"2018-01-22T19:03:01+00:00","UserScreenname":"xamarinhq","Text":"Check out the what, why, and how of Mobile #DevOps with #VSAppCenter in this special guest series from @gshackles:… https://t.co/fClbh5B47i","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":26,"RawContent":null},{"Id":"955191774359838721","CreatedAt":"2018-01-21T21:34:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with ActivityTask, a helper for async/await on Android: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":15,"RawContent":null},{"Id":"954895828895916032","CreatedAt":"2018-01-21T01:58:01+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @lobrien  shows you how to add augmented reality to your #Xamarin apps with #ARKit in #iOS11:… https://t.co/pxoHpfwz5J","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":44,"FavoriteCount":24,"RawContent":null},{"Id":"954424071562956802","CreatedAt":"2018-01-19T18:43:25+00:00","UserScreenname":"xamarinhq","Text":"Running #Xamarin.iOS unit tests in #VSTS: https://t.co/20PDCJZkbJ https://t.co/ipWfWuyPoB","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":25,"RawContent":null},{"Id":"954398799362961408","CreatedAt":"2018-01-19T17:03:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinForms Program Manager @davidortinau shares his tips for beating the learning curve: https://t.co/amiCZn15ns","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":48,"FavoriteCount":25,"RawContent":null},{"Id":"954066862928793600","CreatedAt":"2018-01-18T19:04:00+00:00","UserScreenname":"xamarinhq","Text":"Check out the latest and greatest from @TheXamarinShow on getting started with iOS development in C# with #Xamarin: https://t.co/OpnYrTJhnw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":22,"FavoriteCount":5,"RawContent":null},{"Id":"954040437962104832","CreatedAt":"2018-01-18T17:19:00+00:00","UserScreenname":"xamarinhq","Text":"Get started with the JobScheduler API to enhance the experience your user has with your applications and update to… https://t.co/hJ3E8pPggV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":28,"FavoriteCount":8,"RawContent":null},{"Id":"953670252793090049","CreatedAt":"2018-01-17T16:48:01+00:00","UserScreenname":"xamarinhq","Text":"Add sound to your #XamarinForms app with the open-source SimpleAudioPlayer #NuGet plugin: https://t.co/r8NSFRpl33 https://t.co/BbdcfvhwCa","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":81,"FavoriteCount":35,"RawContent":null}]}},"RunOn":"2018-01-30T05:30:41.328913Z","RunDurationInMilliseconds":4444}